{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/uploads/logo.png","path":"uploads/logo.png","modified":0,"renderable":0},{"_id":"source/uploads/avatar.png","path":"uploads/avatar.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"c6f183b701c72e75630725141be6ac94cee59a96","modified":1481187327766},{"_id":"themes/next/.gitignore","hash":"63d003fa46cf9665b4dab1786f9dc694812a5a79","modified":1481081332924},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1481081332925},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1481081332926},{"_id":"source/favicon.ico","hash":"9af12c9a03801ad42e881e02425d70f62018f1a5","modified":1481262440370},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1481081332926},{"_id":"themes/next/_config.yml","hash":"42b77c8216c20809914f939bb485a871d3b509f9","modified":1489646646556},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1481081332926},{"_id":"themes/next/bower.json","hash":"da39b00fcdf2e7a42af412de0a4d3617cc6d7084","modified":1481081332927},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1481081332923},{"_id":"themes/next/.bowerrc","hash":"20038353db532b4c40625419d396da7359f89cbe","modified":1481081332923},{"_id":"themes/next/.javascript_ignore","hash":"beb0b95736650284ceb712a162cc033847a83cd3","modified":1481081332925},{"_id":"themes/next/gulpfile.coffee","hash":"4e8c1082fa82e383494ff5b5963b7936d9c7bb2e","modified":1481081332928},{"_id":"themes/next/package.json","hash":"95eaba1607544965e432d56406bae391dd11bcbb","modified":1481081332949},{"_id":"source/_posts/ES5-array-prototype.md","hash":"c728a90f2f4c13b2850da15eb1415ce441a727de","modified":1492147593948},{"_id":"source/_posts/javascript-zen.md","hash":"65197ff7bb9b46842e146925bb2fd0046d72fa0f","modified":1491548199417},{"_id":"source/_posts/h5-pimiao-game-project-summary.md","hash":"b0f5c680ede010bb50f8152cd7175a584d0cec34","modified":1484116637177},{"_id":"source/_posts/hello-world.md","hash":"605da0571da03037af9ee7f143dbf00e60598b6d","modified":1481100413421},{"_id":"source/_posts/web-chinese-fonts-guide.md","hash":"45ccbd456ac0b17f76d8d588e88b5d7f57c18b92","modified":1489647094407},{"_id":"source/categories/index.md","hash":"16cb2aa616a3538f6721e4c74570fdc9eb7f0f55","modified":1481097101915},{"_id":"source/tags/index.md","hash":"01973f13871a0a6d3919d1fb2ad6a8ad25ff2c44","modified":1481097113459},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"4312fb37fa2b8663006be3c4fe01125ec01171c1","modified":1481081332923},{"_id":"source/_posts/html5-audio-across-pages-continues-play.md","hash":"d31a2794e5e55542c50dcc546cc6411612908516","modified":1489051726066},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"2692e36cc35b1594530981e7727771f601720a43","modified":1481081332924},{"_id":"themes/next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1479197520000},{"_id":"themes/next/languages/en.yml","hash":"b7e2e66b99c494b7d615aa561a6404adc55d4ee5","modified":1481267279524},{"_id":"themes/next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1479197520000},{"_id":"themes/next/languages/default.yml","hash":"767470a80dc257e23e14c3a78e8c52a46c9d6209","modified":1479197520000},{"_id":"themes/next/languages/fr-FR.yml","hash":"9fca01ef917d33ae2ae6bc04561ec6799dff5351","modified":1479197520000},{"_id":"themes/next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1479197520000},{"_id":"themes/next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1479197520000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"1af06b8eea9d18028b5eeeed3bcf347fbec878cc","modified":1481267164397},{"_id":"themes/next/languages/ru.yml","hash":"257d11e626cbe4b9b78785a764190b9278f95c28","modified":1479197520000},{"_id":"themes/next/languages/zh-hk.yml","hash":"0b0e4b04509196d2da3184fad2acae8bb8dac6b3","modified":1481267222895},{"_id":"themes/next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1479197520000},{"_id":"themes/next/languages/zh-tw.yml","hash":"883a53424b5acf55d23002b5512eef790cbea2f6","modified":1481267229644},{"_id":"themes/next/layout/_layout.swig","hash":"7a1e4443c3ba1e08c20e64ddbf0b8255d034dab0","modified":1479197520000},{"_id":"themes/next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1479197520000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1479197520000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1479197520000},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1479197520000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1479197520000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1479197520000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1479197520000},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1479197520000},{"_id":"themes/next/test/.jshintrc","hash":"1dae9d1cf7df1ae6d5c5efd6cffb949e9b8dcebb","modified":1481081333014},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1481081333014},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1481081333015},{"_id":"source/uploads/logo.png","hash":"1acfa561da6438ebbb28e250e0fbafc6c38ccbbb","modified":1481263229774},{"_id":"source/uploads/avatar.png","hash":"acd913054a26f288798c6af8cdbb77fcce3e6237","modified":1481004105687},{"_id":"source/src/index.md","hash":"beaac9c0516b816e25caaca267cb082a36f92c68","modified":1491446690127},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1479197520000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479197520000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1479197520000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1479197520000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1479197520000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1479197520000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1479197520000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b8aaa008aafe4c6e325f7513719e1c251430883e","modified":1479197520000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1479197520000},{"_id":"themes/next/layout/_macro/post.swig","hash":"f12f108c1f8e91cc55d49805d42c1fd96cdf51a6","modified":1479197520000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"7a3ef28678467c45ee9416b41b943252e8036285","modified":1479197520000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"afd82ec5d75502e425a02a7933ea02bde93f7952","modified":1481275894486},{"_id":"themes/next/layout/_partials/head.swig","hash":"ca56f92e2fa82b03853869f5073ee1a5626a4796","modified":1479197520000},{"_id":"themes/next/layout/_partials/header.swig","hash":"f3627f51810bc906e4020a3fef61bc3629b63581","modified":1479197520000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"39d613e5a9f8389d4ea52d6082502af8e833b9f2","modified":1479197520000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1479197520000},{"_id":"themes/next/layout/_partials/search.swig","hash":"1431719d1dbba3f5ee385eebc46376d1a960b2d5","modified":1479197520000},{"_id":"themes/next/layout/_partials/search.swig.11570625","hash":"1431719d1dbba3f5ee385eebc46376d1a960b2d5","modified":1480656226000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1479197520000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1479197520000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1479197520000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1479197520000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1479197520000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1479197520000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1479197520000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1479197520000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1479197520000},{"_id":"themes/next/source/images/avatar.png","hash":"acd913054a26f288798c6af8cdbb77fcce3e6237","modified":1481004105687},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1481081332981},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1481081332981},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1481081332981},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1481081332982},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1481081332983},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1481081332984},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1481081332983},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1481081332982},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1481081332984},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1481081332983},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1481081332984},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1481081332985},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1481081332985},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479197520000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479197520000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479197520000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479197520000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479197520000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479197520000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479197520000},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"636f1181dd5887a70b4a08ca8f655d4e46635792","modified":1479197520000},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1479197520000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1479197520000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1479197520000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1479197520000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1479197520000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1479197520000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1479197520000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1479197520000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1479197520000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1479197520000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1479197520000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"82a2ac14d4200480a36bf10abcc3cc554ad744d6","modified":1479197520000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"394d9fff7951287cc90f52acc2d4cbfd1bae079d","modified":1479197520000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1479197520000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1479197520000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1479197520000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"b460e27db3dcd4ab40b17d8926a5c4e624f293a9","modified":1479197520000},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1479197520000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1479197520000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1479197520000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1479197520000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1479197520000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c5b28519b446c2af1e8754a6ae4d766823e6b348","modified":1479197520000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1479197520000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"3f0d6aa424f434e82ea507f740eeff110f996269","modified":1492155566767},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1479197520000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1479197520000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1479197520000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1479197520000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1479197520000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1479197520000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1479197520000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1479197520000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1479197520000},{"_id":"themes/next/source/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1479197520000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1479197520000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1479197520000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1479197520000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"c1072942459fa0880e8a33a1bd929176b62b4171","modified":1479197520000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1479197520000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1479197520000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1479197520000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1479197520000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1479197520000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1479197520000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1479197520000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1479197520000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1479197520000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1479197520000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1479197520000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1479197520000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1479197520000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1479197520000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1479197520000},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1481081332989},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1479197520000},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1481081332989},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1481081332995},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1481081332995},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1481081332995},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1481081332997},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1479197520000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1481081332998},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1481081332996},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"bb093f2ac1f1305069d873a7941324c8e0de3135","modified":1481081332997},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1481081332998},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1479197520000},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1481081333007},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1481081332997},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1481081333008},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1481081333008},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1481081333009},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1481081333009},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1481081333009},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1481081333011},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1481081333008},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1481081333011},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1481081333013},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1481081333013},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1481081333014},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1479197520000},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1481081333007},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1479197520000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1479197520000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1479197520000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1479197520000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1479197520000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1479197520000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1479197520000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1479197520000},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1479197520000},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1479197520000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1479197520000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1479197520000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1479197520000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1479197520000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1479197520000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1479197520000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1479197520000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1479197520000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1479197520000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1479197520000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1479197520000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1479197520000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1479197520000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1479197520000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1479197520000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1479197520000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1479197520000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1479197520000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1479197520000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1479197520000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1479197520000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1479197520000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1479197520000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"7b206cd8921bc042f8e37a74aea1abc8a5ec8ab4","modified":1479197520000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1479197520000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1479197520000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1479197520000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1479197520000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1479197520000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1479197520000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1479197520000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1479197520000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1479197520000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1479197520000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1479197520000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1479197520000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1479197520000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1479197520000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1479197520000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1481081332989},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1479197520000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1481081332990},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1481081332990},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1481081332991},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1481081332993},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1481081332991},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1481081332994},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1481081332990},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1481081332994},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1481081332999},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"811432ad1e2d6c1f6da9a63fd919bf2a02b71dd9","modified":1481081332999},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1481081333006},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"4c2c5f5f6cc86d775a44b944661e038b7be98149","modified":1481081332999},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1479197520000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1479197520000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1481081332997},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1481081332996},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1481081333010},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1481081333010},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1479197520000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1479197520000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1479197520000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1479197520000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1479197520000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1481081333001},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1481081333001},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1481081333006},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1481081333012},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"5357db10656b260f8b332c67bb06e486bc64a4ad","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4b7f81e1006e7acee3d1c840ccba155239f830cc","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"c6dab7661a6b8c678b21b7eb273cef7100f970f6","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"eba491ae624b4c843c8be4c94a044085dad4ba0f","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"5433b6bc9d8f0c4685e760b326445ac51245b0a8","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"637c6b32c58ecf40041be6e911471cd82671919b","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"3eb73cee103b810fa56901577ecb9c9bb1793cff","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1479197520000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1479197520000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1479197520000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1479197520000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1479197520000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1479197520000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1479197520000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1479197520000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1479197520000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1479197520000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1479197520000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1481081332991},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1481081332991},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1481081332992},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1479197520000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1481081332992},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1481081333005},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1481081332993},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1481081332993},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1479197520000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1479197520000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1481081333004},{"_id":"public/categories/index.html","hash":"d0478ede1023ee77a87ddc048ceed37a98b5bfdd","modified":1492155538387},{"_id":"public/tags/index.html","hash":"b070a51869c3827ddf7d1b4bc0a9517dbf4af176","modified":1492155538387},{"_id":"public/2016/12/06/hello-world/index.html","hash":"1a221ce242f879eb00ea90a1986a677666f67958","modified":1492155538387},{"_id":"public/archives/index.html","hash":"d7be245f6607b8030c88cb0f4440a3ffb223ab87","modified":1492155538387},{"_id":"public/archives/2016/index.html","hash":"5efa254391793ee41d388547dfa59d0e268eb9db","modified":1492155538387},{"_id":"public/archives/2016/12/index.html","hash":"7ce65c099ad7b08ad65d6e4ce465e455e36aed4a","modified":1492155538387},{"_id":"public/archives/2017/index.html","hash":"087a7292f8f772cc842f84f50878ca18a3557595","modified":1492155538388},{"_id":"public/archives/2017/01/index.html","hash":"4e8414787579cb8623c3570f9639d19184276bc0","modified":1492155538388},{"_id":"public/archives/2017/03/index.html","hash":"c6254392e998b3dfa3cb3289d7df7d1361dd90ac","modified":1492155538389},{"_id":"public/categories/javaScript日常笔记/index.html","hash":"a70e047ca59e6f9c3bb4351b9616bd3258ff6c53","modified":1492155538387},{"_id":"public/tags/array/index.html","hash":"f75261d3bbac73d9c8c9566c63f69a32280bfa1c","modified":1492155538387},{"_id":"public/tags/font/index.html","hash":"e99c9d0dd6208fb05a14f5452a1fd9cf36b3f364","modified":1492155538387},{"_id":"public/tags/audio/index.html","hash":"98ac5593fcd4b6e47be485e2938ba1d129a8091c","modified":1492155538387},{"_id":"public/src/index.html","hash":"8582f63d0ec3ad3868bb9ca5a23f8827901ba390","modified":1492155538389},{"_id":"public/2016/12/26/h5-pimiao-game-project-summary/index.html","hash":"23d1036bdc6b7402b2198120a4048def2da60321","modified":1492155538389},{"_id":"public/2017/01/17/html5-audio-across-pages-continues-play/index.html","hash":"fe105e03b8d16ae72737fd4aa4590ca805d5b288","modified":1492155538389},{"_id":"public/2017/03/08/ES5-array-prototype/index.html","hash":"89020ff00978b1c0b03be661da8866dbc97ef991","modified":1492155538389},{"_id":"public/2017/03/16/web-chinese-fonts-guide/index.html","hash":"1075669acc36a03dca11f688025a0f5331b10de7","modified":1492155538389},{"_id":"public/index.html","hash":"bb1ae510e84bea2dd8c013c40be9b4567e01a30a","modified":1492155538389},{"_id":"public/archives/2017/04/index.html","hash":"fc2a788e347d2cf5e656ffd2d1e5351cfda269fa","modified":1492155538389},{"_id":"public/tags/localStorage/index.html","hash":"6d068a99efddf1956e6e64ca9ef6335eaf037dde","modified":1492155538387},{"_id":"public/categories/项目总结/index.html","hash":"db7655d8c761dc49af2dcf06ca82481b878a540b","modified":1492155538387},{"_id":"public/2017/04/07/javascript-zen/index.html","hash":"664205f401194e2d80a840d4b4c7b863d41f57ae","modified":1492155538389},{"_id":"public/CNAME","hash":"c6f183b701c72e75630725141be6ac94cee59a96","modified":1491548360660},{"_id":"public/favicon.ico","hash":"9af12c9a03801ad42e881e02425d70f62018f1a5","modified":1491548360660},{"_id":"public/images/avatar.png","hash":"acd913054a26f288798c6af8cdbb77fcce3e6237","modified":1491548360660},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1491548360660},{"_id":"public/uploads/logo.png","hash":"1acfa561da6438ebbb28e250e0fbafc6c38ccbbb","modified":1491548360660},{"_id":"public/uploads/avatar.png","hash":"acd913054a26f288798c6af8cdbb77fcce3e6237","modified":1491548360660},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1491548360660},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1491548360660},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1491548360660},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1491548360660},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1491548360660},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1491548360660},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1491548360660},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1491548360660},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1491548360660},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1491548360660},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1491548360660},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1491548360660},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1491548360660},{"_id":"public/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1491548360660},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1491548360661},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1491548360661},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1491548360661},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1491548360661},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1491548360661},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1491548360661},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1491548360661},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1491548360661},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1491548360661},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1491548360661},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1491548360661},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1491548360661},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1491548360661},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1491548360661},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1491548360661},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1491548360661},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1491548360661},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1491548360661},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1491548360661},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1491548361320},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1491548361327},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1491548361330},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1491548361330},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1491548361330},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1491548361331},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1491548361331},{"_id":"public/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1491548361342},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1491548361342},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1491548361342},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1491548361342},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1491548361342},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1491548361342},{"_id":"public/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1491548361342},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1491548361343},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1491548361343},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1491548361343},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1491548361343},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1491548361343},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1491548361343},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1491548361343},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1491548361343},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1491548361343},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1491548361343},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1491548361343},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1491548361343},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1491548361343},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1491548361343},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1491548361343},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1491548361343},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1491548361343},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1491548361343},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1491548361343},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1491548361343},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1491548361343},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1491548361343},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1491548361343},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1491548361343},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1491548361343},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1491548361343},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1491548361343},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1491548361343},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1491548361343},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1491548361343},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1491548361343},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1491548361343},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1491548361343},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1491548361343},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1491548361343},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1491548361343},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1491548361343},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1491548361343},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1491548361343},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1491548361343},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1491548361344},{"_id":"public/css/main.css","hash":"95727eb76cfbf71cf4d539453c9e500a689373bf","modified":1492155538872},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1491548361344},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1491548361344},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1491548361344},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1491548361344},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1491548361344},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1491548361344},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1491548361344},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1491548361344},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1491548361344},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1491548361344},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1491548361344},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1491548361344},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1491548361344},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1491548361344},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1491548361345},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1491548361345},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1491548361345},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1491548361345},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1491548361345},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1491548361345},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1491548361346},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1491548361379},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1491548361379},{"_id":"themes/phantom/_config.yml","hash":"a689a98f701e482470801c9207ee386c62162784","modified":1491553720639},{"_id":"themes/phantom/README.md","hash":"44d2145a91a2058f37ed65a0334c948cdc8c30ec","modified":1462775092000},{"_id":"themes/phantom/languages/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1462775092000},{"_id":"themes/phantom/languages/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1462775092000},{"_id":"themes/phantom/languages/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1462775092000},{"_id":"themes/phantom/languages/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1462775092000},{"_id":"themes/phantom/languages/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1462775092000},{"_id":"themes/phantom/languages/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1462775092000},{"_id":"themes/phantom/languages/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1462775092000},{"_id":"themes/phantom/layout/index.ejs","hash":"09022447f0047ca04e14c27e8cdccc763131e9ad","modified":1462775092000},{"_id":"themes/phantom/languages/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1462775092000},{"_id":"themes/phantom/layout/layout.ejs","hash":"1cc5d0e68150966bf19e149c5bca86d5d741aebb","modified":1462775092000},{"_id":"themes/phantom/layout/page.ejs","hash":"54f11f374dd0903086bd5bf7db507908034a8f28","modified":1462775092000},{"_id":"themes/phantom/layout/post.ejs","hash":"38382e9bbeb6b8d2eafbd53fff2984111f524c1a","modified":1462775092000},{"_id":"themes/phantom/languages/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1462775092000},{"_id":"themes/phantom/layout/archive.ejs","hash":"7ab1832ba8a8156a61896e9b618b084771e77124","modified":1462775092000},{"_id":"themes/phantom/layout/_partial/article-archive.ejs","hash":"a59de36284b5fa1d1ae173ff69a08e20250b29d0","modified":1462775092000},{"_id":"themes/phantom/layout/_partial/article-index.ejs","hash":"cccb2218f48dfbeef82da6d3417d56c1a1291c60","modified":1462775092000},{"_id":"themes/phantom/layout/_partial/article-tags.ejs","hash":"df2a96bad2f411ba2a8216721fc2996fa79bc58b","modified":1462775092000},{"_id":"themes/phantom/layout/_partial/article-page.ejs","hash":"56bbf11584b920213a9ca811424400cdd767ebf9","modified":1462775092000},{"_id":"themes/phantom/layout/_partial/comments.ejs","hash":"3fedb75436439d1d6979b7e4d20d48a593e12be4","modified":1462775092000},{"_id":"themes/phantom/layout/_partial/footer.ejs","hash":"121ac5c8ec6081bb0dc32d8306f4fab28ea5c56d","modified":1491552781120},{"_id":"themes/phantom/layout/_partial/article-full.ejs","hash":"2d1323baffda19705c83dd7bc2324ebf7f2ac246","modified":1492153797661},{"_id":"themes/phantom/layout/_partial/gallery.ejs","hash":"80c3758b90fe6c197b52602456e2c4dcf7167847","modified":1462775092000},{"_id":"themes/phantom/layout/_partial/menu.ejs","hash":"1e08ad924dc7c68acc2ff563114d8e8756abf8e3","modified":1462775092000},{"_id":"themes/phantom/layout/_partial/google-analytics.ejs","hash":"4e6e8de9becea5a1636a4dcadcf7a10c06e2426e","modified":1462775092000},{"_id":"themes/phantom/layout/_partial/after-footer.ejs","hash":"27a7c8f2d2cee72ec94be13ad50fd54a8cd1830f","modified":1492153797659},{"_id":"themes/phantom/layout/_partial/head.ejs","hash":"c48d8457ed29b3df5dc478e28c5a74f350a163d5","modified":1491554751968},{"_id":"themes/phantom/layout/_partial/pagination.ejs","hash":"e093a501c62b8ac7587d6b684f39362955c83490","modified":1462775092000},{"_id":"themes/phantom/source/images/logo.svg","hash":"6de70d5f1da267250a06423e1fa9c32c0f61b3ed","modified":1462775092000},{"_id":"themes/phantom/source/css/font-awesome.min.css","hash":"12d6861075de8e293265ff6ff03b1f3adcb44c76","modified":1462775092000},{"_id":"themes/phantom/source/css/ie9.css","hash":"1dad1d8872d9d5c8d7013d9e2327c7ce947c5951","modified":1462775092000},{"_id":"themes/phantom/source/css/ie8.css","hash":"4f41720ed7a2d4831d248aa591b573383f22263a","modified":1462775092000},{"_id":"themes/phantom/source/css/main.css","hash":"75fa8ad3104ce33a5eb67c757544e1a9781c18e5","modified":1491555021403},{"_id":"themes/phantom/source/js/main.js","hash":"c6b81593669f87d99a6806ac2f41fad91d67a410","modified":1492153797663},{"_id":"themes/phantom/source/js/util.js","hash":"3ece9010adc07dd3dc27ced0e22e7ac8bcd16e14","modified":1462775092000},{"_id":"themes/phantom/source/sass/font-awesome.min.css","hash":"12d6861075de8e293265ff6ff03b1f3adcb44c76","modified":1462775092000},{"_id":"themes/phantom/source/sass/ie8.scss","hash":"0119f291fb39e5910a2a663f6fd8ef16f914d4f0","modified":1462775092000},{"_id":"themes/phantom/source/sass/ie9.scss","hash":"ead318fa43632d5f6756e59e4c91fc57bfffa8df","modified":1462775092000},{"_id":"themes/phantom/source/sass/main.scss","hash":"18c4b454cad60cd5cad8b8c5537f8e634bc4dfc6","modified":1492153797667},{"_id":"themes/phantom/source/js/skel.min.js","hash":"14f390065fddc652ca1717aaebf5b44f8de78f9d","modified":1462775092000},{"_id":"themes/phantom/source/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1462775092000},{"_id":"themes/phantom/source/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1462775092000},{"_id":"themes/phantom/source/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1462775092000},{"_id":"themes/phantom/source/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1462775092000},{"_id":"themes/phantom/source/js/jquery.min.js","hash":"276c87ff3e1e3155679c318938e74e5c1b76d809","modified":1462775092000},{"_id":"themes/phantom/source/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1462775092000},{"_id":"themes/phantom/source/js/ie/html5shiv.js","hash":"6ee35415750b51dd65a6521d1dd91aba3e2ae828","modified":1462775092000},{"_id":"themes/phantom/source/js/ie/respond.min.js","hash":"8e786bcf921518f0c8c46d14a51235af2fb99926","modified":1462775092000},{"_id":"themes/phantom/source/sass/base/_code.scss","hash":"4ad725ebb738b1d2cd6551d3b7b2354640a0f75c","modified":1492153797664},{"_id":"themes/phantom/source/sass/components/_archives.scss","hash":"c67d35c13df4ba96780a9db92884113ba20527d7","modified":1462775092000},{"_id":"themes/phantom/source/sass/components/_box.scss","hash":"78e0660402876cece2af4d67e6a1ca4a8e259e46","modified":1462775092000},{"_id":"themes/phantom/source/sass/base/_page.scss","hash":"bf05bf14c752b79043f9fb158cc9c2483ff09177","modified":1491554994213},{"_id":"themes/phantom/source/sass/components/_form.scss","hash":"61f8aaf6469ba14b2d3a93ae1c2aceed959a203e","modified":1462775092000},{"_id":"themes/phantom/source/sass/base/_typography.scss","hash":"342800bf6ca61182eee3569637260d51ecf640de","modified":1491553001549},{"_id":"themes/phantom/source/sass/components/_gallery.scss","hash":"a7d7973d8dbe0391a66b10b77d6d0848dbc69596","modified":1462775092000},{"_id":"themes/phantom/source/sass/components/_button.scss","hash":"b0a66782c3c971f27933adbbd9608abed4790011","modified":1462775092000},{"_id":"themes/phantom/source/sass/components/_section.scss","hash":"53cfb6eb05860f34cb2722c0802754d423473e38","modified":1462775092000},{"_id":"themes/phantom/source/sass/components/_image.scss","hash":"10912b920e29c62e1832dc7e99c92d2424612a3e","modified":1462775092000},{"_id":"themes/phantom/source/sass/components/_icon.scss","hash":"e05ce4b4ebf3860b0be710a9092c35289e2da70f","modified":1462775092000},{"_id":"themes/phantom/source/sass/components/_list.scss","hash":"3e026ecd8d3ec101f465c2b36b2a5500f8f50e8e","modified":1462775092000},{"_id":"themes/phantom/source/sass/components/_pagination.scss","hash":"291ae4dfa01d2417d8028aa8c7592de5151f4d9c","modified":1462775092000},{"_id":"themes/phantom/source/sass/components/_tiles.scss","hash":"fddd479c1fc3c081affd1935c6b20b17c28ebe79","modified":1462775092000},{"_id":"themes/phantom/source/sass/components/_table.scss","hash":"835e25f31f283ab6ed1708f8d7d4c7f055d5307b","modified":1462775092000},{"_id":"themes/phantom/source/sass/layout/_main.scss","hash":"add0d0dfe30a44099958c337b0685476503201cf","modified":1492153797665},{"_id":"themes/phantom/source/sass/layout/_footer.scss","hash":"86bcd67b4f5abb3d48f4ae333a1b8b1738d2833d","modified":1462775092000},{"_id":"themes/phantom/source/sass/layout/_header.scss","hash":"fe1fcfe7b7492f62a259cd087db9fd2c097379d0","modified":1491552184248},{"_id":"themes/phantom/source/sass/layout/_wrapper.scss","hash":"8a17f3846c73918df2e44ab88bbbd49151f18044","modified":1462775092000},{"_id":"themes/phantom/source/sass/libs/_functions.scss","hash":"4f1e4e3e65837ef26d6df42487ce0ee6d9a3c4cb","modified":1462775092000},{"_id":"themes/phantom/source/sass/layout/_menu.scss","hash":"44a085becfe39d541b509e42900906b6e361cf40","modified":1462775092000},{"_id":"themes/phantom/source/sass/libs/_mixins.scss","hash":"091d0598e9beda606514d7a87d0879ef0558ed40","modified":1462775092000},{"_id":"themes/phantom/source/sass/libs/_vars.scss","hash":"b457effdafa645712c65797bb0ccbb9125c1d79e","modified":1491554790000},{"_id":"themes/phantom/source/sass/libs/_skel.scss","hash":"da4ca53bc3308b9f4bf35a1a75958fbfb56b4b90","modified":1462775092000},{"_id":"themes/phantom/source/fonts/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1462775092000},{"_id":"public/images/logo.svg","hash":"6de70d5f1da267250a06423e1fa9c32c0f61b3ed","modified":1491549994076},{"_id":"public/sass/ie8.scss","hash":"0119f291fb39e5910a2a663f6fd8ef16f914d4f0","modified":1491549994077},{"_id":"public/sass/main.scss","hash":"6ce52c347980c1bd1ccf429656fd61225112fe7f","modified":1491549994077},{"_id":"public/sass/ie9.scss","hash":"ead318fa43632d5f6756e59e4c91fc57bfffa8df","modified":1491549994077},{"_id":"public/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1491549994081},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1491549994083},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1491549994084},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1491549994084},{"_id":"public/css/ie8.css","hash":"4f41720ed7a2d4831d248aa591b573383f22263a","modified":1491549994094},{"_id":"public/js/util.js","hash":"3ece9010adc07dd3dc27ced0e22e7ac8bcd16e14","modified":1491549994094},{"_id":"public/css/ie9.css","hash":"1dad1d8872d9d5c8d7013d9e2327c7ce947c5951","modified":1491549994094},{"_id":"public/js/main.js","hash":"373d6a6b66b774cd548c36ea65f43fe9986a2fec","modified":1491549994094},{"_id":"public/js/skel.min.js","hash":"14f390065fddc652ca1717aaebf5b44f8de78f9d","modified":1491549994095},{"_id":"public/js/ie/html5shiv.js","hash":"6ee35415750b51dd65a6521d1dd91aba3e2ae828","modified":1491549994095},{"_id":"public/js/ie/respond.min.js","hash":"8e786bcf921518f0c8c46d14a51235af2fb99926","modified":1491549994095},{"_id":"public/css/font-awesome.min.css","hash":"12d6861075de8e293265ff6ff03b1f3adcb44c76","modified":1491549994095},{"_id":"public/sass/font-awesome.min.css","hash":"12d6861075de8e293265ff6ff03b1f3adcb44c76","modified":1491549994095},{"_id":"public/js/jquery.min.js","hash":"276c87ff3e1e3155679c318938e74e5c1b76d809","modified":1491549994095},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1491549994095},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1491549994102},{"_id":"public/sass/ie9.css","hash":"9ea5a5ca43be204a431ca6925f2203eeabd6bfdb","modified":1491550424014},{"_id":"public/sass/ie8.css","hash":"40251aebbb07f3c344edcf48c2b4aab4ee1736d8","modified":1491550424015},{"_id":"public/sass/main.css","hash":"65acee5dd6896ac86f54c4f19e0dcefb728da422","modified":1491556226368}],"Category":[{"name":"javaScript日常笔记","_id":"cj17hdrrd0004hkajlfcynmbx"},{"name":"项目总结","_id":"cj17hdrrs000ehkaj01x4j81h"}],"Data":[],"Page":[{"title":"categories","date":"2016-12-07T07:36:04.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-12-07 15:36:04\ntype: \"categories\"\n---\n","updated":"2016-12-07T07:51:41.915Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj17hdrr80001hkajeqsjjokt","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-12-07T07:49:10.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-12-07 15:49:10\ntype: \"tags\"\n---\n","updated":"2016-12-07T07:51:53.459Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj17hdrrb0003hkajft6k16bn","content":"","excerpt":"","more":""},{"title":"资源收集整理","date":"2016-12-09T06:58:21.000Z","type":"src","_content":"\n\n## CSS\n\n- [normalize.css](https://github.com/necolas/normalize.css)\n\n**CSS grid**\n- [neat - A lightweight semantic grid framework built with Sass](https://github.com/thoughtbot/neat)\n- [Gridforms - 网格表单](https://github.com/kumailht/gridforms/)\n- [TOAST - Insane, no-nonsense CSS grid](http://daneden.github.io/Toast/)\n\n**Animate**\n- [Effeckt.css - 动画库:modal,button,list,tab...](https://github.com/h5bp/Effeckt.css)\n- [Tridiv - Creating 3D shapes in CSS ](http://tridiv.com/)\n- [animate.css](https://github.com/daneden/animate.css)\n- [magic animations](http://www.minimamente.com/example/magic_animations/)\n- [Effeckt](http://h5bp.github.io/Effeckt.css/)\n- [Hover](https://github.com/IanLunn/Hover)\n- [ihover](https://github.com/gudh/ihover)\n- [SpinThatShit - CSSloader](https://github.com/MatejKustec/SpinThatShit)\n- [loaders.css](https://github.com/ConnorAtherton/loaders.css)\n- [css-loaders](https://github.com/lukehaas/css-loaders)\n- [SPINNERS - HTML and CSS \"loading icon\" animations](https://boguz.github.io/Spinners/)\n- [csspin - CSS Spinners and Loaders](https://github.com/webkul/csspin)\n- [csshake - Some CSS classes to move your DOM](https://github.com/elrumordelaluz/csshake)\n- [Rocket - Rocket create an animation from two items via jQuery](https://github.com/miniMAC/rocket)\n- [Animate Plus - CSS and SVG animation library](https://github.com/bendc/animateplus)\n- [textillate.js - CSS3 text animations](http://textillate.js.org/)\n- [mojs - 图形运动动画](https://github.com/legomushroom/mojs)\n- [缓动函数速查表](http://easings.net/zh-cn#)\n\n**Framework**\n- [Pure - A set of small, responsive CSS modules](https://github.com/yahoo/pure)\n- [materialize - Materialize, a CSS Framework based on Material Design](https://github.com/dogfalo/materialize/)\n- [Bulma - A modern CSS framework based on Flexbox](https://github.com/jgthms/bulma)\n- [bootflat-Flat UI KIT based on Bootstrap 3.3.0 CSS framework](http://bootflat.github.io/index.html)\n- [mui-Material Design CSS Framework](https://github.com/muicss/mui)\n- [Flexbox Patterns - Build awesome user interfaces with CSS flexbox](http://www.flexboxpatterns.com/home)\n- [Pintsize-Super flexbox](http://pintsize.io/examples)\n- [picnic](https://github.com/picnicss/picnic)\n- [CoreUI-Free-Bootstrap-Admin-Template](https://github.com/mrholek/CoreUI-Free-Bootstrap-Admin-Template)\n- [AdminLTE Control Panel Template](https://almsaeedstudio.com/)\n- [Refills - Components and patterns built with Bourbon and Neat](http://refills.bourbon.io/)\n\n\n**Flexbox**\n- [Flexbox Grid - flexbox布局框架](http://flexboxgrid.com/)\n- [Flexbox Patterns](http://www.flexboxpatterns.com/home)\n- [solved-by-flexbox](https://github.com/philipwalton/solved-by-flexbox)\n- [Flexibility - 各属性在线演示](https://jonathantneal.github.io/flexibility/)\n- [flexplorer - 布局](http://bennettfeely.com/flexplorer/)\n- [Properties for the flex container - 各种示例](http://codepen.io/enxaneta/full/adLPwv/)\n\n\n**Components**\n- [emoji-css](https://github.com/afeld/emoji-css)\n- [awesome-bootstrap-checkbox](https://github.com/flatlogic/awesome-bootstrap-checkbox)\n- [css-toggle-switch](https://github.com/ghinda/css-toggle-switch)\n- [simple-toggle-switch](http://www.cssflow.com/snippets/simple-toggle-switch/demo)\n\n**Utils**\n- [devices.css - CSS (Mostly) Flat Mobile Devices](https://github.com/marvelapp/devices.css)\n\n***\n\n## Font Icons\n- [Font Awesome](http://fontawesome.io/)\n- [ionicons](http://ionicons.com/)\n- [Material icons](https://material.io/icons/)\n- [Iconfont - 阿里巴巴矢量图标库](http://www.iconfont.cn/plus)\n\n\n***\n\n## javaScript\n- [Device.js - 设备判断 iOS, Android | Portrait vs. Landscape | Tablet vs. Mobile](https://github.com/matthewhudson/device.js)\n- [Clipboard.js - Copy to clipboard.No Flash](https://github.com/zenorocha/clipboard.js/)\n- [jquery.adaptive - backgrounds-提取图片颜色并作为背景色显示](https://github.com/briangonzalez/jquery.adaptive-backgrounds.js)\n- [Percircle-CSS percentage circle built with jQuery](https://github.com/toubou91/percircle)\n- [jQuery Timer: Start/Stop/Resume/Remove](https://github.com/walmik/timer.jquery)\n- [TimeCircles](https://github.com/wimbarelds/TimeCircles)\n- [Multi-select](http://loudev.com/)\n- [Fakecrop - Resize and crop bigger images and elements inside a container element](https://github.com/VuongN/jQuery-Fakecrop)\n- [jQThumb - 按比例显示缩略图](https://github.com/pakcheong/jqthumb)\n- [Intro.js - Introductions for websites and features with a step-by-step guide](https://github.com/usablica/intro.js)\n- [Basil.js - Unified localstorage, cookie and session storage JavaScript API](https://github.com/Wisembly/basil.js)\n- [LocalForage - localForage is a fast and simple storage library for JavaScript](https://github.com/localForage/localForage)\n- [WebStorageCache - 对localStorage 和sessionStorage 进行了扩展，添加了超时时间，序列化方法](https://github.com/WQTeam/web-storage-cache)\n- [GridList - Drag and drop library for two-dimensional, resizable and responsive lists](https://github.com/hootsuite/grid)\n- [Notie - a clean and simple notification, input, and selection suite for javascript](https://github.com/jaredreich/notie)\n- [Slick - 轮播支持PC和Mobile](https://github.com/kenwheeler/slick/)\n\n\n## Animate javaScript/CSS3\n- [granim.js - 渐变动画/颜色/图片](https://github.com/sarcadass/granim.js)\n- [anime.js](https://github.com/juliangarnier/anime)\n- [shape-shifter](https://github.com/kennethcachia/shape-shifter)\n- [led - canvas粒子文字插件](https://github.com/lixinliang/led)\n- [ScrollReveal - 滚动显示动画](https://scrollrevealjs.org/)\n- [bounce.js](https://github.com/tictail/bounce.js)\n\n***\n\n\n## 移动端\n- [lib.flexible - 移动端自适应方案](https://github.com/amfe/lib-flexible)\n- [FastClick - 解决移动端浏览器 300 毫秒点击延迟问题](https://github.com/ftlabs/fastclick)\n- [noclickdelay.js - 取消移动设备上click事件的300毫秒延迟](https://github.com/baijunjie/noclickdelay.js)\n- [AlloyTouch - 腾讯AlloyTeam移动Web触摸解决方案](https://github.com/AlloyTeam/AlloyTouch/blob/master/README_CN.md)\n- [AlloyFinger - 多点触摸手势库](https://github.com/AlloyTeam/AlloyFinger)\n\n\n\n***\n\n\n## 微信小程序\n- [Wafer - 企业级微信小程序全栈方案](https://github.com/tencentyun/wafer)\n- [小相册](https://github.com/CFETeam/weapp-demo-album)\n- [地图定位](https://github.com/giscafer/wechat-weapp-mapdemo)\n- [豆瓣电影](https://github.com/zce/weapp-demo)\n- [购物车](https://github.com/SeptemberMaples/wechat-weapp-demo)\n- [番茄时钟](https://github.com/kraaas/timer)\n- [手机QQ](https://github.com/xiehui999/SmallAppForQQ)\n- [知乎日报](https://github.com/LiuCaiHe/wechat-app-sample)\n- [Apple Music](https://github.com/Sioxas/AppleMusic)\n- [wechat-app-music](https://github.com/eyasliu/wechat-app-music)\n- [We重邮 - 微信小程序](https://github.com/lanshan-studio/wecqupt)\n- [wxapp-cli - 微信小程序脚手架](https://github.com/MeCKodo/wxapp-cli)\n\n***\n\n## Vue.js\n- [Vue.js 2.0中文文档](https://vuefe.cn/v2/guide/)\n- [Vuex - 状态管理模式](https://vuex.vuejs.org/zh-cn/intro.html)\n- [vue-router2 - 路由](https://router.vuejs.org/zh-cn/)\n- [vue-amap - 基于Vue2.0和高德地图的地图组件](https://github.com/ElemeFE/vue-amap)\n- [mint-ui - Mobile UI elements for Vue.js](https://github.com/ElemeFE/mint-ui)\n- [element - A Vue.js 2.0 UI Toolkit for Web](https://github.com/ElemeFE/element)\n- [jackblog - vue 版个人博客系统](https://github.com/jackhutu/jackblog-vue)\n- [vux - 基于WeUI和Vue(2.x)开发的移动端UI组件库，主要服务于微信页面](https://github.com/airyland/vux)\n- [VueStar - 点赞动画组件](https://github.com/OYsun/VueStar)\n- [NeteaseCloudWebApp - 网易云音乐](https://github.com/javaSwing/NeteaseCloudWebApp)\n- [vue-ssr - vue服务端渲染模板](https://github.com/ccforward/vue-ssr)\n- [vue2-elm](https://github.com/bailicangdu/vue2-elm)\n\n\n***\n\n\n## JSON Data\n- [微票bannerList](http://json.bmbstack.com/bannerList)\n- [微票playingList](http://json.bmbstack.com/playingList)\n- [微票cinemaList](http://json.bmbstack.com/cinemaList)\n- [知乎日报](https://github.com/izzyleung/ZhihuDailyPurify/wiki/%E7%9F%A5%E4%B9%8E%E6%97%A5%E6%8A%A5-API-%E5%88%86%E6%9E%90)\n- [AD's API](https://api.imjad.cn/)\n- [远程数据接口代理服务](https://bird.ioliu.cn/)\n\n\n***\n\n## 效率工具\n- [bourbon - A Lightweight Sass Tool Set](https://github.com/thoughtbot/bourbon)\n- [css3 cubic-bezier - 在线生成](http://cubic-bezier.com/)\n- [css3 tools - css3动画工具](https://isux.tencent.com/css3/tools.html)\n- [CSS3 Tool](http://westciv.com/tools/gradients/)\n- [spy-debugger - 微信调试，各种WebView样式调试、手机浏览器的页面真机调试](https://github.com/wuchangming/spy-debugger)\n\n\n## 前端构建脚手架\n- [webpack-seed - 基于webpack搭建纯静态页面型前端工程解决方案模板](https://github.com/chemdemo/webpack-seed)\n- [Webpack-Vue-MultiplePage - 在多页面项目下使用 Webpack + Vue](https://github.com/cnu4/Webpack-Vue-MultiplePage)\n- [jarvan4dev/vue-multi-page - 基于vue-cli脚手架修改而成的多页面(非SPA)项目脚手架](https://github.com/jarvan4dev/vue-multi-page)\n- [cooking-demo/multiple-pages-vue - Vue 2 + webpack 2 多页面例子](https://github.com/cooking-demo/multiple-pages-vue)\n- [cooking-demo/simple - vue2+webpack2单页面](https://github.com/cooking-demo/simple)\n- [fis3-base - 基于fis3的纯前端解决方案](https://github.com/yanhaijing/fis3-base)\n- [cooking - 基于 webapck 但更友好的配置项、易用的扩展配置机制](http://elemefe.github.io/cooking/)\n- [gulp-requirejs-boilerplate - 基于gulp+requirejs+less的多应用构建方案](https://github.com/xiongwilee/gulp-requirejs-boilerplate)\n","source":"src/index.md","raw":"---\ntitle: 资源收集整理\ndate: 2016-12-09 14:58:21\ntype: \"src\"\n---\n\n\n## CSS\n\n- [normalize.css](https://github.com/necolas/normalize.css)\n\n**CSS grid**\n- [neat - A lightweight semantic grid framework built with Sass](https://github.com/thoughtbot/neat)\n- [Gridforms - 网格表单](https://github.com/kumailht/gridforms/)\n- [TOAST - Insane, no-nonsense CSS grid](http://daneden.github.io/Toast/)\n\n**Animate**\n- [Effeckt.css - 动画库:modal,button,list,tab...](https://github.com/h5bp/Effeckt.css)\n- [Tridiv - Creating 3D shapes in CSS ](http://tridiv.com/)\n- [animate.css](https://github.com/daneden/animate.css)\n- [magic animations](http://www.minimamente.com/example/magic_animations/)\n- [Effeckt](http://h5bp.github.io/Effeckt.css/)\n- [Hover](https://github.com/IanLunn/Hover)\n- [ihover](https://github.com/gudh/ihover)\n- [SpinThatShit - CSSloader](https://github.com/MatejKustec/SpinThatShit)\n- [loaders.css](https://github.com/ConnorAtherton/loaders.css)\n- [css-loaders](https://github.com/lukehaas/css-loaders)\n- [SPINNERS - HTML and CSS \"loading icon\" animations](https://boguz.github.io/Spinners/)\n- [csspin - CSS Spinners and Loaders](https://github.com/webkul/csspin)\n- [csshake - Some CSS classes to move your DOM](https://github.com/elrumordelaluz/csshake)\n- [Rocket - Rocket create an animation from two items via jQuery](https://github.com/miniMAC/rocket)\n- [Animate Plus - CSS and SVG animation library](https://github.com/bendc/animateplus)\n- [textillate.js - CSS3 text animations](http://textillate.js.org/)\n- [mojs - 图形运动动画](https://github.com/legomushroom/mojs)\n- [缓动函数速查表](http://easings.net/zh-cn#)\n\n**Framework**\n- [Pure - A set of small, responsive CSS modules](https://github.com/yahoo/pure)\n- [materialize - Materialize, a CSS Framework based on Material Design](https://github.com/dogfalo/materialize/)\n- [Bulma - A modern CSS framework based on Flexbox](https://github.com/jgthms/bulma)\n- [bootflat-Flat UI KIT based on Bootstrap 3.3.0 CSS framework](http://bootflat.github.io/index.html)\n- [mui-Material Design CSS Framework](https://github.com/muicss/mui)\n- [Flexbox Patterns - Build awesome user interfaces with CSS flexbox](http://www.flexboxpatterns.com/home)\n- [Pintsize-Super flexbox](http://pintsize.io/examples)\n- [picnic](https://github.com/picnicss/picnic)\n- [CoreUI-Free-Bootstrap-Admin-Template](https://github.com/mrholek/CoreUI-Free-Bootstrap-Admin-Template)\n- [AdminLTE Control Panel Template](https://almsaeedstudio.com/)\n- [Refills - Components and patterns built with Bourbon and Neat](http://refills.bourbon.io/)\n\n\n**Flexbox**\n- [Flexbox Grid - flexbox布局框架](http://flexboxgrid.com/)\n- [Flexbox Patterns](http://www.flexboxpatterns.com/home)\n- [solved-by-flexbox](https://github.com/philipwalton/solved-by-flexbox)\n- [Flexibility - 各属性在线演示](https://jonathantneal.github.io/flexibility/)\n- [flexplorer - 布局](http://bennettfeely.com/flexplorer/)\n- [Properties for the flex container - 各种示例](http://codepen.io/enxaneta/full/adLPwv/)\n\n\n**Components**\n- [emoji-css](https://github.com/afeld/emoji-css)\n- [awesome-bootstrap-checkbox](https://github.com/flatlogic/awesome-bootstrap-checkbox)\n- [css-toggle-switch](https://github.com/ghinda/css-toggle-switch)\n- [simple-toggle-switch](http://www.cssflow.com/snippets/simple-toggle-switch/demo)\n\n**Utils**\n- [devices.css - CSS (Mostly) Flat Mobile Devices](https://github.com/marvelapp/devices.css)\n\n***\n\n## Font Icons\n- [Font Awesome](http://fontawesome.io/)\n- [ionicons](http://ionicons.com/)\n- [Material icons](https://material.io/icons/)\n- [Iconfont - 阿里巴巴矢量图标库](http://www.iconfont.cn/plus)\n\n\n***\n\n## javaScript\n- [Device.js - 设备判断 iOS, Android | Portrait vs. Landscape | Tablet vs. Mobile](https://github.com/matthewhudson/device.js)\n- [Clipboard.js - Copy to clipboard.No Flash](https://github.com/zenorocha/clipboard.js/)\n- [jquery.adaptive - backgrounds-提取图片颜色并作为背景色显示](https://github.com/briangonzalez/jquery.adaptive-backgrounds.js)\n- [Percircle-CSS percentage circle built with jQuery](https://github.com/toubou91/percircle)\n- [jQuery Timer: Start/Stop/Resume/Remove](https://github.com/walmik/timer.jquery)\n- [TimeCircles](https://github.com/wimbarelds/TimeCircles)\n- [Multi-select](http://loudev.com/)\n- [Fakecrop - Resize and crop bigger images and elements inside a container element](https://github.com/VuongN/jQuery-Fakecrop)\n- [jQThumb - 按比例显示缩略图](https://github.com/pakcheong/jqthumb)\n- [Intro.js - Introductions for websites and features with a step-by-step guide](https://github.com/usablica/intro.js)\n- [Basil.js - Unified localstorage, cookie and session storage JavaScript API](https://github.com/Wisembly/basil.js)\n- [LocalForage - localForage is a fast and simple storage library for JavaScript](https://github.com/localForage/localForage)\n- [WebStorageCache - 对localStorage 和sessionStorage 进行了扩展，添加了超时时间，序列化方法](https://github.com/WQTeam/web-storage-cache)\n- [GridList - Drag and drop library for two-dimensional, resizable and responsive lists](https://github.com/hootsuite/grid)\n- [Notie - a clean and simple notification, input, and selection suite for javascript](https://github.com/jaredreich/notie)\n- [Slick - 轮播支持PC和Mobile](https://github.com/kenwheeler/slick/)\n\n\n## Animate javaScript/CSS3\n- [granim.js - 渐变动画/颜色/图片](https://github.com/sarcadass/granim.js)\n- [anime.js](https://github.com/juliangarnier/anime)\n- [shape-shifter](https://github.com/kennethcachia/shape-shifter)\n- [led - canvas粒子文字插件](https://github.com/lixinliang/led)\n- [ScrollReveal - 滚动显示动画](https://scrollrevealjs.org/)\n- [bounce.js](https://github.com/tictail/bounce.js)\n\n***\n\n\n## 移动端\n- [lib.flexible - 移动端自适应方案](https://github.com/amfe/lib-flexible)\n- [FastClick - 解决移动端浏览器 300 毫秒点击延迟问题](https://github.com/ftlabs/fastclick)\n- [noclickdelay.js - 取消移动设备上click事件的300毫秒延迟](https://github.com/baijunjie/noclickdelay.js)\n- [AlloyTouch - 腾讯AlloyTeam移动Web触摸解决方案](https://github.com/AlloyTeam/AlloyTouch/blob/master/README_CN.md)\n- [AlloyFinger - 多点触摸手势库](https://github.com/AlloyTeam/AlloyFinger)\n\n\n\n***\n\n\n## 微信小程序\n- [Wafer - 企业级微信小程序全栈方案](https://github.com/tencentyun/wafer)\n- [小相册](https://github.com/CFETeam/weapp-demo-album)\n- [地图定位](https://github.com/giscafer/wechat-weapp-mapdemo)\n- [豆瓣电影](https://github.com/zce/weapp-demo)\n- [购物车](https://github.com/SeptemberMaples/wechat-weapp-demo)\n- [番茄时钟](https://github.com/kraaas/timer)\n- [手机QQ](https://github.com/xiehui999/SmallAppForQQ)\n- [知乎日报](https://github.com/LiuCaiHe/wechat-app-sample)\n- [Apple Music](https://github.com/Sioxas/AppleMusic)\n- [wechat-app-music](https://github.com/eyasliu/wechat-app-music)\n- [We重邮 - 微信小程序](https://github.com/lanshan-studio/wecqupt)\n- [wxapp-cli - 微信小程序脚手架](https://github.com/MeCKodo/wxapp-cli)\n\n***\n\n## Vue.js\n- [Vue.js 2.0中文文档](https://vuefe.cn/v2/guide/)\n- [Vuex - 状态管理模式](https://vuex.vuejs.org/zh-cn/intro.html)\n- [vue-router2 - 路由](https://router.vuejs.org/zh-cn/)\n- [vue-amap - 基于Vue2.0和高德地图的地图组件](https://github.com/ElemeFE/vue-amap)\n- [mint-ui - Mobile UI elements for Vue.js](https://github.com/ElemeFE/mint-ui)\n- [element - A Vue.js 2.0 UI Toolkit for Web](https://github.com/ElemeFE/element)\n- [jackblog - vue 版个人博客系统](https://github.com/jackhutu/jackblog-vue)\n- [vux - 基于WeUI和Vue(2.x)开发的移动端UI组件库，主要服务于微信页面](https://github.com/airyland/vux)\n- [VueStar - 点赞动画组件](https://github.com/OYsun/VueStar)\n- [NeteaseCloudWebApp - 网易云音乐](https://github.com/javaSwing/NeteaseCloudWebApp)\n- [vue-ssr - vue服务端渲染模板](https://github.com/ccforward/vue-ssr)\n- [vue2-elm](https://github.com/bailicangdu/vue2-elm)\n\n\n***\n\n\n## JSON Data\n- [微票bannerList](http://json.bmbstack.com/bannerList)\n- [微票playingList](http://json.bmbstack.com/playingList)\n- [微票cinemaList](http://json.bmbstack.com/cinemaList)\n- [知乎日报](https://github.com/izzyleung/ZhihuDailyPurify/wiki/%E7%9F%A5%E4%B9%8E%E6%97%A5%E6%8A%A5-API-%E5%88%86%E6%9E%90)\n- [AD's API](https://api.imjad.cn/)\n- [远程数据接口代理服务](https://bird.ioliu.cn/)\n\n\n***\n\n## 效率工具\n- [bourbon - A Lightweight Sass Tool Set](https://github.com/thoughtbot/bourbon)\n- [css3 cubic-bezier - 在线生成](http://cubic-bezier.com/)\n- [css3 tools - css3动画工具](https://isux.tencent.com/css3/tools.html)\n- [CSS3 Tool](http://westciv.com/tools/gradients/)\n- [spy-debugger - 微信调试，各种WebView样式调试、手机浏览器的页面真机调试](https://github.com/wuchangming/spy-debugger)\n\n\n## 前端构建脚手架\n- [webpack-seed - 基于webpack搭建纯静态页面型前端工程解决方案模板](https://github.com/chemdemo/webpack-seed)\n- [Webpack-Vue-MultiplePage - 在多页面项目下使用 Webpack + Vue](https://github.com/cnu4/Webpack-Vue-MultiplePage)\n- [jarvan4dev/vue-multi-page - 基于vue-cli脚手架修改而成的多页面(非SPA)项目脚手架](https://github.com/jarvan4dev/vue-multi-page)\n- [cooking-demo/multiple-pages-vue - Vue 2 + webpack 2 多页面例子](https://github.com/cooking-demo/multiple-pages-vue)\n- [cooking-demo/simple - vue2+webpack2单页面](https://github.com/cooking-demo/simple)\n- [fis3-base - 基于fis3的纯前端解决方案](https://github.com/yanhaijing/fis3-base)\n- [cooking - 基于 webapck 但更友好的配置项、易用的扩展配置机制](http://elemefe.github.io/cooking/)\n- [gulp-requirejs-boilerplate - 基于gulp+requirejs+less的多应用构建方案](https://github.com/xiongwilee/gulp-requirejs-boilerplate)\n","updated":"2017-04-06T02:44:50.127Z","path":"src/index.html","comments":1,"layout":"page","_id":"cj17hdruu000qhkajk23efkgy","content":"<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><ul>\n<li><a href=\"https://github.com/necolas/normalize.css\" target=\"_blank\" rel=\"external\">normalize.css</a></li>\n</ul>\n<p><strong>CSS grid</strong></p>\n<ul>\n<li><a href=\"https://github.com/thoughtbot/neat\" target=\"_blank\" rel=\"external\">neat - A lightweight semantic grid framework built with Sass</a></li>\n<li><a href=\"https://github.com/kumailht/gridforms/\" target=\"_blank\" rel=\"external\">Gridforms - 网格表单</a></li>\n<li><a href=\"http://daneden.github.io/Toast/\" target=\"_blank\" rel=\"external\">TOAST - Insane, no-nonsense CSS grid</a></li>\n</ul>\n<p><strong>Animate</strong></p>\n<ul>\n<li><a href=\"https://github.com/h5bp/Effeckt.css\" target=\"_blank\" rel=\"external\">Effeckt.css - 动画库:modal,button,list,tab…</a></li>\n<li><a href=\"http://tridiv.com/\" target=\"_blank\" rel=\"external\">Tridiv - Creating 3D shapes in CSS </a></li>\n<li><a href=\"https://github.com/daneden/animate.css\" target=\"_blank\" rel=\"external\">animate.css</a></li>\n<li><a href=\"http://www.minimamente.com/example/magic_animations/\" target=\"_blank\" rel=\"external\">magic animations</a></li>\n<li><a href=\"http://h5bp.github.io/Effeckt.css/\" target=\"_blank\" rel=\"external\">Effeckt</a></li>\n<li><a href=\"https://github.com/IanLunn/Hover\" target=\"_blank\" rel=\"external\">Hover</a></li>\n<li><a href=\"https://github.com/gudh/ihover\" target=\"_blank\" rel=\"external\">ihover</a></li>\n<li><a href=\"https://github.com/MatejKustec/SpinThatShit\" target=\"_blank\" rel=\"external\">SpinThatShit - CSSloader</a></li>\n<li><a href=\"https://github.com/ConnorAtherton/loaders.css\" target=\"_blank\" rel=\"external\">loaders.css</a></li>\n<li><a href=\"https://github.com/lukehaas/css-loaders\" target=\"_blank\" rel=\"external\">css-loaders</a></li>\n<li><a href=\"https://boguz.github.io/Spinners/\" target=\"_blank\" rel=\"external\">SPINNERS - HTML and CSS “loading icon” animations</a></li>\n<li><a href=\"https://github.com/webkul/csspin\" target=\"_blank\" rel=\"external\">csspin - CSS Spinners and Loaders</a></li>\n<li><a href=\"https://github.com/elrumordelaluz/csshake\" target=\"_blank\" rel=\"external\">csshake - Some CSS classes to move your DOM</a></li>\n<li><a href=\"https://github.com/miniMAC/rocket\" target=\"_blank\" rel=\"external\">Rocket - Rocket create an animation from two items via jQuery</a></li>\n<li><a href=\"https://github.com/bendc/animateplus\" target=\"_blank\" rel=\"external\">Animate Plus - CSS and SVG animation library</a></li>\n<li><a href=\"http://textillate.js.org/\" target=\"_blank\" rel=\"external\">textillate.js - CSS3 text animations</a></li>\n<li><a href=\"https://github.com/legomushroom/mojs\" target=\"_blank\" rel=\"external\">mojs - 图形运动动画</a></li>\n<li><a href=\"http://easings.net/zh-cn#\" target=\"_blank\" rel=\"external\">缓动函数速查表</a></li>\n</ul>\n<p><strong>Framework</strong></p>\n<ul>\n<li><a href=\"https://github.com/yahoo/pure\" target=\"_blank\" rel=\"external\">Pure - A set of small, responsive CSS modules</a></li>\n<li><a href=\"https://github.com/dogfalo/materialize/\" target=\"_blank\" rel=\"external\">materialize - Materialize, a CSS Framework based on Material Design</a></li>\n<li><a href=\"https://github.com/jgthms/bulma\" target=\"_blank\" rel=\"external\">Bulma - A modern CSS framework based on Flexbox</a></li>\n<li><a href=\"http://bootflat.github.io/index.html\" target=\"_blank\" rel=\"external\">bootflat-Flat UI KIT based on Bootstrap 3.3.0 CSS framework</a></li>\n<li><a href=\"https://github.com/muicss/mui\" target=\"_blank\" rel=\"external\">mui-Material Design CSS Framework</a></li>\n<li><a href=\"http://www.flexboxpatterns.com/home\" target=\"_blank\" rel=\"external\">Flexbox Patterns - Build awesome user interfaces with CSS flexbox</a></li>\n<li><a href=\"http://pintsize.io/examples\" target=\"_blank\" rel=\"external\">Pintsize-Super flexbox</a></li>\n<li><a href=\"https://github.com/picnicss/picnic\" target=\"_blank\" rel=\"external\">picnic</a></li>\n<li><a href=\"https://github.com/mrholek/CoreUI-Free-Bootstrap-Admin-Template\" target=\"_blank\" rel=\"external\">CoreUI-Free-Bootstrap-Admin-Template</a></li>\n<li><a href=\"https://almsaeedstudio.com/\" target=\"_blank\" rel=\"external\">AdminLTE Control Panel Template</a></li>\n<li><a href=\"http://refills.bourbon.io/\" target=\"_blank\" rel=\"external\">Refills - Components and patterns built with Bourbon and Neat</a></li>\n</ul>\n<p><strong>Flexbox</strong></p>\n<ul>\n<li><a href=\"http://flexboxgrid.com/\" target=\"_blank\" rel=\"external\">Flexbox Grid - flexbox布局框架</a></li>\n<li><a href=\"http://www.flexboxpatterns.com/home\" target=\"_blank\" rel=\"external\">Flexbox Patterns</a></li>\n<li><a href=\"https://github.com/philipwalton/solved-by-flexbox\" target=\"_blank\" rel=\"external\">solved-by-flexbox</a></li>\n<li><a href=\"https://jonathantneal.github.io/flexibility/\" target=\"_blank\" rel=\"external\">Flexibility - 各属性在线演示</a></li>\n<li><a href=\"http://bennettfeely.com/flexplorer/\" target=\"_blank\" rel=\"external\">flexplorer - 布局</a></li>\n<li><a href=\"http://codepen.io/enxaneta/full/adLPwv/\" target=\"_blank\" rel=\"external\">Properties for the flex container - 各种示例</a></li>\n</ul>\n<p><strong>Components</strong></p>\n<ul>\n<li><a href=\"https://github.com/afeld/emoji-css\" target=\"_blank\" rel=\"external\">emoji-css</a></li>\n<li><a href=\"https://github.com/flatlogic/awesome-bootstrap-checkbox\" target=\"_blank\" rel=\"external\">awesome-bootstrap-checkbox</a></li>\n<li><a href=\"https://github.com/ghinda/css-toggle-switch\" target=\"_blank\" rel=\"external\">css-toggle-switch</a></li>\n<li><a href=\"http://www.cssflow.com/snippets/simple-toggle-switch/demo\" target=\"_blank\" rel=\"external\">simple-toggle-switch</a></li>\n</ul>\n<p><strong>Utils</strong></p>\n<ul>\n<li><a href=\"https://github.com/marvelapp/devices.css\" target=\"_blank\" rel=\"external\">devices.css - CSS (Mostly) Flat Mobile Devices</a></li>\n</ul>\n<hr>\n<h2 id=\"Font-Icons\"><a href=\"#Font-Icons\" class=\"headerlink\" title=\"Font Icons\"></a>Font Icons</h2><ul>\n<li><a href=\"http://fontawesome.io/\" target=\"_blank\" rel=\"external\">Font Awesome</a></li>\n<li><a href=\"http://ionicons.com/\" target=\"_blank\" rel=\"external\">ionicons</a></li>\n<li><a href=\"https://material.io/icons/\" target=\"_blank\" rel=\"external\">Material icons</a></li>\n<li><a href=\"http://www.iconfont.cn/plus\" target=\"_blank\" rel=\"external\">Iconfont - 阿里巴巴矢量图标库</a></li>\n</ul>\n<hr>\n<h2 id=\"javaScript\"><a href=\"#javaScript\" class=\"headerlink\" title=\"javaScript\"></a>javaScript</h2><ul>\n<li><a href=\"https://github.com/matthewhudson/device.js\" target=\"_blank\" rel=\"external\">Device.js - 设备判断 iOS, Android | Portrait vs. Landscape | Tablet vs. Mobile</a></li>\n<li><a href=\"https://github.com/zenorocha/clipboard.js/\" target=\"_blank\" rel=\"external\">Clipboard.js - Copy to clipboard.No Flash</a></li>\n<li><a href=\"https://github.com/briangonzalez/jquery.adaptive-backgrounds.js\" target=\"_blank\" rel=\"external\">jquery.adaptive - backgrounds-提取图片颜色并作为背景色显示</a></li>\n<li><a href=\"https://github.com/toubou91/percircle\" target=\"_blank\" rel=\"external\">Percircle-CSS percentage circle built with jQuery</a></li>\n<li><a href=\"https://github.com/walmik/timer.jquery\" target=\"_blank\" rel=\"external\">jQuery Timer: Start/Stop/Resume/Remove</a></li>\n<li><a href=\"https://github.com/wimbarelds/TimeCircles\" target=\"_blank\" rel=\"external\">TimeCircles</a></li>\n<li><a href=\"http://loudev.com/\" target=\"_blank\" rel=\"external\">Multi-select</a></li>\n<li><a href=\"https://github.com/VuongN/jQuery-Fakecrop\" target=\"_blank\" rel=\"external\">Fakecrop - Resize and crop bigger images and elements inside a container element</a></li>\n<li><a href=\"https://github.com/pakcheong/jqthumb\" target=\"_blank\" rel=\"external\">jQThumb - 按比例显示缩略图</a></li>\n<li><a href=\"https://github.com/usablica/intro.js\" target=\"_blank\" rel=\"external\">Intro.js - Introductions for websites and features with a step-by-step guide</a></li>\n<li><a href=\"https://github.com/Wisembly/basil.js\" target=\"_blank\" rel=\"external\">Basil.js - Unified localstorage, cookie and session storage JavaScript API</a></li>\n<li><a href=\"https://github.com/localForage/localForage\" target=\"_blank\" rel=\"external\">LocalForage - localForage is a fast and simple storage library for JavaScript</a></li>\n<li><a href=\"https://github.com/WQTeam/web-storage-cache\" target=\"_blank\" rel=\"external\">WebStorageCache - 对localStorage 和sessionStorage 进行了扩展，添加了超时时间，序列化方法</a></li>\n<li><a href=\"https://github.com/hootsuite/grid\" target=\"_blank\" rel=\"external\">GridList - Drag and drop library for two-dimensional, resizable and responsive lists</a></li>\n<li><a href=\"https://github.com/jaredreich/notie\" target=\"_blank\" rel=\"external\">Notie - a clean and simple notification, input, and selection suite for javascript</a></li>\n<li><a href=\"https://github.com/kenwheeler/slick/\" target=\"_blank\" rel=\"external\">Slick - 轮播支持PC和Mobile</a></li>\n</ul>\n<h2 id=\"Animate-javaScript-CSS3\"><a href=\"#Animate-javaScript-CSS3\" class=\"headerlink\" title=\"Animate javaScript/CSS3\"></a>Animate javaScript/CSS3</h2><ul>\n<li><a href=\"https://github.com/sarcadass/granim.js\" target=\"_blank\" rel=\"external\">granim.js - 渐变动画/颜色/图片</a></li>\n<li><a href=\"https://github.com/juliangarnier/anime\" target=\"_blank\" rel=\"external\">anime.js</a></li>\n<li><a href=\"https://github.com/kennethcachia/shape-shifter\" target=\"_blank\" rel=\"external\">shape-shifter</a></li>\n<li><a href=\"https://github.com/lixinliang/led\" target=\"_blank\" rel=\"external\">led - canvas粒子文字插件</a></li>\n<li><a href=\"https://scrollrevealjs.org/\" target=\"_blank\" rel=\"external\">ScrollReveal - 滚动显示动画</a></li>\n<li><a href=\"https://github.com/tictail/bounce.js\" target=\"_blank\" rel=\"external\">bounce.js</a></li>\n</ul>\n<hr>\n<h2 id=\"移动端\"><a href=\"#移动端\" class=\"headerlink\" title=\"移动端\"></a>移动端</h2><ul>\n<li><a href=\"https://github.com/amfe/lib-flexible\" target=\"_blank\" rel=\"external\">lib.flexible - 移动端自适应方案</a></li>\n<li><a href=\"https://github.com/ftlabs/fastclick\" target=\"_blank\" rel=\"external\">FastClick - 解决移动端浏览器 300 毫秒点击延迟问题</a></li>\n<li><a href=\"https://github.com/baijunjie/noclickdelay.js\" target=\"_blank\" rel=\"external\">noclickdelay.js - 取消移动设备上click事件的300毫秒延迟</a></li>\n<li><a href=\"https://github.com/AlloyTeam/AlloyTouch/blob/master/README_CN.md\" target=\"_blank\" rel=\"external\">AlloyTouch - 腾讯AlloyTeam移动Web触摸解决方案</a></li>\n<li><a href=\"https://github.com/AlloyTeam/AlloyFinger\" target=\"_blank\" rel=\"external\">AlloyFinger - 多点触摸手势库</a></li>\n</ul>\n<hr>\n<h2 id=\"微信小程序\"><a href=\"#微信小程序\" class=\"headerlink\" title=\"微信小程序\"></a>微信小程序</h2><ul>\n<li><a href=\"https://github.com/tencentyun/wafer\" target=\"_blank\" rel=\"external\">Wafer - 企业级微信小程序全栈方案</a></li>\n<li><a href=\"https://github.com/CFETeam/weapp-demo-album\" target=\"_blank\" rel=\"external\">小相册</a></li>\n<li><a href=\"https://github.com/giscafer/wechat-weapp-mapdemo\" target=\"_blank\" rel=\"external\">地图定位</a></li>\n<li><a href=\"https://github.com/zce/weapp-demo\" target=\"_blank\" rel=\"external\">豆瓣电影</a></li>\n<li><a href=\"https://github.com/SeptemberMaples/wechat-weapp-demo\" target=\"_blank\" rel=\"external\">购物车</a></li>\n<li><a href=\"https://github.com/kraaas/timer\" target=\"_blank\" rel=\"external\">番茄时钟</a></li>\n<li><a href=\"https://github.com/xiehui999/SmallAppForQQ\" target=\"_blank\" rel=\"external\">手机QQ</a></li>\n<li><a href=\"https://github.com/LiuCaiHe/wechat-app-sample\" target=\"_blank\" rel=\"external\">知乎日报</a></li>\n<li><a href=\"https://github.com/Sioxas/AppleMusic\" target=\"_blank\" rel=\"external\">Apple Music</a></li>\n<li><a href=\"https://github.com/eyasliu/wechat-app-music\" target=\"_blank\" rel=\"external\">wechat-app-music</a></li>\n<li><a href=\"https://github.com/lanshan-studio/wecqupt\" target=\"_blank\" rel=\"external\">We重邮 - 微信小程序</a></li>\n<li><a href=\"https://github.com/MeCKodo/wxapp-cli\" target=\"_blank\" rel=\"external\">wxapp-cli - 微信小程序脚手架</a></li>\n</ul>\n<hr>\n<h2 id=\"Vue-js\"><a href=\"#Vue-js\" class=\"headerlink\" title=\"Vue.js\"></a>Vue.js</h2><ul>\n<li><a href=\"https://vuefe.cn/v2/guide/\" target=\"_blank\" rel=\"external\">Vue.js 2.0中文文档</a></li>\n<li><a href=\"https://vuex.vuejs.org/zh-cn/intro.html\" target=\"_blank\" rel=\"external\">Vuex - 状态管理模式</a></li>\n<li><a href=\"https://router.vuejs.org/zh-cn/\" target=\"_blank\" rel=\"external\">vue-router2 - 路由</a></li>\n<li><a href=\"https://github.com/ElemeFE/vue-amap\" target=\"_blank\" rel=\"external\">vue-amap - 基于Vue2.0和高德地图的地图组件</a></li>\n<li><a href=\"https://github.com/ElemeFE/mint-ui\" target=\"_blank\" rel=\"external\">mint-ui - Mobile UI elements for Vue.js</a></li>\n<li><a href=\"https://github.com/ElemeFE/element\" target=\"_blank\" rel=\"external\">element - A Vue.js 2.0 UI Toolkit for Web</a></li>\n<li><a href=\"https://github.com/jackhutu/jackblog-vue\" target=\"_blank\" rel=\"external\">jackblog - vue 版个人博客系统</a></li>\n<li><a href=\"https://github.com/airyland/vux\" target=\"_blank\" rel=\"external\">vux - 基于WeUI和Vue(2.x)开发的移动端UI组件库，主要服务于微信页面</a></li>\n<li><a href=\"https://github.com/OYsun/VueStar\" target=\"_blank\" rel=\"external\">VueStar - 点赞动画组件</a></li>\n<li><a href=\"https://github.com/javaSwing/NeteaseCloudWebApp\" target=\"_blank\" rel=\"external\">NeteaseCloudWebApp - 网易云音乐</a></li>\n<li><a href=\"https://github.com/ccforward/vue-ssr\" target=\"_blank\" rel=\"external\">vue-ssr - vue服务端渲染模板</a></li>\n<li><a href=\"https://github.com/bailicangdu/vue2-elm\" target=\"_blank\" rel=\"external\">vue2-elm</a></li>\n</ul>\n<hr>\n<h2 id=\"JSON-Data\"><a href=\"#JSON-Data\" class=\"headerlink\" title=\"JSON Data\"></a>JSON Data</h2><ul>\n<li><a href=\"http://json.bmbstack.com/bannerList\" target=\"_blank\" rel=\"external\">微票bannerList</a></li>\n<li><a href=\"http://json.bmbstack.com/playingList\" target=\"_blank\" rel=\"external\">微票playingList</a></li>\n<li><a href=\"http://json.bmbstack.com/cinemaList\" target=\"_blank\" rel=\"external\">微票cinemaList</a></li>\n<li><a href=\"https://github.com/izzyleung/ZhihuDailyPurify/wiki/%E7%9F%A5%E4%B9%8E%E6%97%A5%E6%8A%A5-API-%E5%88%86%E6%9E%90\" target=\"_blank\" rel=\"external\">知乎日报</a></li>\n<li><a href=\"https://api.imjad.cn/\" target=\"_blank\" rel=\"external\">AD’s API</a></li>\n<li><a href=\"https://bird.ioliu.cn/\" target=\"_blank\" rel=\"external\">远程数据接口代理服务</a></li>\n</ul>\n<hr>\n<h2 id=\"效率工具\"><a href=\"#效率工具\" class=\"headerlink\" title=\"效率工具\"></a>效率工具</h2><ul>\n<li><a href=\"https://github.com/thoughtbot/bourbon\" target=\"_blank\" rel=\"external\">bourbon - A Lightweight Sass Tool Set</a></li>\n<li><a href=\"http://cubic-bezier.com/\" target=\"_blank\" rel=\"external\">css3 cubic-bezier - 在线生成</a></li>\n<li><a href=\"https://isux.tencent.com/css3/tools.html\" target=\"_blank\" rel=\"external\">css3 tools - css3动画工具</a></li>\n<li><a href=\"http://westciv.com/tools/gradients/\" target=\"_blank\" rel=\"external\">CSS3 Tool</a></li>\n<li><a href=\"https://github.com/wuchangming/spy-debugger\" target=\"_blank\" rel=\"external\">spy-debugger - 微信调试，各种WebView样式调试、手机浏览器的页面真机调试</a></li>\n</ul>\n<h2 id=\"前端构建脚手架\"><a href=\"#前端构建脚手架\" class=\"headerlink\" title=\"前端构建脚手架\"></a>前端构建脚手架</h2><ul>\n<li><a href=\"https://github.com/chemdemo/webpack-seed\" target=\"_blank\" rel=\"external\">webpack-seed - 基于webpack搭建纯静态页面型前端工程解决方案模板</a></li>\n<li><a href=\"https://github.com/cnu4/Webpack-Vue-MultiplePage\" target=\"_blank\" rel=\"external\">Webpack-Vue-MultiplePage - 在多页面项目下使用 Webpack + Vue</a></li>\n<li><a href=\"https://github.com/jarvan4dev/vue-multi-page\" target=\"_blank\" rel=\"external\">jarvan4dev/vue-multi-page - 基于vue-cli脚手架修改而成的多页面(非SPA)项目脚手架</a></li>\n<li><a href=\"https://github.com/cooking-demo/multiple-pages-vue\" target=\"_blank\" rel=\"external\">cooking-demo/multiple-pages-vue - Vue 2 + webpack 2 多页面例子</a></li>\n<li><a href=\"https://github.com/cooking-demo/simple\" target=\"_blank\" rel=\"external\">cooking-demo/simple - vue2+webpack2单页面</a></li>\n<li><a href=\"https://github.com/yanhaijing/fis3-base\" target=\"_blank\" rel=\"external\">fis3-base - 基于fis3的纯前端解决方案</a></li>\n<li><a href=\"http://elemefe.github.io/cooking/\" target=\"_blank\" rel=\"external\">cooking - 基于 webapck 但更友好的配置项、易用的扩展配置机制</a></li>\n<li><a href=\"https://github.com/xiongwilee/gulp-requirejs-boilerplate\" target=\"_blank\" rel=\"external\">gulp-requirejs-boilerplate - 基于gulp+requirejs+less的多应用构建方案</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><ul>\n<li><a href=\"https://github.com/necolas/normalize.css\">normalize.css</a></li>\n</ul>\n<p><strong>CSS grid</strong></p>\n<ul>\n<li><a href=\"https://github.com/thoughtbot/neat\">neat - A lightweight semantic grid framework built with Sass</a></li>\n<li><a href=\"https://github.com/kumailht/gridforms/\">Gridforms - 网格表单</a></li>\n<li><a href=\"http://daneden.github.io/Toast/\">TOAST - Insane, no-nonsense CSS grid</a></li>\n</ul>\n<p><strong>Animate</strong></p>\n<ul>\n<li><a href=\"https://github.com/h5bp/Effeckt.css\">Effeckt.css - 动画库:modal,button,list,tab…</a></li>\n<li><a href=\"http://tridiv.com/\">Tridiv - Creating 3D shapes in CSS </a></li>\n<li><a href=\"https://github.com/daneden/animate.css\">animate.css</a></li>\n<li><a href=\"http://www.minimamente.com/example/magic_animations/\">magic animations</a></li>\n<li><a href=\"http://h5bp.github.io/Effeckt.css/\">Effeckt</a></li>\n<li><a href=\"https://github.com/IanLunn/Hover\">Hover</a></li>\n<li><a href=\"https://github.com/gudh/ihover\">ihover</a></li>\n<li><a href=\"https://github.com/MatejKustec/SpinThatShit\">SpinThatShit - CSSloader</a></li>\n<li><a href=\"https://github.com/ConnorAtherton/loaders.css\">loaders.css</a></li>\n<li><a href=\"https://github.com/lukehaas/css-loaders\">css-loaders</a></li>\n<li><a href=\"https://boguz.github.io/Spinners/\">SPINNERS - HTML and CSS “loading icon” animations</a></li>\n<li><a href=\"https://github.com/webkul/csspin\">csspin - CSS Spinners and Loaders</a></li>\n<li><a href=\"https://github.com/elrumordelaluz/csshake\">csshake - Some CSS classes to move your DOM</a></li>\n<li><a href=\"https://github.com/miniMAC/rocket\">Rocket - Rocket create an animation from two items via jQuery</a></li>\n<li><a href=\"https://github.com/bendc/animateplus\">Animate Plus - CSS and SVG animation library</a></li>\n<li><a href=\"http://textillate.js.org/\">textillate.js - CSS3 text animations</a></li>\n<li><a href=\"https://github.com/legomushroom/mojs\">mojs - 图形运动动画</a></li>\n<li><a href=\"http://easings.net/zh-cn#\">缓动函数速查表</a></li>\n</ul>\n<p><strong>Framework</strong></p>\n<ul>\n<li><a href=\"https://github.com/yahoo/pure\">Pure - A set of small, responsive CSS modules</a></li>\n<li><a href=\"https://github.com/dogfalo/materialize/\">materialize - Materialize, a CSS Framework based on Material Design</a></li>\n<li><a href=\"https://github.com/jgthms/bulma\">Bulma - A modern CSS framework based on Flexbox</a></li>\n<li><a href=\"http://bootflat.github.io/index.html\">bootflat-Flat UI KIT based on Bootstrap 3.3.0 CSS framework</a></li>\n<li><a href=\"https://github.com/muicss/mui\">mui-Material Design CSS Framework</a></li>\n<li><a href=\"http://www.flexboxpatterns.com/home\">Flexbox Patterns - Build awesome user interfaces with CSS flexbox</a></li>\n<li><a href=\"http://pintsize.io/examples\">Pintsize-Super flexbox</a></li>\n<li><a href=\"https://github.com/picnicss/picnic\">picnic</a></li>\n<li><a href=\"https://github.com/mrholek/CoreUI-Free-Bootstrap-Admin-Template\">CoreUI-Free-Bootstrap-Admin-Template</a></li>\n<li><a href=\"https://almsaeedstudio.com/\">AdminLTE Control Panel Template</a></li>\n<li><a href=\"http://refills.bourbon.io/\">Refills - Components and patterns built with Bourbon and Neat</a></li>\n</ul>\n<p><strong>Flexbox</strong></p>\n<ul>\n<li><a href=\"http://flexboxgrid.com/\">Flexbox Grid - flexbox布局框架</a></li>\n<li><a href=\"http://www.flexboxpatterns.com/home\">Flexbox Patterns</a></li>\n<li><a href=\"https://github.com/philipwalton/solved-by-flexbox\">solved-by-flexbox</a></li>\n<li><a href=\"https://jonathantneal.github.io/flexibility/\">Flexibility - 各属性在线演示</a></li>\n<li><a href=\"http://bennettfeely.com/flexplorer/\">flexplorer - 布局</a></li>\n<li><a href=\"http://codepen.io/enxaneta/full/adLPwv/\">Properties for the flex container - 各种示例</a></li>\n</ul>\n<p><strong>Components</strong></p>\n<ul>\n<li><a href=\"https://github.com/afeld/emoji-css\">emoji-css</a></li>\n<li><a href=\"https://github.com/flatlogic/awesome-bootstrap-checkbox\">awesome-bootstrap-checkbox</a></li>\n<li><a href=\"https://github.com/ghinda/css-toggle-switch\">css-toggle-switch</a></li>\n<li><a href=\"http://www.cssflow.com/snippets/simple-toggle-switch/demo\">simple-toggle-switch</a></li>\n</ul>\n<p><strong>Utils</strong></p>\n<ul>\n<li><a href=\"https://github.com/marvelapp/devices.css\">devices.css - CSS (Mostly) Flat Mobile Devices</a></li>\n</ul>\n<hr>\n<h2 id=\"Font-Icons\"><a href=\"#Font-Icons\" class=\"headerlink\" title=\"Font Icons\"></a>Font Icons</h2><ul>\n<li><a href=\"http://fontawesome.io/\">Font Awesome</a></li>\n<li><a href=\"http://ionicons.com/\">ionicons</a></li>\n<li><a href=\"https://material.io/icons/\">Material icons</a></li>\n<li><a href=\"http://www.iconfont.cn/plus\">Iconfont - 阿里巴巴矢量图标库</a></li>\n</ul>\n<hr>\n<h2 id=\"javaScript\"><a href=\"#javaScript\" class=\"headerlink\" title=\"javaScript\"></a>javaScript</h2><ul>\n<li><a href=\"https://github.com/matthewhudson/device.js\">Device.js - 设备判断 iOS, Android | Portrait vs. Landscape | Tablet vs. Mobile</a></li>\n<li><a href=\"https://github.com/zenorocha/clipboard.js/\">Clipboard.js - Copy to clipboard.No Flash</a></li>\n<li><a href=\"https://github.com/briangonzalez/jquery.adaptive-backgrounds.js\">jquery.adaptive - backgrounds-提取图片颜色并作为背景色显示</a></li>\n<li><a href=\"https://github.com/toubou91/percircle\">Percircle-CSS percentage circle built with jQuery</a></li>\n<li><a href=\"https://github.com/walmik/timer.jquery\">jQuery Timer: Start/Stop/Resume/Remove</a></li>\n<li><a href=\"https://github.com/wimbarelds/TimeCircles\">TimeCircles</a></li>\n<li><a href=\"http://loudev.com/\">Multi-select</a></li>\n<li><a href=\"https://github.com/VuongN/jQuery-Fakecrop\">Fakecrop - Resize and crop bigger images and elements inside a container element</a></li>\n<li><a href=\"https://github.com/pakcheong/jqthumb\">jQThumb - 按比例显示缩略图</a></li>\n<li><a href=\"https://github.com/usablica/intro.js\">Intro.js - Introductions for websites and features with a step-by-step guide</a></li>\n<li><a href=\"https://github.com/Wisembly/basil.js\">Basil.js - Unified localstorage, cookie and session storage JavaScript API</a></li>\n<li><a href=\"https://github.com/localForage/localForage\">LocalForage - localForage is a fast and simple storage library for JavaScript</a></li>\n<li><a href=\"https://github.com/WQTeam/web-storage-cache\">WebStorageCache - 对localStorage 和sessionStorage 进行了扩展，添加了超时时间，序列化方法</a></li>\n<li><a href=\"https://github.com/hootsuite/grid\">GridList - Drag and drop library for two-dimensional, resizable and responsive lists</a></li>\n<li><a href=\"https://github.com/jaredreich/notie\">Notie - a clean and simple notification, input, and selection suite for javascript</a></li>\n<li><a href=\"https://github.com/kenwheeler/slick/\">Slick - 轮播支持PC和Mobile</a></li>\n</ul>\n<h2 id=\"Animate-javaScript-CSS3\"><a href=\"#Animate-javaScript-CSS3\" class=\"headerlink\" title=\"Animate javaScript/CSS3\"></a>Animate javaScript/CSS3</h2><ul>\n<li><a href=\"https://github.com/sarcadass/granim.js\">granim.js - 渐变动画/颜色/图片</a></li>\n<li><a href=\"https://github.com/juliangarnier/anime\">anime.js</a></li>\n<li><a href=\"https://github.com/kennethcachia/shape-shifter\">shape-shifter</a></li>\n<li><a href=\"https://github.com/lixinliang/led\">led - canvas粒子文字插件</a></li>\n<li><a href=\"https://scrollrevealjs.org/\">ScrollReveal - 滚动显示动画</a></li>\n<li><a href=\"https://github.com/tictail/bounce.js\">bounce.js</a></li>\n</ul>\n<hr>\n<h2 id=\"移动端\"><a href=\"#移动端\" class=\"headerlink\" title=\"移动端\"></a>移动端</h2><ul>\n<li><a href=\"https://github.com/amfe/lib-flexible\">lib.flexible - 移动端自适应方案</a></li>\n<li><a href=\"https://github.com/ftlabs/fastclick\">FastClick - 解决移动端浏览器 300 毫秒点击延迟问题</a></li>\n<li><a href=\"https://github.com/baijunjie/noclickdelay.js\">noclickdelay.js - 取消移动设备上click事件的300毫秒延迟</a></li>\n<li><a href=\"https://github.com/AlloyTeam/AlloyTouch/blob/master/README_CN.md\">AlloyTouch - 腾讯AlloyTeam移动Web触摸解决方案</a></li>\n<li><a href=\"https://github.com/AlloyTeam/AlloyFinger\">AlloyFinger - 多点触摸手势库</a></li>\n</ul>\n<hr>\n<h2 id=\"微信小程序\"><a href=\"#微信小程序\" class=\"headerlink\" title=\"微信小程序\"></a>微信小程序</h2><ul>\n<li><a href=\"https://github.com/tencentyun/wafer\">Wafer - 企业级微信小程序全栈方案</a></li>\n<li><a href=\"https://github.com/CFETeam/weapp-demo-album\">小相册</a></li>\n<li><a href=\"https://github.com/giscafer/wechat-weapp-mapdemo\">地图定位</a></li>\n<li><a href=\"https://github.com/zce/weapp-demo\">豆瓣电影</a></li>\n<li><a href=\"https://github.com/SeptemberMaples/wechat-weapp-demo\">购物车</a></li>\n<li><a href=\"https://github.com/kraaas/timer\">番茄时钟</a></li>\n<li><a href=\"https://github.com/xiehui999/SmallAppForQQ\">手机QQ</a></li>\n<li><a href=\"https://github.com/LiuCaiHe/wechat-app-sample\">知乎日报</a></li>\n<li><a href=\"https://github.com/Sioxas/AppleMusic\">Apple Music</a></li>\n<li><a href=\"https://github.com/eyasliu/wechat-app-music\">wechat-app-music</a></li>\n<li><a href=\"https://github.com/lanshan-studio/wecqupt\">We重邮 - 微信小程序</a></li>\n<li><a href=\"https://github.com/MeCKodo/wxapp-cli\">wxapp-cli - 微信小程序脚手架</a></li>\n</ul>\n<hr>\n<h2 id=\"Vue-js\"><a href=\"#Vue-js\" class=\"headerlink\" title=\"Vue.js\"></a>Vue.js</h2><ul>\n<li><a href=\"https://vuefe.cn/v2/guide/\">Vue.js 2.0中文文档</a></li>\n<li><a href=\"https://vuex.vuejs.org/zh-cn/intro.html\">Vuex - 状态管理模式</a></li>\n<li><a href=\"https://router.vuejs.org/zh-cn/\">vue-router2 - 路由</a></li>\n<li><a href=\"https://github.com/ElemeFE/vue-amap\">vue-amap - 基于Vue2.0和高德地图的地图组件</a></li>\n<li><a href=\"https://github.com/ElemeFE/mint-ui\">mint-ui - Mobile UI elements for Vue.js</a></li>\n<li><a href=\"https://github.com/ElemeFE/element\">element - A Vue.js 2.0 UI Toolkit for Web</a></li>\n<li><a href=\"https://github.com/jackhutu/jackblog-vue\">jackblog - vue 版个人博客系统</a></li>\n<li><a href=\"https://github.com/airyland/vux\">vux - 基于WeUI和Vue(2.x)开发的移动端UI组件库，主要服务于微信页面</a></li>\n<li><a href=\"https://github.com/OYsun/VueStar\">VueStar - 点赞动画组件</a></li>\n<li><a href=\"https://github.com/javaSwing/NeteaseCloudWebApp\">NeteaseCloudWebApp - 网易云音乐</a></li>\n<li><a href=\"https://github.com/ccforward/vue-ssr\">vue-ssr - vue服务端渲染模板</a></li>\n<li><a href=\"https://github.com/bailicangdu/vue2-elm\">vue2-elm</a></li>\n</ul>\n<hr>\n<h2 id=\"JSON-Data\"><a href=\"#JSON-Data\" class=\"headerlink\" title=\"JSON Data\"></a>JSON Data</h2><ul>\n<li><a href=\"http://json.bmbstack.com/bannerList\">微票bannerList</a></li>\n<li><a href=\"http://json.bmbstack.com/playingList\">微票playingList</a></li>\n<li><a href=\"http://json.bmbstack.com/cinemaList\">微票cinemaList</a></li>\n<li><a href=\"https://github.com/izzyleung/ZhihuDailyPurify/wiki/%E7%9F%A5%E4%B9%8E%E6%97%A5%E6%8A%A5-API-%E5%88%86%E6%9E%90\">知乎日报</a></li>\n<li><a href=\"https://api.imjad.cn/\">AD’s API</a></li>\n<li><a href=\"https://bird.ioliu.cn/\">远程数据接口代理服务</a></li>\n</ul>\n<hr>\n<h2 id=\"效率工具\"><a href=\"#效率工具\" class=\"headerlink\" title=\"效率工具\"></a>效率工具</h2><ul>\n<li><a href=\"https://github.com/thoughtbot/bourbon\">bourbon - A Lightweight Sass Tool Set</a></li>\n<li><a href=\"http://cubic-bezier.com/\">css3 cubic-bezier - 在线生成</a></li>\n<li><a href=\"https://isux.tencent.com/css3/tools.html\">css3 tools - css3动画工具</a></li>\n<li><a href=\"http://westciv.com/tools/gradients/\">CSS3 Tool</a></li>\n<li><a href=\"https://github.com/wuchangming/spy-debugger\">spy-debugger - 微信调试，各种WebView样式调试、手机浏览器的页面真机调试</a></li>\n</ul>\n<h2 id=\"前端构建脚手架\"><a href=\"#前端构建脚手架\" class=\"headerlink\" title=\"前端构建脚手架\"></a>前端构建脚手架</h2><ul>\n<li><a href=\"https://github.com/chemdemo/webpack-seed\">webpack-seed - 基于webpack搭建纯静态页面型前端工程解决方案模板</a></li>\n<li><a href=\"https://github.com/cnu4/Webpack-Vue-MultiplePage\">Webpack-Vue-MultiplePage - 在多页面项目下使用 Webpack + Vue</a></li>\n<li><a href=\"https://github.com/jarvan4dev/vue-multi-page\">jarvan4dev/vue-multi-page - 基于vue-cli脚手架修改而成的多页面(非SPA)项目脚手架</a></li>\n<li><a href=\"https://github.com/cooking-demo/multiple-pages-vue\">cooking-demo/multiple-pages-vue - Vue 2 + webpack 2 多页面例子</a></li>\n<li><a href=\"https://github.com/cooking-demo/simple\">cooking-demo/simple - vue2+webpack2单页面</a></li>\n<li><a href=\"https://github.com/yanhaijing/fis3-base\">fis3-base - 基于fis3的纯前端解决方案</a></li>\n<li><a href=\"http://elemefe.github.io/cooking/\">cooking - 基于 webapck 但更友好的配置项、易用的扩展配置机制</a></li>\n<li><a href=\"https://github.com/xiongwilee/gulp-requirejs-boilerplate\">gulp-requirejs-boilerplate - 基于gulp+requirejs+less的多应用构建方案</a></li>\n</ul>\n"}],"Post":[{"title":"[转载]悟透JavaScript","date":"2017-04-07T06:15:30.000Z","_content":"\n> 转载：[悟透JavaScript](http://www.cnblogs.com/leadzen/archive/2008/02/25/1073404.html)\n\n## 引子\n\n编程世界里只存在两种基本元素，一个是数据，一个是代码。编程世界就是在数据和代码千丝万缕的纠缠中呈现出无限的生机和活力。\n\n数据天生就是文静的，总想保持自己固有的本色；而代码却天生活泼，总想改变这个世界。\n\n你看，数据代码间的关系与物质能量间的关系有着惊人的相似。数据也是有惯性的，如果没有代码来施加外力，她总保持自己原来的状态。而代码就象能量，他存在的唯一目的，就是要努力改变数据原来的状态。在代码改变数据的同时，也会因为数据的抗拒而反过来影响或改变代码原有的趋势。甚至在某些情况下，数据可以转变为代码，而代码却又有可能被转变为数据，或许还存在一个类似E=MC2形式的数码转换方程呢。然而，就是在数据和代码间这种即矛盾又统一的运转中，总能体现出计算机世界的规律，这些规律正是我们编写的程序逻辑。\n\n不过，由于不同程序员有着不同的世界观，这些数据和代码看起来也就不尽相同。于是，不同世界观的程序员们运用各自的方法论，推动着编程世界的进化和发展。\n\n众所周知，当今最流行的编程思想莫过于面向对象编程的思想。为什么面向对象的思想能迅速风靡编程世界呢？因为面向对象的思想首次把数据和代码结合成统一体，并以一个简单的对象概念呈现给编程者。这一下子就将原来那些杂乱的算法与子程序，以及纠缠不清的复杂数据结构，划分成清晰而有序的对象结构，从而理清了数据与代码在我们心中那团乱麻般的结。我们又可以有一个更清晰的思维，在另一个思想高度上去探索更加浩瀚的编程世界了。\n\n在五祖弘忍讲授完《对象真经》之后的一天，他对众弟子们说：“经已讲完，想必尔等应该有所感悟，请各自写个偈子来看”。大弟子神秀是被大家公认为悟性最高的师兄，他的偈子写道：“身是对象树，心如类般明。朝朝勤拂拭，莫让惹尘埃！”。此偈一出，立即引起师兄弟们的轰动，大家都说写得太好了。只有火头僧慧能看后，轻轻地叹了口气，又随手在墙上写道：“对象本无根，类型亦无形。本来无一物，何处惹尘埃？”。然后摇了摇头，扬长而去。大家看了慧能的偈子都说：“写的什么乱七八糟的啊，看不懂”。师父弘忍看了神秀的诗偈也点头称赞，再看慧能的诗偈之后默然摇头。就在当天夜里，弘忍却悄悄把慧能叫到自己的禅房，将珍藏多年的软件真经传授于他，然后让他趁着月色连夜逃走...\n\n后来，慧能果然不负师父厚望，在南方开创了禅宗另一个广阔的天空。而慧能当年带走的软件真经中就有一本是《JavaScript真经》！\n\n\n## 回归简单\n\n要理解JavaScript，你得首先放下对象和类的概念，回到数据和代码的本原。前面说过，编程世界只有数据和代码两种基本元素，而这两种元素又有着纠缠不清的关系。JavaScript就是把数据和代码都简化到最原始的程度。\n\nJavaScript中的数据很简洁的。简单数据只有 undefined, null, boolean, number和string这五种，而复杂数据只有一种，即object。这就好比中国古典的朴素唯物思想，把世界最基本的元素归为金木水火土，其他复杂的物质都是由这五种基本元素组成。\n\nJavaScript中的代码只体现为一种形式，就是function。\n\n注意：以上单词都是小写的，不要和Number, String, Object, Function等JavaScript内置函数混淆了。要知道，JavaScript语言是区分大小写的呀!\n\n任何一个JavaScript的标识、常量、变量和参数都只是unfined, null, bool, number, string, object 和 function类型中的一种，也就typeof返回值表明的类型。除此之外没有其他类型了。\n\n先说说简单数据类型吧。\n\n```javascript\nundefined\n//代表一切未知的事物，啥都没有，无法想象，代码也就更无法去处理了。\n//注意：typeof(undefined) 返回也是 undefined。\n//可以将undefined赋值给任何变量或属性，但并不意味了清除了该变量，反而会因此多了一个属性。\n\nnull\n//有那么一个概念，但没有东西。无中似有，有中还无。虽难以想象，但已经可以用代码来处理了。\n//注意：typeof(null)返回object，但null并非object，具有null值的变量也并非object。\n\nboolean\n//是就是，非就非，没有疑义。对就对，错就错，绝对明确。既能被代码处理，也可以控制代码的流程。\n\nnumber\n//线性的事物，大小和次序分明，多而不乱。便于代码进行批量处理，也控制代码的迭代和循环等。\n//注意：typeof(NaN)和typeof(Infinity)都返回number 。\n//NaN参与任何数值计算的结构都是NaN，而且 NaN != NaN 。\n//Infinity / Infinity = NaN 。\n\nstring\n//面向人类的理性事物，而不是机器信号。人机信息沟通，代码据此理解人的意图等等，都靠它了。\n```\n\n简单类型都不是对象，JavaScript没有将对象化的能力赋予这些简单类型。直接被赋予简单类型常量值的标识符、变量和参数都不是一个对象。\n\n所谓“对象化”，就是可以将数据和代码组织成复杂结构的能力。JavaScript中只有object类型和function类型提供了对象化的能力。\n\n## 没有类\n\nobject就是对象的类型。在JavaScript中不管多么复杂的数据和代码，都可以组织成object形式的对象。\n\n但JavaScript却没有 “类”的概念！\n\n对于许多面向对象的程序员来说，这恐怕是JavaScript中最难以理解的地方。是啊，几乎任何讲面向对象的书中，第一个要讲的就是“类”的概念，这可是面向对象的支柱。这突然没有了“类”，我们就象一下子没了精神支柱，感到六神无主。看来，要放下对象和类，达到“对象本无根，类型亦无形”的境界确实是件不容易的事情啊。\n\n这样，我们先来看一段JavaScript程序：\n\n```javascript\nvar life = {};\nfor(life.age = 1; life.age <= 3; life.age++) {\n    switch(life.age) {\n        case 1: life.body = \"卵细胞\";\n                life.say = function(){alert(this.age+this.body)};\n                break;\n        case 2: life.tail = \"尾巴\";\n                life.gill = \"腮\";\n                life.body = \"蝌蚪\";\n                life.say = function(){alert(this.age+this.body+\"-\"+this.tail+\",\"+this.gill)};\n                break;\n        case 3: delete life.tail;\n                delete life.gill;\n                life.legs = \"四条腿\";\n                life.lung = \"肺\";\n                life.body = \"青蛙\";\n                life.say = function(){alert(this.age+this.body+\"-\"+this.legs+\",\"+this.lung)};\n                break;\n    };\n    life.say();\n};\n```\n\n这段JavaScript程序一开始产生了一个生命对象life，life诞生时只是一个光溜溜的对象，没有任何属性和方法。在第一次生命过程中，它有了一个身体属性body，并有了一个say方法，看起来是一个“卵细胞”。在第二次生命过程中，它又长出了“尾巴”和“腮”，有了tail和gill属性，显然它是一个“蝌蚪”。在第三次生命过程中，它的tail和gill属性消失了，但又长出了“四条腿”和“肺”，有了legs和lung属性，从而最终变成了“青蛙”。如果，你的想像力丰富的话，或许还能让它变成英俊的“王子”，娶个美丽的“公主”什么的。不过，在看完这段程序之后，请你思考一个问题：\n\n我们一定需要类吗？\n\n还记得儿时那个“小蝌蚪找妈妈”的童话吗？也许就在昨天晚，你的孩子刚好是在这个美丽的童话中进入梦乡的吧。可爱的小蝌蚪也就是在其自身类型不断演化过程中，逐渐变成了和妈妈一样的“类”，从而找到了自己的妈妈。这个童话故事中蕴含的编程哲理就是：对象的“类”是从无到有，又不断演化，最终又消失于无形之中的...\n\n“类”，的确可以帮助我们理解复杂的现实世界，这纷乱的现实世界也的确需要进行分类。但如果我们的思想被“类”束缚住了，“类”也就变成了“累”。想象一下，如果一个生命对象开始的时就被规定了固定的“类”，那么它还能演化吗？蝌蚪还能变成青蛙吗？还可以给孩子们讲小蝌蚪找妈妈的故事吗？\n\n所以，JavaScript中没有“类”，类已化于无形，与对象融为一体。正是由于放下了“类”这个概念，JavaScript的对象才有了其他编程语言所没有的活力。\n\n如果，此时你的内心深处开始有所感悟，那么你已经逐渐开始理解JavaScript的禅机了。\n\n\n## 函数的魔力\n\n接下来，我们再讨论一下JavaScript函数的魔力吧。\n\nJavaScript的代码就只有function一种形式，function就是函数的类型。也许其他编程语言还有procedure或 method等代码概念，但在JavaScript里只有function一种形式。当我们写下一个函数的时候，只不过是建立了一个function类型的实体而已。\n\n请看下面的程序：\n\n```javascript\nfunction myfunc() {\n    alert(\"hello\");\n};\n\nalert(typeof(myfunc));\n```\n\n这个代码运行之后可以看到typeof(myfunc)返回的是function。以上的函数写法我们称之为“定义式”的，如果我们将其改写成下面的“变量式”的，就更容易理解了：\n\n```javascript\nvar myfunc = function () {\n    alert(\"hello\");\n};\n\nalert(typeof(myfunc));\n```\n\n这里明确定义了一个变量myfunc，它的初始值被赋予了一个function的实体。因此，typeof(myfunc)返回的也是function。其实，这两种函数的写法是等价的，除了一点细微差别，其内部实现完全相同。也就是说，我们写的这些JavaScript函数只是一个命了名的变量而已，其变量类型即为function，变量的值就是我们编写的函数代码体。\n\n聪明的你或许立即会进一步的追问：既然函数只是变量，那么变量就可以被随意赋值并用到任意地方啰？\n\n我们来看看下面的代码：\n\n```javascript\nvar myfunc = function () {\n    alert(\"hello\");\n};\nmyfunc(); //第一次调用myfunc，输出hello\n\nmyfunc = function () {\n    alert(\"yeah\");\n};    \nmyfunc(); //第二次调用myfunc，将输出yeah\n```\n\n这个程序运行的结果告诉我们：答案是肯定的！在第一次调用函数之后，函数变量又被赋予了新的函数代码体，使得第二次调用该函数时，出现了不同的输出。\n\n好了，我们又来把上面的代码改成第一种定义式的函数形式：\n\n```javascript\nfunction myfunc () {\n    alert(\"hello\");\n};\nmyfunc(); //这里调用myfunc，输出yeah而不是hello\n\nfunction myfunc () {\n    alert(\"yeah\");\n};    \nmyfunc(); //这里调用myfunc，当然输出yeah\n```\n\n按理说，两个签名完全相同的函数，在其他编程语言中应该是非法的。但在JavaScript中，这没错。不过，程序运行之后却发现一个奇怪的现象：两次调用都只是最后那个函数里输出的值！显然第一个函数没有起到任何作用。这又是为什么呢？\n\n原来，JavaScript执行引擎并非一行一行地分析和执行程序，而是一段一段地分析执行的。而且，在同一段程序的分析执行中，定义式的函数语句会被提取出来优先执行。函数定义执行完之后，才会按顺序执行其他语句代码。也就是说，在第一次调用myfunc之前，第一个函数语句定义的代码逻辑，已被第二个函数定义语句覆盖了。所以，两次都调用都是执行最后一个函数逻辑了。\n\n如果把这个JavaScript代码分成两段，例如将它们写在一个html中，并用 `<script/>` 标签将其分成这样的两块：\n\n```html\n<script>\n    function myfunc () {\n        alert(\"hello\");\n    };\n    myfunc(); //这里调用myfunc，输出hello\n</script>\n\n<script>\n    function myfunc () {\n        alert(\"yeah\");\n    };    \n    myfunc(); //这里调用myfunc，输出yeah\n</script>\n```\n\n这时，输出才是各自按顺序来的，也证明了JavaScript的确是一段段地执行的。\n\n一段代码中的定义式函数语句会优先执行，这似乎有点象静态语言的编译概念。所以，这一特征也被有些人称为：JavaScript的“预编译”。\n\n大多数情况下，我们也没有必要去纠缠这些细节问题。只要你记住一点：JavaScript里的代码也是一种数据，同样可以被任意赋值和修改的，而它的值就是代码的逻辑。只是，与一般数据不同的是，函数是可以被调用执行的。\n\n不过，如果JavaScript函数仅仅只有这点道行的话，这与C++的函数指针，DELPHI的方法指针，C#的委托相比，又有啥稀奇嘛！然而，JavaScript函数的神奇之处还体现在另外两个方面：一是函数function类型本身也具有对象化的能力，二是函数function与对象 object超然的结合能力。\n\n\n## 奇妙的对象\n\n先来说说函数的对象化能力。\n\n任何一个函数都可以为其动态地添加或去除属性，这些属性可以是简单类型，可以是对象，也可以是其他函数。也就是说，函数具有对象的全部特征，你完全可以把函数当对象来用。其实，函数就是对象，只不过比一般的对象多了一个括号“()”操作符，这个操作符用来执行函数的逻辑。即，函数本身还可以被调用，一般对象却不可以被调用，除此之外完全相同。请看下面的代码：\n\n```javascript\nfunction Sing() {\n    with(arguments.callee)\n        alert(author + \"：\" + poem);\n};\nSing.author = \"李白\";\nSing.poem = \"汉家秦地月，流影照明妃。一上玉关道，天涯去不归\";\nSing();\nSing.author = \"李战\";\nSing.poem = \"日出汉家天，月落阴山前。女儿琵琶怨，已唱三千年\";\nSing();\n```\n\n在这段代码中，Sing函数被定义后，又给Sing函数动态地增加了author和poem属性。将author和poem属性设为不同的作者和诗句，在调用Sing()时就能显示出不同的结果。这个示例用一种诗情画意的方式，让我们理解了JavaScript函数就是对象的本质，也感受到了JavaScript语言的优美。\n\n好了，以上的讲述，我们应该算理解了function类型的东西都是和object类型一样的东西，这种东西被我们称为“对象”。我们的确可以这样去看待这些“对象”，因为它们既有“属性”也有“方法”嘛。但下面的代码又会让我们产生新的疑惑：\n\n```javascript\nvar anObject = {};  //一个对象\nanObject.aProperty = \"Property of object\";  //对象的一个属性\nanObject.aMethod = function(){alert(\"Method of object\")}; //对象的一个方法\n//主要看下面：\nalert(anObject[\"aProperty\"]);   //可以将对象当数组以属性名作为下标来访问属性\nanObject[\"aMethod\"]();          //可以将对象当数组以方法名作为下标来调用方法\nfor( var s in anObject)           //遍历对象的所有属性和方法进行迭代化处理\n    alert(s + \" is a \" + typeof(anObject[s]));\n```\n\n同样对于function类型的对象也是一样：\n\n```javascript\nvar aFunction = function() {};  //一个函数\naFunction.aProperty = \"Property of function\";  //函数的一个属性\naFunction.aMethod = function(){alert(\"Method of function\")}; //函数的一个方法\n//主要看下面：\nalert(aFunction[\"aProperty\"]);   //可以将函数当数组以属性名作为下标来访问属性\naFunction[\"aMethod\"]();          //可以将函数当数组以方法名作为下标来调用方法\nfor( var s in aFunction)         //遍历函数的所有属性和方法进行迭代化处理\n    alert(s + \" is a \" + typeof(aFunction[s]));\n```\n\n是的，对象和函数可以象数组一样，用属性名或方法名作为下标来访问并处理。那么，它到底应该算是数组呢，还是算对象？\n\n我们知道，数组应该算是线性数据结构，线性数据结构一般有一定的规律，适合进行统一的批量迭代操作等，有点像波。而对象是离散数据结构，适合描述分散的和个性化的东西，有点像粒子。因此，我们也可以这样问：JavaScript里的对象到底是波还是粒子？\n\n如果存在对象量子论，那么答案一定是：波粒二象性！\n\n因此，JavaScript里的函数和对象既有对象的特征也有数组的特征。这里的数组被称为“字典”，一种可以任意伸缩的名称值对儿的集合。其实， object和function的内部实现就是一个字典结构，但这种字典结构却通过严谨而精巧的语法表现出了丰富的外观。正如量子力学在一些地方用粒子来解释和处理问题，而在另一些地方却用波来解释和处理问题。你也可以在需要的时候，自由选择用对象还是数组来解释和处理问题。只要善于把握JavaScript的这些奇妙特性，就可以编写出很多简洁而强大的代码来。\n\n\n## 放下对象\n\n我们再来看看function与object的超然结合吧。\n\n在面向对象的编程世界里，数据与代码的有机结合就构成了对象的概念。自从有了对象，编程世界就被划分成两部分，一个是对象内的世界，一个是对象外的世界。对象天生具有自私的一面，外面的世界未经允许是不可访问对象内部的。对象也有大方的一面，它对外提供属性和方法，也为他人服务。不过，在这里我们要谈到一个有趣的问题，就是“对象的自我意识”。\n\n什么？没听错吧？对象有自我意识？\n\n可能对许多程序员来说，这的确是第一次听说。不过，请君看看C++、C#和Java的this，DELPHI的self，还有VB的me，或许你会恍然大悟！当然，也可能只是说句“不过如此”而已。\n\n然而，就在对象将世界划分为内外两部分的同时，对象的“自我”也就随之产生。“自我意识”是生命的最基本特征！正是由于对象这种强大的生命力，才使得编程世界充满无限的生机和活力。\n\n但对象的“自我意识”在带给我们快乐的同时也带来了痛苦和烦恼。我们给对象赋予了太多欲望，总希望它们能做更多的事情。然而，对象的自私使得它们互相争抢系统资源，对象的自负让对象变得复杂和臃肿，对象的自欺也往往带来挥之不去的错误和异常。我们为什么会有这么多的痛苦和烦恼呢？\n\n为此，有一个人，在对象树下，整整想了九九八十一天，终于悟出了生命的痛苦来自于欲望，但究其欲望的根源是来自于自我意识。于是他放下了“自我”，在对象树下成了佛，从此他开始普度众生，传播真经。他的名字就叫释迦摩尼，而《JavaScript真经》正是他所传经书中的一本。\n\nJavaScript中也有this，但这个this却与C++、C#或Java等语言的this不同。一般编程语言的this就是对象自己，而 JavaScript的this却并不一定！this可能是我，也可能是你，可能是他，反正是我中有你，你中有我，这就不能用原来的那个“自我”来理解 JavaScript这个this的含义了。为此，我们必须首先放下原来对象的那个“自我”。\n\n我们来看下面的代码：\n\n```javascript\nfunction WhoAmI() {       //定义一个函数WhoAmI\n    alert(\"I'm \" + this.name + \" of \" + typeof(this));\n};\n\nWhoAmI();   //此时是this当前这段代码的全局对象，在浏览器中就是window对象，其name属性为空字符串。输出：I'm of object\n\nvar BillGates = {name: \"Bill Gates\"};\nBillGates.WhoAmI = WhoAmI;  //将函数WhoAmI作为BillGates的方法。\nBillGates.WhoAmI();         //此时的this是BillGates。输出：I'm Bill Gates of object\n\nvar SteveJobs = {name: \"Steve Jobs\"};\nSteveJobs.WhoAmI = WhoAmI;  //将函数WhoAmI作为SteveJobs的方法。\nSteveJobs.WhoAmI();         //此时的this是SteveJobs。输出：I'm Steve Jobs of object\n\nWhoAmI.call(BillGates);     //直接将BillGates作为this，调用WhoAmI。输出：I'm Bill Gates of object\nWhoAmI.call(SteveJobs);     //直接将SteveJobs作为this，调用WhoAmI。输出：I'm Steve Jobs of object\n\nBillGates.WhoAmI.call(SteveJobs);   //将SteveJobs作为this，却调用BillGates的WhoAmI方法。输出：I'm Steve Jobs of object\nSteveJobs.WhoAmI.call(BillGates);   //将BillGates作为this，却调用SteveJobs的WhoAmI方法。输出：I'm Bill Gates of object\n\nWhoAmI.WhoAmI = WhoAmI;     //将WhoAmI函数设置为自身的方法。\nWhoAmI.name = \"WhoAmI\";\nWhoAmI.WhoAmI();            //此时的this是WhoAmI函数自己。输出：I'm WhoAmI of function\n    \n({name: \"nobody\", WhoAmI: WhoAmI}).WhoAmI();    //临时创建一个匿名对象并设置属性后调用WhoAmI方法。输出：I'm nobody of object\n```\n\n从上面的代码可以看出，同一个函数可以从不同的角度来调用，this并不一定是函数本身所属的对象。this只是在任意对象和function元素结合时的一个概念，是种结合比起一般对象语言的默认结合更加灵活，显得更加超然和洒脱。\n\n在JavaScript函数中，你只能把this看成当前要服务的“这个”对象。this是一个特殊的内置参数，根据this参数，您可以访问到“这个”对象的属性和方法，但却不能给this参数赋值。在一般对象语言中，方法体代码中的this可以省略的，成员默认都首先是“自己”的。但JavaScript却不同，由于不存在“自我”，当访问“这个”对象时，this不可省略！\n\nJavaScript提供了传递this参数的多种形式和手段，其中，象BillGates.WhoAmI()和SteveJobs.WhoAmI()这种形式，是传递this参数最正规的形式，此时的this就是函数所属的对象本身。而大多数情况下，我们也几乎很少去采用那些借花仙佛的调用形式。但只我们要明白JavaScript的这个“自我”与其他编程语言的“自我”是不同的，这是一个放下了的“自我”，这就是JavaScript特有的世界观。\n\n\n## 对象素描\n\n已经说了许多了许多话题了，但有一个很基本的问题我们忘了讨论，那就是：怎样建立对象？\n\n在前面的示例中，我们已经涉及到了对象的建立了。我们使用了一种被称为JavaScript Object Notation(缩写JSON)的形式，翻译为中文就是“JavaScript对象表示法”。\n\nJSON为创建对象提供了非常简单的方法。例如，创建一个没有任何属性的对象：\n\n```javascript\nvar o = {};\n```\n\n创建一个对象并设置属性及初始值：\n\n```javascript\nvar person = {\n    name: \"Angel\",\n    age: 18,\n    married: false\n};\n```\n\n创建一个对象并设置属性和方法：\n\n```javascript\nvar speaker = {\n    text: \"Hello World\",\n    say: function(){\n        alert(this.text)\n    }\n};\n```\n\n创建一个更复杂的对象，嵌套其他对象和对象数组等：\n\n```javascript\nvar company = {\n    name: \"Microsoft\",\n    product: \"softwares\",\n    chairman: {name: \"Bill Gates\", age: 53, Married: true},\n    employees: [{name: \"Angel\", age: 26, Married: false}, {name: \"Hanson\", age: 32, Marred: true}],\n    readme: function() {document.write(this.name + \" product \" + this.product);}\n};\n```\n\nJSON的形式就是用大括“{}”号包括起来的项目列表，每一个项目间并用逗号“,”分隔，而项目就是用冒号“:”分隔的属性名和属性值。这是典型的字典表示形式，也再次表明了 JavaScript里的对象就是字典结构。不管多么复杂的对象，都可以被一句JSON代码来创建并赋值。\n\n其实，JSON就是JavaScript对象最好的序列化形式，它比XML更简洁也更省空间。对象可以作为一个JSON形式的字符串，在网络间自由传递和交换信息。而当需要将这个JSON字符串变成一个JavaScript对象时，只需要使用eval函数这个强大的数码转换引擎，就立即能得到一个JavaScript内存对象。正是由于JSON的这种简单朴素的天生丽质，才使得她在AJAX舞台上成为璀璨夺目的明星。\n\nJavaScript就是这样，把面向对象那些看似复杂的东西，用及其简洁的形式表达出来。卸下对象浮华的浓妆，还对象一个眉目清晰！\n\n\n## 构造对象\n\n好了，接下我们来讨论一下对象的另一种创建方法。\n\n除JSON外，在JavaScript中我们可以使用new操作符结合一个函数的形式来创建对象。例如：\n\n```javascript\nfunction MyFunc() {};         //定义一个空函数\nvar anObj = new MyFunc();  //使用new操作符，借助MyFun函数，就创建了一个对象\n```\n\n\nJavaScript的这种创建对象的方式可真有意思，如何去理解这种写法呢？\n \n其实，可以把上面的代码改写成这种等价形式：\n\n```javascript\nfunction MyFunc(){};\nvar anObj = {};     //创建一个对象\nMyFunc.call(anObj); //将anObj对象作为this指针调用MyFunc函数\n```\n\n我们就可以这样理解，JavaScript先用new操作符创建了一个对象，紧接着就将这个对象作为this参数调用了后面的函数。其实，JavaScript内部就是这么做的，而且任何函数都可以被这样调用！但从 “anObj = new MyFunc()” 这种形式，我们又看到一个熟悉的身影，C++和C#不就是这样创建对象的吗？原来，条条大路通灵山，殊途同归啊！\n\n君看到此处也许会想，我们为什么不可以把这个MyFunc当作构造函数呢？恭喜你，答对了！JavaScript也是这么想的！请看下面的代码： \n\n```javascript\nfunction Person(name) {   //带参数的构造函数\n    this.name = name;   //将参数值赋给给this对象的属性\n    this.SayHello = function() {alert(\"Hello, I'm \" + this.name);};   //给this对象定义一个SayHello方法。\n};\nfunction Employee(name, salary) {     //子构造函数\n    Person.call(this, name);        //将this传给父构造函数\n    this.salary = salary;       //设置一个this的salary属性\n    this.ShowMeTheMoney = function() {alert(this.name + \" $\" + this.salary);};  //添加ShowMeTheMoney方法。\n};\n\nvar BillGates = new Person(\"Bill Gates\");   //用Person构造函数创建BillGates对象\nvar SteveJobs = new Employee(\"Steve Jobs\", 1234);   //用Empolyee构造函数创建SteveJobs对象\n\nBillGates.SayHello();   //显示：I'm Bill Gates\nSteveJobs.SayHello();   //显示：I'm Steve Jobs\nSteveJobs.ShowMeTheMoney();   //显示：Steve Jobs $1234\n\nalert(BillGates.constructor == Person);  //显示：true\nalert(SteveJobs.constructor == Employee);  //显示：true\n\nalert(BillGates.SayHello == SteveJobs.SayHello); //显示：false\n```\n\n这段代码表明，函数不但可以当作构造函数，而且还可以带参数，还可以为对象添加成员和方法。其中的第9行，Employee构造函数又将自己接收的this作为参数调用Person构造函数，这就是相当于调用基类的构造函数。第21、22行还表明这样一个意思：BillGates是由Person构造的，而SteveJobs是由Employee构造的。对象内置的constructor属性还指明了构造对象所用的具体函数！\n\n其实，如果你愿意把函数当作“类”的话，她就是“类”，因为她本来就有“类”的那些特征。难道不是吗？她生出的儿子各个都有相同的特征，而且构造函数也与类同名嘛！\n\n但要注意的是，用构造函数操作this对象创建出来的每一个对象，不但具有各自的成员数据，而且还具有各自的方法数据。换句话说，方法的代码体(体现函数逻辑的数据)在每一个对象中都存在一个副本。尽管每一个代码副本的逻辑是相同的，但对象们确实是各自保存了一份代码体。上例中的最后一句说明了这一实事，这也解释了JavaScript中的函数就是对象的概念。\n\n同一类的对象各自有一份方法代码显然是一种浪费。在传统的对象语言中，方法函数并不象JavaScript那样是个对象概念。即使也有象函数指针、方法指针或委托那样的变化形式，但其实质也是对同一份代码的引用。一般的对象语言很难遇到这种情况。\n\n不过，JavaScript语言有大的灵活性。我们可以先定义一份唯一的方法函数体，并在构造this对象时使用这唯一的函数对象作为其方法，就能共享方法逻辑。例如：\n\n\n```javascript\nfunction SayHello() {     //先定义一份SayHello函数代码\n    alert(\"Hello, I'm \" + this.name);\n};\n\nfunction Person(name) {   //带参数的构造函数\n    this.name = name;   //将参数值赋给给this对象的属性\n    this.SayHello = SayHello;   //给this对象SayHello方法赋值为前面那份SayHello代码。\n};\n\nvar BillGates = new Person(\"Bill Gates\");   //创建BillGates对象\nvar SteveJobs = new Person(\"Steve Jobs\");   //创建SteveJobs对象\n\nalert(BillGates.SayHello == SteveJobs.SayHello); //显示：true\n```\n\n其中，最后一行的输出结果表明两个对象确实共享了一个函数对象。虽然，这段程序达到了共享了一份方法代码的目的，但却不怎么优雅。因为，定义SayHello方法时反映不出其与Person类的关系。“优雅”这个词用来形容代码，也不知道是谁先提出来的。不过，这个词反映了程序员已经从追求代码的正确、高效、可靠和易读等基础上，向着追求代码的美观感觉和艺术境界的层次发展，程序人生又多了些浪漫色彩。\n\n显然，JavaScript早想到了这一问题，她的设计者们为此提供了一个有趣的prototype概念。\n\n\n## 初看原型\n\nprototype源自法语，软件界的标准翻译为“原型”，代表事物的初始形态，也含有模型和样板的意义。JavaScript中的prototype概念恰如其分地反映了这个词的内含，我们不能将其理解为C++的prototype那种预先声明的概念。\n\nJavaScript的所有function类型的对象都有一个prototype属性。这个prototype属性本身又是一个object类型的对象，因此我们也可以给这个prototype对象添加任意的属性和方法。既然prototype是对象的“原型”，那么由该函数构造出来的对象应该都会具有这个“原型”的特性。事实上，在构造函数的prototype上定义的所有属性和方法，都是可以通过其构造的对象直接访问和调用的。也可以这么说，prototype提供了一群同类对象共享属性和方法的机制。\n\n我们先来看看下面的代码：\n\n```javascript\nfunction Person(name) {\n    this.name = name;   //设置对象属性，每个对象各自一份属性数据\n};\n\nPerson.prototype.SayHello = function()  //给Person函数的prototype添加SayHello方法。\n{\n    alert(\"Hello, I'm \" + this.name);\n}\n\nvar BillGates = new Person(\"Bill Gates\");   //创建BillGates对象\nvar SteveJobs = new Person(\"Steve Jobs\");   //创建SteveJobs对象\n\nBillGates.SayHello();   //通过BillGates对象直接调用到SayHello方法\nSteveJobs.SayHello();   //通过SteveJobs对象直接调用到SayHello方法\n\nalert(BillGates.SayHello == SteveJobs.SayHello); //因为两个对象是共享prototype的SayHello，所以显示：true\n```\n\n程序运行的结果表明，构造函数的prototype上定义的方法确实可以通过对象直接调用到，而且代码是共享的。显然，把方法设置到prototype的写法显得优雅多了，尽管调用形式没有变，但逻辑上却体现了方法与类的关系，相对前面的写法，更容易理解和组织代码。\n\n那么，对于多层次类型的构造函数情况又如何呢？\n\n我们再来看下面的代码：\n\n```javascript\nfunction Person(name) {   //基类构造函数\n    this.name = name;\n};\n\nPerson.prototype.SayHello = function() {  //给基类构造函数的prototype添加方法\n    alert(\"Hello, I'm \" + this.name);\n};\n\nfunction Employee(name, salary) { //子类构造函数\n    Person.call(this, name);    //调用基类构造函数\n    this.salary = salary;\n};\n\nEmployee.prototype = new Person();  //建一个基类的对象作为子类原型的原型，这里很有意思\n\nEmployee.prototype.ShowMeTheMoney = function() {  //给子类添构造函数的prototype添加方法\n    alert(this.name + \" $\" + this.salary);\n};\n\nvar BillGates = new Person(\"Bill Gates\");   //创建基类Person的BillGates对象\nvar SteveJobs = new Employee(\"Steve Jobs\", 1234);   //创建子类Employee的SteveJobs对象\n\nBillGates.SayHello();       //通过对象直接调用到prototype的方法\nSteveJobs.SayHello();       //通过子类对象直接调用基类prototype的方法，关注！\nSteveJobs.ShowMeTheMoney(); //通过子类对象直接调用子类prototype的方法\n\nalert(BillGates.SayHello == SteveJobs.SayHello); //显示：true，表明prototype的方法是共享的\n```\n\n这段代码的第17行，构造了一个基类的对象，并将其设为子类构造函数的prototype，这是很有意思的。这样做的目的就是为了第28行，通过子类对象也可以直接调用基类prototype的方法。为什么可以这样呢？\n\n原来，在JavaScript中，prototype不但能让对象共享自己财富，而且prototype还有寻根问祖的天性，从而使得先辈们的遗产可以代代相传。当从一个对象那里读取属性或调用方法时，如果该对象自身不存在这样的属性或方法，就会去自己关联的prototype对象那里寻找；如果prototype没有，又会去prototype自己关联的前辈prototype那里寻找，直到找到或追溯过程结束为止。\n\n在JavaScript内部，对象的属性和方法追溯机制是通过所谓的prototype链来实现的。当用new操作符构造对象时，也会同时将构造函数的prototype对象指派给新创建的对象，成为该对象内置的原型对象。对象内置的原型对象应该是对外不可见的，尽管有些浏览器(如Firefox)可以让我们访问这个内置原型对象，但并不建议这样做。内置的原型对象本身也是对象，也有自己关联的原型对象，这样就形成了所谓的原型链。\n\n在原型链的最末端，就是Object构造函数prototype属性指向的那一个原型对象。这个原型对象是所有对象的最老祖先，这个老祖宗实现了诸如toString等所有对象天生就该具有的方法。其他内置构造函数，如Function, Boolean, String, Date和RegExp等的prototype都是从这个老祖宗传承下来的，但他们各自又定义了自身的属性和方法，从而他们的子孙就表现出各自宗族的那些特征。\n\n这不就是“继承”吗？是的，这就是“继承”，是JavaScript特有的“原型继承”。\n\n“原型继承”是慈祥而又严厉的。原形对象将自己的属性和方法无私地贡献给孩子们使用，也并不强迫孩子们必须遵从，允许一些顽皮孩子按自己的兴趣和爱好独立行事。从这点上看，原型对象是一位慈祥的母亲。然而，任何一个孩子虽然可以我行我素，但却不能动原型对象既有的财产，因为那可能会影响到其他孩子的利益。从这一点上看，原型对象又象一位严厉的父亲。我们来看看下面的代码就可以理解这个意思了：\n\n\n```javascript\nfunction Person(name) {\n    this.name = name;\n};\n\nPerson.prototype.company = \"Microsoft\"; //原型的属性\n\nPerson.prototype.SayHello = function()  //原型的方法\n{\n    alert(\"Hello, I'm \" + this.name + \" of \" + this.company);\n};\n\nvar BillGates = new Person(\"Bill Gates\");\nBillGates.SayHello();   //由于继承了原型的东西，规规矩矩输出：Hello, I'm Bill Gates\n\nvar SteveJobs = new Person(\"Steve Jobs\");\nSteveJobs.company = \"Apple\";    //设置自己的company属性，掩盖了原型的company属性\nSteveJobs.SayHello = function() //实现了自己的SayHello方法，掩盖了原型的SayHello方法\n{\n    alert(\"Hi, \" + this.name + \" like \" + this.company + \", ha ha ha \");\n};\n\nSteveJobs.SayHello();   //都是自己覆盖的属性和方法，输出：Hi, Steve Jobs like Apple, ha ha ha \n\nBillGates.SayHello();   //SteveJobs的覆盖没有影响原型对象，BillGates还是按老样子输出\n```\n\n对象可以掩盖原型对象的那些属性和方法，一个构造函数原型对象也可以掩盖上层构造函数原型对象既有的属性和方法。这种掩盖其实只是在对象自己身上创建了新的属性和方法，只不过这些属性和方法与原型对象的那些同名而已。JavaScript就是用这简单的掩盖机制实现了对象的“多态”性，与静态对象语言的虚函数和重载(override)概念不谋而合。\n\n然而，比静态对象语言更神奇的是，我们可以随时给原型对象动态添加新的属性和方法，从而动态地扩展基类的功能特性。这在静态对象语言中是很难想象的。我们来看下面的代码：\n\n```javascript\nfunction Person(name) {\n    this.name = name;\n};\n\nPerson.prototype.SayHello = function()  //建立对象前定义的方法\n{\n    alert(\"Hello, I'm \" + this.name);\n};\n\nvar BillGates = new Person(\"Bill Gates\");   //建立对象\n\nBillGates.SayHello();\n\nPerson.prototype.Retire = function()    //建立对象后再动态扩展原型的方法\n{\n    alert(\"Poor \" + this.name + \", bye bye!\");\n};\n\nBillGates.Retire(); //动态扩展的方法即可被先前建立的对象立即调用\n```\n\n阿弥佗佛，原型继承竟然可以玩出有这样的法术！\n\n\n## 原型扩展\n\n 想必君的悟性极高，可能你会这样想：如果在JavaScript内置的那些如Object和Function等函数的prototype上添加些新的方法和属性，是不是就能扩展JavaScript的功能呢？\n\n那么，恭喜你，你得到了！\n\n在AJAX技术迅猛发展的今天，许多成功的AJAX项目的JavaScript运行库都大量扩展了内置函数的prototype功能。比如微软的ASP.NET AJAX，就给这些内置函数及其prototype添加了大量的新特性，从而增强了JavaScript的功能。\n\n我们来看一段摘自MicrosoftAjax.debug.js中的代码：\n\n```javascript\nString.prototype.trim = function String$trim() {\n    if (arguments.length !== 0) throw Error.parameterCount();\n    return this.replace(/^\\s+|\\s+$/g, '');\n}\n```\n\n这段代码就是给内置String函数的prototype扩展了一个trim方法，于是所有的String类对象都有了trim方法了。有了这个扩展，今后要去除字符串两段的空白，就不用再分别处理了，因为任何字符串都有了这个扩展功能，只要调用即可，真的很方便。\n\n当然，几乎很少有人去给Object的prototype添加方法，因为那会影响到所有的对象，除非在你的架构中这种方法的确是所有对象都需要的。\n\n前两年，微软在设计AJAX类库的初期，用了一种被称为“闭包”(closure)的技术来模拟“类”。其大致模型如下：\n\n```javascript\nfunction Person(firstName, lastName, age){\n    //私有变量：\n    var _firstName = firstName;\n    var _lastName = lastName;\n\n    //公共变量:\n    this.age = age;\n\n    //方法：\n    this.getName = function()\n    {\n        return(firstName + \" \" + lastName);\n    };\n    this.SayHello = function()\n    {\n        alert(\"Hello, I'm \" + firstName + \" \" + lastName);\n    };\n};\n\nvar BillGates = new Person(\"Bill\", \"Gates\", 53);\nvar SteveJobs = new Person(\"Steve\", \"Jobs\", 53);\n\nBillGates.SayHello();\nSteveJobs.SayHello();\nalert(BillGates.getName() + \" \" + BillGates.age);\nalert(BillGates.firstName);     //这里不能访问到私有变量\n```\n\n很显然，这种模型的类描述特别象C#语言的描述形式，在一个构造函数里依次定义了私有成员、公共属性和可用的方法，显得非常优雅嘛。特别是“闭包”机制可以模拟对私有成员的保护机制，做得非常漂亮。\n\n所谓的“闭包”，就是在构造函数体内定义另外的函数作为目标对象的方法函数，而这个对象的方法函数反过来引用外层外层函数体中的临时变量。这使得只要目标对象在生存期内始终能保持其方法，就能间接保持原构造函数体当时用到的临时变量值。尽管最开始的构造函数调用已经结束，临时变量的名称也都消失了，但在目标对象的方法内却始终能引用到该变量的值，而且该值只能通这种方法来访问。即使再次调用相同的构造函数，但只会生成新对象和方法，新的临时变量只是对应新的值，和上次那次调用的是各自独立的。的确很巧妙！\n\n但是前面我们说过，给每一个对象设置一份方法是一种很大的浪费。还有，“闭包”这种间接保持变量值的机制，往往会给JavaSript的垃圾回收器制造难题。特别是遇到对象间复杂的循环引用时，垃圾回收的判断逻辑非常复杂。无独有偶，IE浏览器早期版本确实存在JavaSript垃圾回收方面的内存泄漏问题。再加上“闭包”模型在性能测试方面的表现不佳，微软最终放弃了“闭包”模型，而改用“原型”模型。正所谓“有得必有失”嘛。\n\n原型模型需要一个构造函数来定义对象的成员，而方法却依附在该构造函数的原型上。大致写法如下：\n\n```javascript\n//定义构造函数\nfunction Person(name) {\n    this.name = name;   //在构造函数中定义成员\n};\n\n//方法定义到构造函数的prototype上\nPerson.prototype.SayHello = function() {\n    alert(\"Hello, I'm \" + this.name);\n};    \n\n//子类构造函数\nfunction Employee(name, salary) {\n    Person.call(this, name);    //调用上层构造函数\n    this.salary = salary;       //扩展的成员\n};\n\n//子类构造函数首先需要用上层构造函数来建立prototype对象，实现继承的概念\nEmployee.prototype = new Person()   //只需要其prototype的方法，此对象的成员没有任何意义！\n\n//子类方法也定义到构造函数之上\nEmployee.prototype.ShowMeTheMoney = function()\n{\n    alert(this.name + \" $\" + this.salary);\n};\n\nvar BillGates = new Person(\"Bill Gates\");\nBillGates.SayHello();    \n\nvar SteveJobs = new Employee(\"Steve Jobs\", 1234);\nSteveJobs.SayHello();\nSteveJobs.ShowMeTheMoney();\n```\n\n原型类模型虽然不能模拟真正的私有变量，而且也要分两部分来定义类，显得不怎么“优雅”。不过，对象间的方法是共享的，不会遇到垃圾回收问题，而且性能优于“闭包”模型。正所谓“有失必有得”嘛。\n\n在原型模型中，为了实现类继承，必须首先将子类构造函数的prototype设置为一个父类的对象实例。创建这个父类对象实例的目的就是为了构成原型链，以起到共享上层原型方法作用。但创建这个实例对象时，上层构造函数也会给它设置对象成员，这些对象成员对于继承来说是没有意义的。虽然，我们也没有给构造函数传递参数，但确实创建了若干没有用的成员，尽管其值是undefined，这也是一种浪费啊。\n\n唉！世界上没有完美的事情啊！\n\n## 原型真谛\n\n正当我们感概万分时，天空中一道红光闪过，祥云中出现了观音菩萨。只见她手持玉净瓶，轻拂翠柳枝，洒下几滴甘露，顿时让JavaScript又添新的灵气。\n\n观音洒下的甘露在JavaScript的世界里凝结成块，成为了一种称为“语法甘露”的东西。这种语法甘露可以让我们编写的代码看起来更象对象语言。\n\n要想知道这“语法甘露”为何物，就请君侧耳细听。\n\n在理解这些语法甘露之前，我们需要重新再回顾一下JavaScript构造对象的过程。\n\n我们已经知道，用 var anObject = new aFunction() 形式创建对象的过程实际上可以分为三步：第一步是建立一个新对象；第二步将该对象内置的原型对象设置为构造函数prototype引用的那个原型对象；第三步就是将该对象作为this参数调用构造函数，完成成员设置等初始化工作。对象建立之后，对象上的任何访问和操作都只与对象自身及其原型链上的那串对象有关，与构造函数再扯不上关系了。换句话说，构造函数只是在创建对象时起到介绍原型对象和初始化对象两个作用。\n\n那么，我们能否自己定义一个对象来当作原型，并在这个原型上描述类，然后将这个原型设置给新创建的对象，将其当作对象的类呢？我们又能否将这个原型中的一个方法当作构造函数，去初始化新建的对象呢？例如，我们定义这样一个原型对象：\n\n```javascript\nvar Person = {  //定义一个对象来作为原型类\n    Create: function(name, age) {  //这个当构造函数\n        this.name = name;\n        this.age = age;\n    },\n    SayHello: function() {  //定义方法\n        alert(\"Hello, I'm \" + this.name);\n    },\n    HowOld: function() {  //定义方法\n        alert(this.name + \" is \" + this.age + \" years old.\");\n    }\n};\n```\n\n这个JSON形式的写法多么象一个C#的类啊！既有构造函数，又有各种方法。如果可以用某种形式来创建对象，并将对象的内置的原型设置为上面这个“类”对象，不就相当于创建该类的对象了吗？\n\n但遗憾的是，我们几乎不能访问到对象内置的原型属性！尽管有些浏览器可以访问到对象的内置原型，但这样做的话就只能限定了用户必须使用那种浏览器。这也几乎不可行。\n\n那么，我们可不可以通过一个函数对象来做媒介，利用该函数对象的prototype属性来中转这个原型，并用new操作符传递给新建的对象呢？\n\n其实，象这样的代码就可以实现这一目标：\n\n```javascript\nfunction anyfunc(){};           //定义一个函数躯壳\nanyfunc.prototype = Person;     //将原型对象放到中转站prototype\nvar BillGates = new anyfunc();  //新建对象的内置原型将是我们期望的原型对象\n```\n\n不过，这个anyfunc函数只是一个躯壳，在使用过这个躯壳之后它就成了多余的东西了，而且这和直接使用构造函数来创建对象也没啥不同，有点不爽。\n\n可是，如果我们将这些代码写成一个通用函数，而那个函数躯壳也就成了函数内的函数，这个内部函数不就可以在外层函数退出作用域后自动消亡吗？而且，我们可以将原型对象作为通用函数的参数，让通用函数返回创建的对象。我们需要的就是下面这个形式：\n\n```javascript\nfunction New(aClass, aParams) {   //通用创建函数\n    function new_()     //定义临时的中转函数壳\n    {\n        aClass.Create.apply(this, aParams);   //调用原型中定义的的构造函数，中转构造逻辑及构造参数\n    };\n    new_.prototype = aClass;    //准备中转原型对象\n    return new new_();          //返回建立最终建立的对象\n};\n\nvar Person = {        //定义的类\n    Create: function(name, age) {\n    \n        this.name = name;\n        this.age = age;\n    },\n    SayHello: function() {\n    \n        alert(\"Hello, I'm \" + this.name);\n    },\n    HowOld: function() {\n        alert(this.name + \" is \" + this.age + \" years old.\");\n    }\n};\n\nvar BillGates = New(Person, [\"Bill Gates\", 53]);  //调用通用函数创建对象，并以数组形式传递构造参数\nBillGates.SayHello();\nBillGates.HowOld();\n\nalert(BillGates.constructor == Object);     //输出：true\n```\n\n这里的通用函数New()就是一个“语法甘露”！这个语法甘露不但中转了原型对象，还中转了构造函数逻辑及构造参数。\n\n有趣的是，每次创建完对象退出New函数作用域时，临时的 new_ 函数对象会被自动释放。由于 new_ 的prototype属性被设置为新的原型对象，其原来的原型对象和new_之间就已解开了引用链，临时函数及其原来的原型对象都会被正确回收了。上面代码的最后一句证明，新创建的对象的constructor属性返回的是Object函数。其实新建的对象自己及其原型里没有constructor属性，那返回的只是最顶层原型对象的构造函数，即Object。\n\n有了New这个语法甘露，类的定义就很像C#那些静态对象语言的形式了，这样的代码显得多么文静而优雅啊！\n\n当然，这个代码仅仅展示了“语法甘露”的概念。我们还需要多一些的语法甘露，才能实现用简洁而优雅的代码书写类层次及其继承关系。好了，我们再来看一个更丰富的示例吧：\n\n```javascript\n//语法甘露：\nvar object =    //定义小写的object基本类，用于实现最基础的方法等\n{\n    isA: function(aType)   //一个判断类与类之间以及对象与类之间关系的基础方法\n    {\n        var self = this;\n        while(self)\n        {\n            if (self == aType)\n                return true;\n            self = self.Type;\n        };\n        return false;\n    }\n};\n\nfunction Class(aBaseClass, aClassDefine)    //创建类的函数，用于声明类及继承关系\n{\n    function class_()   //创建类的临时函数壳\n    {\n        this.Type = aBaseClass;    //我们给每一个类约定一个Type属性，引用其继承的类\n        for(var member in aClassDefine)\n            this[member] = aClassDefine[member];    //复制类的全部定义到当前创建的类\n    };\n    class_.prototype = aBaseClass;\n    return new class_();\n};\n\nfunction New(aClass, aParams)   //创建对象的函数，用于任意类的对象创建\n{\n    function new_()     //创建对象的临时函数壳\n    {\n        this.Type = aClass;    //我们也给每一个对象约定一个Type属性，据此可以访问到对象所属的类\n        if (aClass.Create)\n            aClass.Create.apply(this, aParams);   //我们约定所有类的构造函数都叫Create，这和DELPHI比较相似\n    };\n    new_.prototype = aClass;\n    return new new_();\n};\n\n//语法甘露的应用效果：    \nvar Person = Class(object,      //派生至object基本类\n{\n    Create: function(name, age)\n    {\n        this.name = name;\n        this.age = age;\n    },\n    SayHello: function()\n    {\n        alert(\"Hello, I'm \" + this.name + \", \" + this.age + \" years old.\");\n    }\n});\n\nvar Employee = Class(Person,    //派生至Person类，是不是和一般对象语言很相似？\n{\n    Create: function(name, age, salary)\n    {\n        Person.Create.call(this, name, age);  //调用基类的构造函数\n        this.salary = salary;\n    },\n    ShowMeTheMoney: function()\n    {\n        alert(this.name + \" $\" + this.salary);\n    }\n});\n\nvar BillGates = New(Person, [\"Bill Gates\", 53]);\nvar SteveJobs = New(Employee, [\"Steve Jobs\", 53, 1234]);\nBillGates.SayHello();\nSteveJobs.SayHello();\nSteveJobs.ShowMeTheMoney();\n\nvar LittleBill = New(BillGates.Type, [\"Little Bill\", 6]);   //根据BillGate的类型创建LittleBill\nLittleBill.SayHello();\n\nalert(BillGates.isA(Person));       //true\nalert(BillGates.isA(Employee));     //false\nalert(SteveJobs.isA(Person));       //true\nalert(Person.isA(Employee));        //false\nalert(Employee.isA(Person));        //true\n```\n\n“语法甘露”不用太多，只要那么一点点，就能改观整个代码的易读性和流畅性，从而让代码显得更优雅。有了这些语法甘露，JavaScript就很像一般对象语言了，写起代码了感觉也就爽多了！\n\n令人高兴的是，受这些甘露滋养的JavaScript程序效率会更高。因为其原型对象里既没有了毫无用处的那些对象级的成员，而且还不存在constructor属性体，少了与构造函数间的牵连，但依旧保持了方法的共享性。这让JavaScript在追溯原型链和搜索属性及方法时，少费许多工夫啊。\n\n我们就把这种形式称为“甘露模型”吧！其实，这种“甘露模型”的原型用法才是符合prototype概念的本意，才是的JavaScript原型的真谛！\n\n想必微软那些设计AJAX架构的工程师看到这个甘露模型时，肯定后悔没有早点把AJAX部门从美国搬到咱中国的观音庙来，错过了观音菩萨的点化。当然，我们也只能是在代码的示例中，把Bill Gates当作对象玩玩，真要让他放弃上帝转而皈依我佛肯定是不容易的，机缘未到啊！如果哪天你在微软新出的AJAX类库中看到这种甘露模型，那才是真正的缘分！\n\n\n## 编程的快乐\n\n在软件工业迅猛发展的今天，各式各样的编程语言层出不穷，新语言的诞生，旧语言的演化，似乎已经让我们眼花缭乱。为了适应面向对象编程的潮流，JavaScript语言也在向完全面向对象的方向发展，新的JavaScript标准已经从语义上扩展了许多面向对象的新元素。与此相反的是，许多静态的对象语言也在向JavaScript的那种简洁而幽雅的方向发展。例如，新版本的C#语言就吸收了JSON那样的简洁表示法，以及一些其他形式的JavaScript特性。\n\n我们应该看到，随着RIA(强互联应用)的发展和普及，AJAX技术也将逐渐淡出江湖，JavaScript也将最终消失或演化成其他形式的语言。但不管编程语言如何发展和演化，编程世界永远都会在“数据”与“代码”这千丝万缕的纠缠中保持着无限的生机。只要我们能看透这一点，我们就能很容易地学习和理解软件世界的各种新事物。不管是已熟悉的过程式编程，还是正在发展的函数式编程，以及未来量子纠缠态的大规模并行式编程，我们都有足够的法力来化解一切复杂的难题。\n\n佛最后淡淡地说：只要我们放下那些表面的“类”，放下那些对象的“自我”，就能达到一种“对象本无根，类型亦无形”的境界，从而将自我融入到整个宇宙的生命轮循环中。我们将没有自我，也没有自私的欲望，你就是我，我就是你，你中有我，我中有你。这时，我们再看这生机勃勃的编程世界时，我们的内心将自然生起无限的慈爱之心，这种慈爱之心不是虚伪而是真诚的。关爱他人就是关爱自己，就是关爱这世界中的一切。那么，我们的心是永远快乐的，我们的程序是永远快乐的，我们的类是永远快乐的，我们的对象也是永远快乐的。这就是编程的极乐！\n\n说到这里，在座的比丘都犹如醍醐灌顶，心中豁然开朗。看看左边这位早已喜不自禁，再看看右边那位也是心花怒放。\n\n蓦然回首时，唯见君拈花微笑...\n\n> 原著：李战(leadzen).深圳 2008-2-23\n> [悟透JavaScript](http://www.cnblogs.com/leadzen/archive/2008/02/25/1073404.html)","source":"_posts/javascript-zen.md","raw":"---\ntitle: '[转载]悟透JavaScript'\ndate: 2017-04-07 14:15:30\ncategories: javaScript日常笔记\n---\n\n> 转载：[悟透JavaScript](http://www.cnblogs.com/leadzen/archive/2008/02/25/1073404.html)\n\n## 引子\n\n编程世界里只存在两种基本元素，一个是数据，一个是代码。编程世界就是在数据和代码千丝万缕的纠缠中呈现出无限的生机和活力。\n\n数据天生就是文静的，总想保持自己固有的本色；而代码却天生活泼，总想改变这个世界。\n\n你看，数据代码间的关系与物质能量间的关系有着惊人的相似。数据也是有惯性的，如果没有代码来施加外力，她总保持自己原来的状态。而代码就象能量，他存在的唯一目的，就是要努力改变数据原来的状态。在代码改变数据的同时，也会因为数据的抗拒而反过来影响或改变代码原有的趋势。甚至在某些情况下，数据可以转变为代码，而代码却又有可能被转变为数据，或许还存在一个类似E=MC2形式的数码转换方程呢。然而，就是在数据和代码间这种即矛盾又统一的运转中，总能体现出计算机世界的规律，这些规律正是我们编写的程序逻辑。\n\n不过，由于不同程序员有着不同的世界观，这些数据和代码看起来也就不尽相同。于是，不同世界观的程序员们运用各自的方法论，推动着编程世界的进化和发展。\n\n众所周知，当今最流行的编程思想莫过于面向对象编程的思想。为什么面向对象的思想能迅速风靡编程世界呢？因为面向对象的思想首次把数据和代码结合成统一体，并以一个简单的对象概念呈现给编程者。这一下子就将原来那些杂乱的算法与子程序，以及纠缠不清的复杂数据结构，划分成清晰而有序的对象结构，从而理清了数据与代码在我们心中那团乱麻般的结。我们又可以有一个更清晰的思维，在另一个思想高度上去探索更加浩瀚的编程世界了。\n\n在五祖弘忍讲授完《对象真经》之后的一天，他对众弟子们说：“经已讲完，想必尔等应该有所感悟，请各自写个偈子来看”。大弟子神秀是被大家公认为悟性最高的师兄，他的偈子写道：“身是对象树，心如类般明。朝朝勤拂拭，莫让惹尘埃！”。此偈一出，立即引起师兄弟们的轰动，大家都说写得太好了。只有火头僧慧能看后，轻轻地叹了口气，又随手在墙上写道：“对象本无根，类型亦无形。本来无一物，何处惹尘埃？”。然后摇了摇头，扬长而去。大家看了慧能的偈子都说：“写的什么乱七八糟的啊，看不懂”。师父弘忍看了神秀的诗偈也点头称赞，再看慧能的诗偈之后默然摇头。就在当天夜里，弘忍却悄悄把慧能叫到自己的禅房，将珍藏多年的软件真经传授于他，然后让他趁着月色连夜逃走...\n\n后来，慧能果然不负师父厚望，在南方开创了禅宗另一个广阔的天空。而慧能当年带走的软件真经中就有一本是《JavaScript真经》！\n\n\n## 回归简单\n\n要理解JavaScript，你得首先放下对象和类的概念，回到数据和代码的本原。前面说过，编程世界只有数据和代码两种基本元素，而这两种元素又有着纠缠不清的关系。JavaScript就是把数据和代码都简化到最原始的程度。\n\nJavaScript中的数据很简洁的。简单数据只有 undefined, null, boolean, number和string这五种，而复杂数据只有一种，即object。这就好比中国古典的朴素唯物思想，把世界最基本的元素归为金木水火土，其他复杂的物质都是由这五种基本元素组成。\n\nJavaScript中的代码只体现为一种形式，就是function。\n\n注意：以上单词都是小写的，不要和Number, String, Object, Function等JavaScript内置函数混淆了。要知道，JavaScript语言是区分大小写的呀!\n\n任何一个JavaScript的标识、常量、变量和参数都只是unfined, null, bool, number, string, object 和 function类型中的一种，也就typeof返回值表明的类型。除此之外没有其他类型了。\n\n先说说简单数据类型吧。\n\n```javascript\nundefined\n//代表一切未知的事物，啥都没有，无法想象，代码也就更无法去处理了。\n//注意：typeof(undefined) 返回也是 undefined。\n//可以将undefined赋值给任何变量或属性，但并不意味了清除了该变量，反而会因此多了一个属性。\n\nnull\n//有那么一个概念，但没有东西。无中似有，有中还无。虽难以想象，但已经可以用代码来处理了。\n//注意：typeof(null)返回object，但null并非object，具有null值的变量也并非object。\n\nboolean\n//是就是，非就非，没有疑义。对就对，错就错，绝对明确。既能被代码处理，也可以控制代码的流程。\n\nnumber\n//线性的事物，大小和次序分明，多而不乱。便于代码进行批量处理，也控制代码的迭代和循环等。\n//注意：typeof(NaN)和typeof(Infinity)都返回number 。\n//NaN参与任何数值计算的结构都是NaN，而且 NaN != NaN 。\n//Infinity / Infinity = NaN 。\n\nstring\n//面向人类的理性事物，而不是机器信号。人机信息沟通，代码据此理解人的意图等等，都靠它了。\n```\n\n简单类型都不是对象，JavaScript没有将对象化的能力赋予这些简单类型。直接被赋予简单类型常量值的标识符、变量和参数都不是一个对象。\n\n所谓“对象化”，就是可以将数据和代码组织成复杂结构的能力。JavaScript中只有object类型和function类型提供了对象化的能力。\n\n## 没有类\n\nobject就是对象的类型。在JavaScript中不管多么复杂的数据和代码，都可以组织成object形式的对象。\n\n但JavaScript却没有 “类”的概念！\n\n对于许多面向对象的程序员来说，这恐怕是JavaScript中最难以理解的地方。是啊，几乎任何讲面向对象的书中，第一个要讲的就是“类”的概念，这可是面向对象的支柱。这突然没有了“类”，我们就象一下子没了精神支柱，感到六神无主。看来，要放下对象和类，达到“对象本无根，类型亦无形”的境界确实是件不容易的事情啊。\n\n这样，我们先来看一段JavaScript程序：\n\n```javascript\nvar life = {};\nfor(life.age = 1; life.age <= 3; life.age++) {\n    switch(life.age) {\n        case 1: life.body = \"卵细胞\";\n                life.say = function(){alert(this.age+this.body)};\n                break;\n        case 2: life.tail = \"尾巴\";\n                life.gill = \"腮\";\n                life.body = \"蝌蚪\";\n                life.say = function(){alert(this.age+this.body+\"-\"+this.tail+\",\"+this.gill)};\n                break;\n        case 3: delete life.tail;\n                delete life.gill;\n                life.legs = \"四条腿\";\n                life.lung = \"肺\";\n                life.body = \"青蛙\";\n                life.say = function(){alert(this.age+this.body+\"-\"+this.legs+\",\"+this.lung)};\n                break;\n    };\n    life.say();\n};\n```\n\n这段JavaScript程序一开始产生了一个生命对象life，life诞生时只是一个光溜溜的对象，没有任何属性和方法。在第一次生命过程中，它有了一个身体属性body，并有了一个say方法，看起来是一个“卵细胞”。在第二次生命过程中，它又长出了“尾巴”和“腮”，有了tail和gill属性，显然它是一个“蝌蚪”。在第三次生命过程中，它的tail和gill属性消失了，但又长出了“四条腿”和“肺”，有了legs和lung属性，从而最终变成了“青蛙”。如果，你的想像力丰富的话，或许还能让它变成英俊的“王子”，娶个美丽的“公主”什么的。不过，在看完这段程序之后，请你思考一个问题：\n\n我们一定需要类吗？\n\n还记得儿时那个“小蝌蚪找妈妈”的童话吗？也许就在昨天晚，你的孩子刚好是在这个美丽的童话中进入梦乡的吧。可爱的小蝌蚪也就是在其自身类型不断演化过程中，逐渐变成了和妈妈一样的“类”，从而找到了自己的妈妈。这个童话故事中蕴含的编程哲理就是：对象的“类”是从无到有，又不断演化，最终又消失于无形之中的...\n\n“类”，的确可以帮助我们理解复杂的现实世界，这纷乱的现实世界也的确需要进行分类。但如果我们的思想被“类”束缚住了，“类”也就变成了“累”。想象一下，如果一个生命对象开始的时就被规定了固定的“类”，那么它还能演化吗？蝌蚪还能变成青蛙吗？还可以给孩子们讲小蝌蚪找妈妈的故事吗？\n\n所以，JavaScript中没有“类”，类已化于无形，与对象融为一体。正是由于放下了“类”这个概念，JavaScript的对象才有了其他编程语言所没有的活力。\n\n如果，此时你的内心深处开始有所感悟，那么你已经逐渐开始理解JavaScript的禅机了。\n\n\n## 函数的魔力\n\n接下来，我们再讨论一下JavaScript函数的魔力吧。\n\nJavaScript的代码就只有function一种形式，function就是函数的类型。也许其他编程语言还有procedure或 method等代码概念，但在JavaScript里只有function一种形式。当我们写下一个函数的时候，只不过是建立了一个function类型的实体而已。\n\n请看下面的程序：\n\n```javascript\nfunction myfunc() {\n    alert(\"hello\");\n};\n\nalert(typeof(myfunc));\n```\n\n这个代码运行之后可以看到typeof(myfunc)返回的是function。以上的函数写法我们称之为“定义式”的，如果我们将其改写成下面的“变量式”的，就更容易理解了：\n\n```javascript\nvar myfunc = function () {\n    alert(\"hello\");\n};\n\nalert(typeof(myfunc));\n```\n\n这里明确定义了一个变量myfunc，它的初始值被赋予了一个function的实体。因此，typeof(myfunc)返回的也是function。其实，这两种函数的写法是等价的，除了一点细微差别，其内部实现完全相同。也就是说，我们写的这些JavaScript函数只是一个命了名的变量而已，其变量类型即为function，变量的值就是我们编写的函数代码体。\n\n聪明的你或许立即会进一步的追问：既然函数只是变量，那么变量就可以被随意赋值并用到任意地方啰？\n\n我们来看看下面的代码：\n\n```javascript\nvar myfunc = function () {\n    alert(\"hello\");\n};\nmyfunc(); //第一次调用myfunc，输出hello\n\nmyfunc = function () {\n    alert(\"yeah\");\n};    \nmyfunc(); //第二次调用myfunc，将输出yeah\n```\n\n这个程序运行的结果告诉我们：答案是肯定的！在第一次调用函数之后，函数变量又被赋予了新的函数代码体，使得第二次调用该函数时，出现了不同的输出。\n\n好了，我们又来把上面的代码改成第一种定义式的函数形式：\n\n```javascript\nfunction myfunc () {\n    alert(\"hello\");\n};\nmyfunc(); //这里调用myfunc，输出yeah而不是hello\n\nfunction myfunc () {\n    alert(\"yeah\");\n};    \nmyfunc(); //这里调用myfunc，当然输出yeah\n```\n\n按理说，两个签名完全相同的函数，在其他编程语言中应该是非法的。但在JavaScript中，这没错。不过，程序运行之后却发现一个奇怪的现象：两次调用都只是最后那个函数里输出的值！显然第一个函数没有起到任何作用。这又是为什么呢？\n\n原来，JavaScript执行引擎并非一行一行地分析和执行程序，而是一段一段地分析执行的。而且，在同一段程序的分析执行中，定义式的函数语句会被提取出来优先执行。函数定义执行完之后，才会按顺序执行其他语句代码。也就是说，在第一次调用myfunc之前，第一个函数语句定义的代码逻辑，已被第二个函数定义语句覆盖了。所以，两次都调用都是执行最后一个函数逻辑了。\n\n如果把这个JavaScript代码分成两段，例如将它们写在一个html中，并用 `<script/>` 标签将其分成这样的两块：\n\n```html\n<script>\n    function myfunc () {\n        alert(\"hello\");\n    };\n    myfunc(); //这里调用myfunc，输出hello\n</script>\n\n<script>\n    function myfunc () {\n        alert(\"yeah\");\n    };    \n    myfunc(); //这里调用myfunc，输出yeah\n</script>\n```\n\n这时，输出才是各自按顺序来的，也证明了JavaScript的确是一段段地执行的。\n\n一段代码中的定义式函数语句会优先执行，这似乎有点象静态语言的编译概念。所以，这一特征也被有些人称为：JavaScript的“预编译”。\n\n大多数情况下，我们也没有必要去纠缠这些细节问题。只要你记住一点：JavaScript里的代码也是一种数据，同样可以被任意赋值和修改的，而它的值就是代码的逻辑。只是，与一般数据不同的是，函数是可以被调用执行的。\n\n不过，如果JavaScript函数仅仅只有这点道行的话，这与C++的函数指针，DELPHI的方法指针，C#的委托相比，又有啥稀奇嘛！然而，JavaScript函数的神奇之处还体现在另外两个方面：一是函数function类型本身也具有对象化的能力，二是函数function与对象 object超然的结合能力。\n\n\n## 奇妙的对象\n\n先来说说函数的对象化能力。\n\n任何一个函数都可以为其动态地添加或去除属性，这些属性可以是简单类型，可以是对象，也可以是其他函数。也就是说，函数具有对象的全部特征，你完全可以把函数当对象来用。其实，函数就是对象，只不过比一般的对象多了一个括号“()”操作符，这个操作符用来执行函数的逻辑。即，函数本身还可以被调用，一般对象却不可以被调用，除此之外完全相同。请看下面的代码：\n\n```javascript\nfunction Sing() {\n    with(arguments.callee)\n        alert(author + \"：\" + poem);\n};\nSing.author = \"李白\";\nSing.poem = \"汉家秦地月，流影照明妃。一上玉关道，天涯去不归\";\nSing();\nSing.author = \"李战\";\nSing.poem = \"日出汉家天，月落阴山前。女儿琵琶怨，已唱三千年\";\nSing();\n```\n\n在这段代码中，Sing函数被定义后，又给Sing函数动态地增加了author和poem属性。将author和poem属性设为不同的作者和诗句，在调用Sing()时就能显示出不同的结果。这个示例用一种诗情画意的方式，让我们理解了JavaScript函数就是对象的本质，也感受到了JavaScript语言的优美。\n\n好了，以上的讲述，我们应该算理解了function类型的东西都是和object类型一样的东西，这种东西被我们称为“对象”。我们的确可以这样去看待这些“对象”，因为它们既有“属性”也有“方法”嘛。但下面的代码又会让我们产生新的疑惑：\n\n```javascript\nvar anObject = {};  //一个对象\nanObject.aProperty = \"Property of object\";  //对象的一个属性\nanObject.aMethod = function(){alert(\"Method of object\")}; //对象的一个方法\n//主要看下面：\nalert(anObject[\"aProperty\"]);   //可以将对象当数组以属性名作为下标来访问属性\nanObject[\"aMethod\"]();          //可以将对象当数组以方法名作为下标来调用方法\nfor( var s in anObject)           //遍历对象的所有属性和方法进行迭代化处理\n    alert(s + \" is a \" + typeof(anObject[s]));\n```\n\n同样对于function类型的对象也是一样：\n\n```javascript\nvar aFunction = function() {};  //一个函数\naFunction.aProperty = \"Property of function\";  //函数的一个属性\naFunction.aMethod = function(){alert(\"Method of function\")}; //函数的一个方法\n//主要看下面：\nalert(aFunction[\"aProperty\"]);   //可以将函数当数组以属性名作为下标来访问属性\naFunction[\"aMethod\"]();          //可以将函数当数组以方法名作为下标来调用方法\nfor( var s in aFunction)         //遍历函数的所有属性和方法进行迭代化处理\n    alert(s + \" is a \" + typeof(aFunction[s]));\n```\n\n是的，对象和函数可以象数组一样，用属性名或方法名作为下标来访问并处理。那么，它到底应该算是数组呢，还是算对象？\n\n我们知道，数组应该算是线性数据结构，线性数据结构一般有一定的规律，适合进行统一的批量迭代操作等，有点像波。而对象是离散数据结构，适合描述分散的和个性化的东西，有点像粒子。因此，我们也可以这样问：JavaScript里的对象到底是波还是粒子？\n\n如果存在对象量子论，那么答案一定是：波粒二象性！\n\n因此，JavaScript里的函数和对象既有对象的特征也有数组的特征。这里的数组被称为“字典”，一种可以任意伸缩的名称值对儿的集合。其实， object和function的内部实现就是一个字典结构，但这种字典结构却通过严谨而精巧的语法表现出了丰富的外观。正如量子力学在一些地方用粒子来解释和处理问题，而在另一些地方却用波来解释和处理问题。你也可以在需要的时候，自由选择用对象还是数组来解释和处理问题。只要善于把握JavaScript的这些奇妙特性，就可以编写出很多简洁而强大的代码来。\n\n\n## 放下对象\n\n我们再来看看function与object的超然结合吧。\n\n在面向对象的编程世界里，数据与代码的有机结合就构成了对象的概念。自从有了对象，编程世界就被划分成两部分，一个是对象内的世界，一个是对象外的世界。对象天生具有自私的一面，外面的世界未经允许是不可访问对象内部的。对象也有大方的一面，它对外提供属性和方法，也为他人服务。不过，在这里我们要谈到一个有趣的问题，就是“对象的自我意识”。\n\n什么？没听错吧？对象有自我意识？\n\n可能对许多程序员来说，这的确是第一次听说。不过，请君看看C++、C#和Java的this，DELPHI的self，还有VB的me，或许你会恍然大悟！当然，也可能只是说句“不过如此”而已。\n\n然而，就在对象将世界划分为内外两部分的同时，对象的“自我”也就随之产生。“自我意识”是生命的最基本特征！正是由于对象这种强大的生命力，才使得编程世界充满无限的生机和活力。\n\n但对象的“自我意识”在带给我们快乐的同时也带来了痛苦和烦恼。我们给对象赋予了太多欲望，总希望它们能做更多的事情。然而，对象的自私使得它们互相争抢系统资源，对象的自负让对象变得复杂和臃肿，对象的自欺也往往带来挥之不去的错误和异常。我们为什么会有这么多的痛苦和烦恼呢？\n\n为此，有一个人，在对象树下，整整想了九九八十一天，终于悟出了生命的痛苦来自于欲望，但究其欲望的根源是来自于自我意识。于是他放下了“自我”，在对象树下成了佛，从此他开始普度众生，传播真经。他的名字就叫释迦摩尼，而《JavaScript真经》正是他所传经书中的一本。\n\nJavaScript中也有this，但这个this却与C++、C#或Java等语言的this不同。一般编程语言的this就是对象自己，而 JavaScript的this却并不一定！this可能是我，也可能是你，可能是他，反正是我中有你，你中有我，这就不能用原来的那个“自我”来理解 JavaScript这个this的含义了。为此，我们必须首先放下原来对象的那个“自我”。\n\n我们来看下面的代码：\n\n```javascript\nfunction WhoAmI() {       //定义一个函数WhoAmI\n    alert(\"I'm \" + this.name + \" of \" + typeof(this));\n};\n\nWhoAmI();   //此时是this当前这段代码的全局对象，在浏览器中就是window对象，其name属性为空字符串。输出：I'm of object\n\nvar BillGates = {name: \"Bill Gates\"};\nBillGates.WhoAmI = WhoAmI;  //将函数WhoAmI作为BillGates的方法。\nBillGates.WhoAmI();         //此时的this是BillGates。输出：I'm Bill Gates of object\n\nvar SteveJobs = {name: \"Steve Jobs\"};\nSteveJobs.WhoAmI = WhoAmI;  //将函数WhoAmI作为SteveJobs的方法。\nSteveJobs.WhoAmI();         //此时的this是SteveJobs。输出：I'm Steve Jobs of object\n\nWhoAmI.call(BillGates);     //直接将BillGates作为this，调用WhoAmI。输出：I'm Bill Gates of object\nWhoAmI.call(SteveJobs);     //直接将SteveJobs作为this，调用WhoAmI。输出：I'm Steve Jobs of object\n\nBillGates.WhoAmI.call(SteveJobs);   //将SteveJobs作为this，却调用BillGates的WhoAmI方法。输出：I'm Steve Jobs of object\nSteveJobs.WhoAmI.call(BillGates);   //将BillGates作为this，却调用SteveJobs的WhoAmI方法。输出：I'm Bill Gates of object\n\nWhoAmI.WhoAmI = WhoAmI;     //将WhoAmI函数设置为自身的方法。\nWhoAmI.name = \"WhoAmI\";\nWhoAmI.WhoAmI();            //此时的this是WhoAmI函数自己。输出：I'm WhoAmI of function\n    \n({name: \"nobody\", WhoAmI: WhoAmI}).WhoAmI();    //临时创建一个匿名对象并设置属性后调用WhoAmI方法。输出：I'm nobody of object\n```\n\n从上面的代码可以看出，同一个函数可以从不同的角度来调用，this并不一定是函数本身所属的对象。this只是在任意对象和function元素结合时的一个概念，是种结合比起一般对象语言的默认结合更加灵活，显得更加超然和洒脱。\n\n在JavaScript函数中，你只能把this看成当前要服务的“这个”对象。this是一个特殊的内置参数，根据this参数，您可以访问到“这个”对象的属性和方法，但却不能给this参数赋值。在一般对象语言中，方法体代码中的this可以省略的，成员默认都首先是“自己”的。但JavaScript却不同，由于不存在“自我”，当访问“这个”对象时，this不可省略！\n\nJavaScript提供了传递this参数的多种形式和手段，其中，象BillGates.WhoAmI()和SteveJobs.WhoAmI()这种形式，是传递this参数最正规的形式，此时的this就是函数所属的对象本身。而大多数情况下，我们也几乎很少去采用那些借花仙佛的调用形式。但只我们要明白JavaScript的这个“自我”与其他编程语言的“自我”是不同的，这是一个放下了的“自我”，这就是JavaScript特有的世界观。\n\n\n## 对象素描\n\n已经说了许多了许多话题了，但有一个很基本的问题我们忘了讨论，那就是：怎样建立对象？\n\n在前面的示例中，我们已经涉及到了对象的建立了。我们使用了一种被称为JavaScript Object Notation(缩写JSON)的形式，翻译为中文就是“JavaScript对象表示法”。\n\nJSON为创建对象提供了非常简单的方法。例如，创建一个没有任何属性的对象：\n\n```javascript\nvar o = {};\n```\n\n创建一个对象并设置属性及初始值：\n\n```javascript\nvar person = {\n    name: \"Angel\",\n    age: 18,\n    married: false\n};\n```\n\n创建一个对象并设置属性和方法：\n\n```javascript\nvar speaker = {\n    text: \"Hello World\",\n    say: function(){\n        alert(this.text)\n    }\n};\n```\n\n创建一个更复杂的对象，嵌套其他对象和对象数组等：\n\n```javascript\nvar company = {\n    name: \"Microsoft\",\n    product: \"softwares\",\n    chairman: {name: \"Bill Gates\", age: 53, Married: true},\n    employees: [{name: \"Angel\", age: 26, Married: false}, {name: \"Hanson\", age: 32, Marred: true}],\n    readme: function() {document.write(this.name + \" product \" + this.product);}\n};\n```\n\nJSON的形式就是用大括“{}”号包括起来的项目列表，每一个项目间并用逗号“,”分隔，而项目就是用冒号“:”分隔的属性名和属性值。这是典型的字典表示形式，也再次表明了 JavaScript里的对象就是字典结构。不管多么复杂的对象，都可以被一句JSON代码来创建并赋值。\n\n其实，JSON就是JavaScript对象最好的序列化形式，它比XML更简洁也更省空间。对象可以作为一个JSON形式的字符串，在网络间自由传递和交换信息。而当需要将这个JSON字符串变成一个JavaScript对象时，只需要使用eval函数这个强大的数码转换引擎，就立即能得到一个JavaScript内存对象。正是由于JSON的这种简单朴素的天生丽质，才使得她在AJAX舞台上成为璀璨夺目的明星。\n\nJavaScript就是这样，把面向对象那些看似复杂的东西，用及其简洁的形式表达出来。卸下对象浮华的浓妆，还对象一个眉目清晰！\n\n\n## 构造对象\n\n好了，接下我们来讨论一下对象的另一种创建方法。\n\n除JSON外，在JavaScript中我们可以使用new操作符结合一个函数的形式来创建对象。例如：\n\n```javascript\nfunction MyFunc() {};         //定义一个空函数\nvar anObj = new MyFunc();  //使用new操作符，借助MyFun函数，就创建了一个对象\n```\n\n\nJavaScript的这种创建对象的方式可真有意思，如何去理解这种写法呢？\n \n其实，可以把上面的代码改写成这种等价形式：\n\n```javascript\nfunction MyFunc(){};\nvar anObj = {};     //创建一个对象\nMyFunc.call(anObj); //将anObj对象作为this指针调用MyFunc函数\n```\n\n我们就可以这样理解，JavaScript先用new操作符创建了一个对象，紧接着就将这个对象作为this参数调用了后面的函数。其实，JavaScript内部就是这么做的，而且任何函数都可以被这样调用！但从 “anObj = new MyFunc()” 这种形式，我们又看到一个熟悉的身影，C++和C#不就是这样创建对象的吗？原来，条条大路通灵山，殊途同归啊！\n\n君看到此处也许会想，我们为什么不可以把这个MyFunc当作构造函数呢？恭喜你，答对了！JavaScript也是这么想的！请看下面的代码： \n\n```javascript\nfunction Person(name) {   //带参数的构造函数\n    this.name = name;   //将参数值赋给给this对象的属性\n    this.SayHello = function() {alert(\"Hello, I'm \" + this.name);};   //给this对象定义一个SayHello方法。\n};\nfunction Employee(name, salary) {     //子构造函数\n    Person.call(this, name);        //将this传给父构造函数\n    this.salary = salary;       //设置一个this的salary属性\n    this.ShowMeTheMoney = function() {alert(this.name + \" $\" + this.salary);};  //添加ShowMeTheMoney方法。\n};\n\nvar BillGates = new Person(\"Bill Gates\");   //用Person构造函数创建BillGates对象\nvar SteveJobs = new Employee(\"Steve Jobs\", 1234);   //用Empolyee构造函数创建SteveJobs对象\n\nBillGates.SayHello();   //显示：I'm Bill Gates\nSteveJobs.SayHello();   //显示：I'm Steve Jobs\nSteveJobs.ShowMeTheMoney();   //显示：Steve Jobs $1234\n\nalert(BillGates.constructor == Person);  //显示：true\nalert(SteveJobs.constructor == Employee);  //显示：true\n\nalert(BillGates.SayHello == SteveJobs.SayHello); //显示：false\n```\n\n这段代码表明，函数不但可以当作构造函数，而且还可以带参数，还可以为对象添加成员和方法。其中的第9行，Employee构造函数又将自己接收的this作为参数调用Person构造函数，这就是相当于调用基类的构造函数。第21、22行还表明这样一个意思：BillGates是由Person构造的，而SteveJobs是由Employee构造的。对象内置的constructor属性还指明了构造对象所用的具体函数！\n\n其实，如果你愿意把函数当作“类”的话，她就是“类”，因为她本来就有“类”的那些特征。难道不是吗？她生出的儿子各个都有相同的特征，而且构造函数也与类同名嘛！\n\n但要注意的是，用构造函数操作this对象创建出来的每一个对象，不但具有各自的成员数据，而且还具有各自的方法数据。换句话说，方法的代码体(体现函数逻辑的数据)在每一个对象中都存在一个副本。尽管每一个代码副本的逻辑是相同的，但对象们确实是各自保存了一份代码体。上例中的最后一句说明了这一实事，这也解释了JavaScript中的函数就是对象的概念。\n\n同一类的对象各自有一份方法代码显然是一种浪费。在传统的对象语言中，方法函数并不象JavaScript那样是个对象概念。即使也有象函数指针、方法指针或委托那样的变化形式，但其实质也是对同一份代码的引用。一般的对象语言很难遇到这种情况。\n\n不过，JavaScript语言有大的灵活性。我们可以先定义一份唯一的方法函数体，并在构造this对象时使用这唯一的函数对象作为其方法，就能共享方法逻辑。例如：\n\n\n```javascript\nfunction SayHello() {     //先定义一份SayHello函数代码\n    alert(\"Hello, I'm \" + this.name);\n};\n\nfunction Person(name) {   //带参数的构造函数\n    this.name = name;   //将参数值赋给给this对象的属性\n    this.SayHello = SayHello;   //给this对象SayHello方法赋值为前面那份SayHello代码。\n};\n\nvar BillGates = new Person(\"Bill Gates\");   //创建BillGates对象\nvar SteveJobs = new Person(\"Steve Jobs\");   //创建SteveJobs对象\n\nalert(BillGates.SayHello == SteveJobs.SayHello); //显示：true\n```\n\n其中，最后一行的输出结果表明两个对象确实共享了一个函数对象。虽然，这段程序达到了共享了一份方法代码的目的，但却不怎么优雅。因为，定义SayHello方法时反映不出其与Person类的关系。“优雅”这个词用来形容代码，也不知道是谁先提出来的。不过，这个词反映了程序员已经从追求代码的正确、高效、可靠和易读等基础上，向着追求代码的美观感觉和艺术境界的层次发展，程序人生又多了些浪漫色彩。\n\n显然，JavaScript早想到了这一问题，她的设计者们为此提供了一个有趣的prototype概念。\n\n\n## 初看原型\n\nprototype源自法语，软件界的标准翻译为“原型”，代表事物的初始形态，也含有模型和样板的意义。JavaScript中的prototype概念恰如其分地反映了这个词的内含，我们不能将其理解为C++的prototype那种预先声明的概念。\n\nJavaScript的所有function类型的对象都有一个prototype属性。这个prototype属性本身又是一个object类型的对象，因此我们也可以给这个prototype对象添加任意的属性和方法。既然prototype是对象的“原型”，那么由该函数构造出来的对象应该都会具有这个“原型”的特性。事实上，在构造函数的prototype上定义的所有属性和方法，都是可以通过其构造的对象直接访问和调用的。也可以这么说，prototype提供了一群同类对象共享属性和方法的机制。\n\n我们先来看看下面的代码：\n\n```javascript\nfunction Person(name) {\n    this.name = name;   //设置对象属性，每个对象各自一份属性数据\n};\n\nPerson.prototype.SayHello = function()  //给Person函数的prototype添加SayHello方法。\n{\n    alert(\"Hello, I'm \" + this.name);\n}\n\nvar BillGates = new Person(\"Bill Gates\");   //创建BillGates对象\nvar SteveJobs = new Person(\"Steve Jobs\");   //创建SteveJobs对象\n\nBillGates.SayHello();   //通过BillGates对象直接调用到SayHello方法\nSteveJobs.SayHello();   //通过SteveJobs对象直接调用到SayHello方法\n\nalert(BillGates.SayHello == SteveJobs.SayHello); //因为两个对象是共享prototype的SayHello，所以显示：true\n```\n\n程序运行的结果表明，构造函数的prototype上定义的方法确实可以通过对象直接调用到，而且代码是共享的。显然，把方法设置到prototype的写法显得优雅多了，尽管调用形式没有变，但逻辑上却体现了方法与类的关系，相对前面的写法，更容易理解和组织代码。\n\n那么，对于多层次类型的构造函数情况又如何呢？\n\n我们再来看下面的代码：\n\n```javascript\nfunction Person(name) {   //基类构造函数\n    this.name = name;\n};\n\nPerson.prototype.SayHello = function() {  //给基类构造函数的prototype添加方法\n    alert(\"Hello, I'm \" + this.name);\n};\n\nfunction Employee(name, salary) { //子类构造函数\n    Person.call(this, name);    //调用基类构造函数\n    this.salary = salary;\n};\n\nEmployee.prototype = new Person();  //建一个基类的对象作为子类原型的原型，这里很有意思\n\nEmployee.prototype.ShowMeTheMoney = function() {  //给子类添构造函数的prototype添加方法\n    alert(this.name + \" $\" + this.salary);\n};\n\nvar BillGates = new Person(\"Bill Gates\");   //创建基类Person的BillGates对象\nvar SteveJobs = new Employee(\"Steve Jobs\", 1234);   //创建子类Employee的SteveJobs对象\n\nBillGates.SayHello();       //通过对象直接调用到prototype的方法\nSteveJobs.SayHello();       //通过子类对象直接调用基类prototype的方法，关注！\nSteveJobs.ShowMeTheMoney(); //通过子类对象直接调用子类prototype的方法\n\nalert(BillGates.SayHello == SteveJobs.SayHello); //显示：true，表明prototype的方法是共享的\n```\n\n这段代码的第17行，构造了一个基类的对象，并将其设为子类构造函数的prototype，这是很有意思的。这样做的目的就是为了第28行，通过子类对象也可以直接调用基类prototype的方法。为什么可以这样呢？\n\n原来，在JavaScript中，prototype不但能让对象共享自己财富，而且prototype还有寻根问祖的天性，从而使得先辈们的遗产可以代代相传。当从一个对象那里读取属性或调用方法时，如果该对象自身不存在这样的属性或方法，就会去自己关联的prototype对象那里寻找；如果prototype没有，又会去prototype自己关联的前辈prototype那里寻找，直到找到或追溯过程结束为止。\n\n在JavaScript内部，对象的属性和方法追溯机制是通过所谓的prototype链来实现的。当用new操作符构造对象时，也会同时将构造函数的prototype对象指派给新创建的对象，成为该对象内置的原型对象。对象内置的原型对象应该是对外不可见的，尽管有些浏览器(如Firefox)可以让我们访问这个内置原型对象，但并不建议这样做。内置的原型对象本身也是对象，也有自己关联的原型对象，这样就形成了所谓的原型链。\n\n在原型链的最末端，就是Object构造函数prototype属性指向的那一个原型对象。这个原型对象是所有对象的最老祖先，这个老祖宗实现了诸如toString等所有对象天生就该具有的方法。其他内置构造函数，如Function, Boolean, String, Date和RegExp等的prototype都是从这个老祖宗传承下来的，但他们各自又定义了自身的属性和方法，从而他们的子孙就表现出各自宗族的那些特征。\n\n这不就是“继承”吗？是的，这就是“继承”，是JavaScript特有的“原型继承”。\n\n“原型继承”是慈祥而又严厉的。原形对象将自己的属性和方法无私地贡献给孩子们使用，也并不强迫孩子们必须遵从，允许一些顽皮孩子按自己的兴趣和爱好独立行事。从这点上看，原型对象是一位慈祥的母亲。然而，任何一个孩子虽然可以我行我素，但却不能动原型对象既有的财产，因为那可能会影响到其他孩子的利益。从这一点上看，原型对象又象一位严厉的父亲。我们来看看下面的代码就可以理解这个意思了：\n\n\n```javascript\nfunction Person(name) {\n    this.name = name;\n};\n\nPerson.prototype.company = \"Microsoft\"; //原型的属性\n\nPerson.prototype.SayHello = function()  //原型的方法\n{\n    alert(\"Hello, I'm \" + this.name + \" of \" + this.company);\n};\n\nvar BillGates = new Person(\"Bill Gates\");\nBillGates.SayHello();   //由于继承了原型的东西，规规矩矩输出：Hello, I'm Bill Gates\n\nvar SteveJobs = new Person(\"Steve Jobs\");\nSteveJobs.company = \"Apple\";    //设置自己的company属性，掩盖了原型的company属性\nSteveJobs.SayHello = function() //实现了自己的SayHello方法，掩盖了原型的SayHello方法\n{\n    alert(\"Hi, \" + this.name + \" like \" + this.company + \", ha ha ha \");\n};\n\nSteveJobs.SayHello();   //都是自己覆盖的属性和方法，输出：Hi, Steve Jobs like Apple, ha ha ha \n\nBillGates.SayHello();   //SteveJobs的覆盖没有影响原型对象，BillGates还是按老样子输出\n```\n\n对象可以掩盖原型对象的那些属性和方法，一个构造函数原型对象也可以掩盖上层构造函数原型对象既有的属性和方法。这种掩盖其实只是在对象自己身上创建了新的属性和方法，只不过这些属性和方法与原型对象的那些同名而已。JavaScript就是用这简单的掩盖机制实现了对象的“多态”性，与静态对象语言的虚函数和重载(override)概念不谋而合。\n\n然而，比静态对象语言更神奇的是，我们可以随时给原型对象动态添加新的属性和方法，从而动态地扩展基类的功能特性。这在静态对象语言中是很难想象的。我们来看下面的代码：\n\n```javascript\nfunction Person(name) {\n    this.name = name;\n};\n\nPerson.prototype.SayHello = function()  //建立对象前定义的方法\n{\n    alert(\"Hello, I'm \" + this.name);\n};\n\nvar BillGates = new Person(\"Bill Gates\");   //建立对象\n\nBillGates.SayHello();\n\nPerson.prototype.Retire = function()    //建立对象后再动态扩展原型的方法\n{\n    alert(\"Poor \" + this.name + \", bye bye!\");\n};\n\nBillGates.Retire(); //动态扩展的方法即可被先前建立的对象立即调用\n```\n\n阿弥佗佛，原型继承竟然可以玩出有这样的法术！\n\n\n## 原型扩展\n\n 想必君的悟性极高，可能你会这样想：如果在JavaScript内置的那些如Object和Function等函数的prototype上添加些新的方法和属性，是不是就能扩展JavaScript的功能呢？\n\n那么，恭喜你，你得到了！\n\n在AJAX技术迅猛发展的今天，许多成功的AJAX项目的JavaScript运行库都大量扩展了内置函数的prototype功能。比如微软的ASP.NET AJAX，就给这些内置函数及其prototype添加了大量的新特性，从而增强了JavaScript的功能。\n\n我们来看一段摘自MicrosoftAjax.debug.js中的代码：\n\n```javascript\nString.prototype.trim = function String$trim() {\n    if (arguments.length !== 0) throw Error.parameterCount();\n    return this.replace(/^\\s+|\\s+$/g, '');\n}\n```\n\n这段代码就是给内置String函数的prototype扩展了一个trim方法，于是所有的String类对象都有了trim方法了。有了这个扩展，今后要去除字符串两段的空白，就不用再分别处理了，因为任何字符串都有了这个扩展功能，只要调用即可，真的很方便。\n\n当然，几乎很少有人去给Object的prototype添加方法，因为那会影响到所有的对象，除非在你的架构中这种方法的确是所有对象都需要的。\n\n前两年，微软在设计AJAX类库的初期，用了一种被称为“闭包”(closure)的技术来模拟“类”。其大致模型如下：\n\n```javascript\nfunction Person(firstName, lastName, age){\n    //私有变量：\n    var _firstName = firstName;\n    var _lastName = lastName;\n\n    //公共变量:\n    this.age = age;\n\n    //方法：\n    this.getName = function()\n    {\n        return(firstName + \" \" + lastName);\n    };\n    this.SayHello = function()\n    {\n        alert(\"Hello, I'm \" + firstName + \" \" + lastName);\n    };\n};\n\nvar BillGates = new Person(\"Bill\", \"Gates\", 53);\nvar SteveJobs = new Person(\"Steve\", \"Jobs\", 53);\n\nBillGates.SayHello();\nSteveJobs.SayHello();\nalert(BillGates.getName() + \" \" + BillGates.age);\nalert(BillGates.firstName);     //这里不能访问到私有变量\n```\n\n很显然，这种模型的类描述特别象C#语言的描述形式，在一个构造函数里依次定义了私有成员、公共属性和可用的方法，显得非常优雅嘛。特别是“闭包”机制可以模拟对私有成员的保护机制，做得非常漂亮。\n\n所谓的“闭包”，就是在构造函数体内定义另外的函数作为目标对象的方法函数，而这个对象的方法函数反过来引用外层外层函数体中的临时变量。这使得只要目标对象在生存期内始终能保持其方法，就能间接保持原构造函数体当时用到的临时变量值。尽管最开始的构造函数调用已经结束，临时变量的名称也都消失了，但在目标对象的方法内却始终能引用到该变量的值，而且该值只能通这种方法来访问。即使再次调用相同的构造函数，但只会生成新对象和方法，新的临时变量只是对应新的值，和上次那次调用的是各自独立的。的确很巧妙！\n\n但是前面我们说过，给每一个对象设置一份方法是一种很大的浪费。还有，“闭包”这种间接保持变量值的机制，往往会给JavaSript的垃圾回收器制造难题。特别是遇到对象间复杂的循环引用时，垃圾回收的判断逻辑非常复杂。无独有偶，IE浏览器早期版本确实存在JavaSript垃圾回收方面的内存泄漏问题。再加上“闭包”模型在性能测试方面的表现不佳，微软最终放弃了“闭包”模型，而改用“原型”模型。正所谓“有得必有失”嘛。\n\n原型模型需要一个构造函数来定义对象的成员，而方法却依附在该构造函数的原型上。大致写法如下：\n\n```javascript\n//定义构造函数\nfunction Person(name) {\n    this.name = name;   //在构造函数中定义成员\n};\n\n//方法定义到构造函数的prototype上\nPerson.prototype.SayHello = function() {\n    alert(\"Hello, I'm \" + this.name);\n};    \n\n//子类构造函数\nfunction Employee(name, salary) {\n    Person.call(this, name);    //调用上层构造函数\n    this.salary = salary;       //扩展的成员\n};\n\n//子类构造函数首先需要用上层构造函数来建立prototype对象，实现继承的概念\nEmployee.prototype = new Person()   //只需要其prototype的方法，此对象的成员没有任何意义！\n\n//子类方法也定义到构造函数之上\nEmployee.prototype.ShowMeTheMoney = function()\n{\n    alert(this.name + \" $\" + this.salary);\n};\n\nvar BillGates = new Person(\"Bill Gates\");\nBillGates.SayHello();    \n\nvar SteveJobs = new Employee(\"Steve Jobs\", 1234);\nSteveJobs.SayHello();\nSteveJobs.ShowMeTheMoney();\n```\n\n原型类模型虽然不能模拟真正的私有变量，而且也要分两部分来定义类，显得不怎么“优雅”。不过，对象间的方法是共享的，不会遇到垃圾回收问题，而且性能优于“闭包”模型。正所谓“有失必有得”嘛。\n\n在原型模型中，为了实现类继承，必须首先将子类构造函数的prototype设置为一个父类的对象实例。创建这个父类对象实例的目的就是为了构成原型链，以起到共享上层原型方法作用。但创建这个实例对象时，上层构造函数也会给它设置对象成员，这些对象成员对于继承来说是没有意义的。虽然，我们也没有给构造函数传递参数，但确实创建了若干没有用的成员，尽管其值是undefined，这也是一种浪费啊。\n\n唉！世界上没有完美的事情啊！\n\n## 原型真谛\n\n正当我们感概万分时，天空中一道红光闪过，祥云中出现了观音菩萨。只见她手持玉净瓶，轻拂翠柳枝，洒下几滴甘露，顿时让JavaScript又添新的灵气。\n\n观音洒下的甘露在JavaScript的世界里凝结成块，成为了一种称为“语法甘露”的东西。这种语法甘露可以让我们编写的代码看起来更象对象语言。\n\n要想知道这“语法甘露”为何物，就请君侧耳细听。\n\n在理解这些语法甘露之前，我们需要重新再回顾一下JavaScript构造对象的过程。\n\n我们已经知道，用 var anObject = new aFunction() 形式创建对象的过程实际上可以分为三步：第一步是建立一个新对象；第二步将该对象内置的原型对象设置为构造函数prototype引用的那个原型对象；第三步就是将该对象作为this参数调用构造函数，完成成员设置等初始化工作。对象建立之后，对象上的任何访问和操作都只与对象自身及其原型链上的那串对象有关，与构造函数再扯不上关系了。换句话说，构造函数只是在创建对象时起到介绍原型对象和初始化对象两个作用。\n\n那么，我们能否自己定义一个对象来当作原型，并在这个原型上描述类，然后将这个原型设置给新创建的对象，将其当作对象的类呢？我们又能否将这个原型中的一个方法当作构造函数，去初始化新建的对象呢？例如，我们定义这样一个原型对象：\n\n```javascript\nvar Person = {  //定义一个对象来作为原型类\n    Create: function(name, age) {  //这个当构造函数\n        this.name = name;\n        this.age = age;\n    },\n    SayHello: function() {  //定义方法\n        alert(\"Hello, I'm \" + this.name);\n    },\n    HowOld: function() {  //定义方法\n        alert(this.name + \" is \" + this.age + \" years old.\");\n    }\n};\n```\n\n这个JSON形式的写法多么象一个C#的类啊！既有构造函数，又有各种方法。如果可以用某种形式来创建对象，并将对象的内置的原型设置为上面这个“类”对象，不就相当于创建该类的对象了吗？\n\n但遗憾的是，我们几乎不能访问到对象内置的原型属性！尽管有些浏览器可以访问到对象的内置原型，但这样做的话就只能限定了用户必须使用那种浏览器。这也几乎不可行。\n\n那么，我们可不可以通过一个函数对象来做媒介，利用该函数对象的prototype属性来中转这个原型，并用new操作符传递给新建的对象呢？\n\n其实，象这样的代码就可以实现这一目标：\n\n```javascript\nfunction anyfunc(){};           //定义一个函数躯壳\nanyfunc.prototype = Person;     //将原型对象放到中转站prototype\nvar BillGates = new anyfunc();  //新建对象的内置原型将是我们期望的原型对象\n```\n\n不过，这个anyfunc函数只是一个躯壳，在使用过这个躯壳之后它就成了多余的东西了，而且这和直接使用构造函数来创建对象也没啥不同，有点不爽。\n\n可是，如果我们将这些代码写成一个通用函数，而那个函数躯壳也就成了函数内的函数，这个内部函数不就可以在外层函数退出作用域后自动消亡吗？而且，我们可以将原型对象作为通用函数的参数，让通用函数返回创建的对象。我们需要的就是下面这个形式：\n\n```javascript\nfunction New(aClass, aParams) {   //通用创建函数\n    function new_()     //定义临时的中转函数壳\n    {\n        aClass.Create.apply(this, aParams);   //调用原型中定义的的构造函数，中转构造逻辑及构造参数\n    };\n    new_.prototype = aClass;    //准备中转原型对象\n    return new new_();          //返回建立最终建立的对象\n};\n\nvar Person = {        //定义的类\n    Create: function(name, age) {\n    \n        this.name = name;\n        this.age = age;\n    },\n    SayHello: function() {\n    \n        alert(\"Hello, I'm \" + this.name);\n    },\n    HowOld: function() {\n        alert(this.name + \" is \" + this.age + \" years old.\");\n    }\n};\n\nvar BillGates = New(Person, [\"Bill Gates\", 53]);  //调用通用函数创建对象，并以数组形式传递构造参数\nBillGates.SayHello();\nBillGates.HowOld();\n\nalert(BillGates.constructor == Object);     //输出：true\n```\n\n这里的通用函数New()就是一个“语法甘露”！这个语法甘露不但中转了原型对象，还中转了构造函数逻辑及构造参数。\n\n有趣的是，每次创建完对象退出New函数作用域时，临时的 new_ 函数对象会被自动释放。由于 new_ 的prototype属性被设置为新的原型对象，其原来的原型对象和new_之间就已解开了引用链，临时函数及其原来的原型对象都会被正确回收了。上面代码的最后一句证明，新创建的对象的constructor属性返回的是Object函数。其实新建的对象自己及其原型里没有constructor属性，那返回的只是最顶层原型对象的构造函数，即Object。\n\n有了New这个语法甘露，类的定义就很像C#那些静态对象语言的形式了，这样的代码显得多么文静而优雅啊！\n\n当然，这个代码仅仅展示了“语法甘露”的概念。我们还需要多一些的语法甘露，才能实现用简洁而优雅的代码书写类层次及其继承关系。好了，我们再来看一个更丰富的示例吧：\n\n```javascript\n//语法甘露：\nvar object =    //定义小写的object基本类，用于实现最基础的方法等\n{\n    isA: function(aType)   //一个判断类与类之间以及对象与类之间关系的基础方法\n    {\n        var self = this;\n        while(self)\n        {\n            if (self == aType)\n                return true;\n            self = self.Type;\n        };\n        return false;\n    }\n};\n\nfunction Class(aBaseClass, aClassDefine)    //创建类的函数，用于声明类及继承关系\n{\n    function class_()   //创建类的临时函数壳\n    {\n        this.Type = aBaseClass;    //我们给每一个类约定一个Type属性，引用其继承的类\n        for(var member in aClassDefine)\n            this[member] = aClassDefine[member];    //复制类的全部定义到当前创建的类\n    };\n    class_.prototype = aBaseClass;\n    return new class_();\n};\n\nfunction New(aClass, aParams)   //创建对象的函数，用于任意类的对象创建\n{\n    function new_()     //创建对象的临时函数壳\n    {\n        this.Type = aClass;    //我们也给每一个对象约定一个Type属性，据此可以访问到对象所属的类\n        if (aClass.Create)\n            aClass.Create.apply(this, aParams);   //我们约定所有类的构造函数都叫Create，这和DELPHI比较相似\n    };\n    new_.prototype = aClass;\n    return new new_();\n};\n\n//语法甘露的应用效果：    \nvar Person = Class(object,      //派生至object基本类\n{\n    Create: function(name, age)\n    {\n        this.name = name;\n        this.age = age;\n    },\n    SayHello: function()\n    {\n        alert(\"Hello, I'm \" + this.name + \", \" + this.age + \" years old.\");\n    }\n});\n\nvar Employee = Class(Person,    //派生至Person类，是不是和一般对象语言很相似？\n{\n    Create: function(name, age, salary)\n    {\n        Person.Create.call(this, name, age);  //调用基类的构造函数\n        this.salary = salary;\n    },\n    ShowMeTheMoney: function()\n    {\n        alert(this.name + \" $\" + this.salary);\n    }\n});\n\nvar BillGates = New(Person, [\"Bill Gates\", 53]);\nvar SteveJobs = New(Employee, [\"Steve Jobs\", 53, 1234]);\nBillGates.SayHello();\nSteveJobs.SayHello();\nSteveJobs.ShowMeTheMoney();\n\nvar LittleBill = New(BillGates.Type, [\"Little Bill\", 6]);   //根据BillGate的类型创建LittleBill\nLittleBill.SayHello();\n\nalert(BillGates.isA(Person));       //true\nalert(BillGates.isA(Employee));     //false\nalert(SteveJobs.isA(Person));       //true\nalert(Person.isA(Employee));        //false\nalert(Employee.isA(Person));        //true\n```\n\n“语法甘露”不用太多，只要那么一点点，就能改观整个代码的易读性和流畅性，从而让代码显得更优雅。有了这些语法甘露，JavaScript就很像一般对象语言了，写起代码了感觉也就爽多了！\n\n令人高兴的是，受这些甘露滋养的JavaScript程序效率会更高。因为其原型对象里既没有了毫无用处的那些对象级的成员，而且还不存在constructor属性体，少了与构造函数间的牵连，但依旧保持了方法的共享性。这让JavaScript在追溯原型链和搜索属性及方法时，少费许多工夫啊。\n\n我们就把这种形式称为“甘露模型”吧！其实，这种“甘露模型”的原型用法才是符合prototype概念的本意，才是的JavaScript原型的真谛！\n\n想必微软那些设计AJAX架构的工程师看到这个甘露模型时，肯定后悔没有早点把AJAX部门从美国搬到咱中国的观音庙来，错过了观音菩萨的点化。当然，我们也只能是在代码的示例中，把Bill Gates当作对象玩玩，真要让他放弃上帝转而皈依我佛肯定是不容易的，机缘未到啊！如果哪天你在微软新出的AJAX类库中看到这种甘露模型，那才是真正的缘分！\n\n\n## 编程的快乐\n\n在软件工业迅猛发展的今天，各式各样的编程语言层出不穷，新语言的诞生，旧语言的演化，似乎已经让我们眼花缭乱。为了适应面向对象编程的潮流，JavaScript语言也在向完全面向对象的方向发展，新的JavaScript标准已经从语义上扩展了许多面向对象的新元素。与此相反的是，许多静态的对象语言也在向JavaScript的那种简洁而幽雅的方向发展。例如，新版本的C#语言就吸收了JSON那样的简洁表示法，以及一些其他形式的JavaScript特性。\n\n我们应该看到，随着RIA(强互联应用)的发展和普及，AJAX技术也将逐渐淡出江湖，JavaScript也将最终消失或演化成其他形式的语言。但不管编程语言如何发展和演化，编程世界永远都会在“数据”与“代码”这千丝万缕的纠缠中保持着无限的生机。只要我们能看透这一点，我们就能很容易地学习和理解软件世界的各种新事物。不管是已熟悉的过程式编程，还是正在发展的函数式编程，以及未来量子纠缠态的大规模并行式编程，我们都有足够的法力来化解一切复杂的难题。\n\n佛最后淡淡地说：只要我们放下那些表面的“类”，放下那些对象的“自我”，就能达到一种“对象本无根，类型亦无形”的境界，从而将自我融入到整个宇宙的生命轮循环中。我们将没有自我，也没有自私的欲望，你就是我，我就是你，你中有我，我中有你。这时，我们再看这生机勃勃的编程世界时，我们的内心将自然生起无限的慈爱之心，这种慈爱之心不是虚伪而是真诚的。关爱他人就是关爱自己，就是关爱这世界中的一切。那么，我们的心是永远快乐的，我们的程序是永远快乐的，我们的类是永远快乐的，我们的对象也是永远快乐的。这就是编程的极乐！\n\n说到这里，在座的比丘都犹如醍醐灌顶，心中豁然开朗。看看左边这位早已喜不自禁，再看看右边那位也是心花怒放。\n\n蓦然回首时，唯见君拈花微笑...\n\n> 原著：李战(leadzen).深圳 2008-2-23\n> [悟透JavaScript](http://www.cnblogs.com/leadzen/archive/2008/02/25/1073404.html)","slug":"javascript-zen","published":1,"updated":"2017-04-07T06:56:39.417Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj17hdrr30000hkajgrruinny","content":"<blockquote>\n<p>转载：<a href=\"http://www.cnblogs.com/leadzen/archive/2008/02/25/1073404.html\" target=\"_blank\" rel=\"external\">悟透JavaScript</a></p>\n</blockquote>\n<h2 id=\"引子\"><a href=\"#引子\" class=\"headerlink\" title=\"引子\"></a>引子</h2><p>编程世界里只存在两种基本元素，一个是数据，一个是代码。编程世界就是在数据和代码千丝万缕的纠缠中呈现出无限的生机和活力。</p>\n<p>数据天生就是文静的，总想保持自己固有的本色；而代码却天生活泼，总想改变这个世界。</p>\n<p>你看，数据代码间的关系与物质能量间的关系有着惊人的相似。数据也是有惯性的，如果没有代码来施加外力，她总保持自己原来的状态。而代码就象能量，他存在的唯一目的，就是要努力改变数据原来的状态。在代码改变数据的同时，也会因为数据的抗拒而反过来影响或改变代码原有的趋势。甚至在某些情况下，数据可以转变为代码，而代码却又有可能被转变为数据，或许还存在一个类似E=MC2形式的数码转换方程呢。然而，就是在数据和代码间这种即矛盾又统一的运转中，总能体现出计算机世界的规律，这些规律正是我们编写的程序逻辑。</p>\n<p>不过，由于不同程序员有着不同的世界观，这些数据和代码看起来也就不尽相同。于是，不同世界观的程序员们运用各自的方法论，推动着编程世界的进化和发展。</p>\n<p>众所周知，当今最流行的编程思想莫过于面向对象编程的思想。为什么面向对象的思想能迅速风靡编程世界呢？因为面向对象的思想首次把数据和代码结合成统一体，并以一个简单的对象概念呈现给编程者。这一下子就将原来那些杂乱的算法与子程序，以及纠缠不清的复杂数据结构，划分成清晰而有序的对象结构，从而理清了数据与代码在我们心中那团乱麻般的结。我们又可以有一个更清晰的思维，在另一个思想高度上去探索更加浩瀚的编程世界了。</p>\n<p>在五祖弘忍讲授完《对象真经》之后的一天，他对众弟子们说：“经已讲完，想必尔等应该有所感悟，请各自写个偈子来看”。大弟子神秀是被大家公认为悟性最高的师兄，他的偈子写道：“身是对象树，心如类般明。朝朝勤拂拭，莫让惹尘埃！”。此偈一出，立即引起师兄弟们的轰动，大家都说写得太好了。只有火头僧慧能看后，轻轻地叹了口气，又随手在墙上写道：“对象本无根，类型亦无形。本来无一物，何处惹尘埃？”。然后摇了摇头，扬长而去。大家看了慧能的偈子都说：“写的什么乱七八糟的啊，看不懂”。师父弘忍看了神秀的诗偈也点头称赞，再看慧能的诗偈之后默然摇头。就在当天夜里，弘忍却悄悄把慧能叫到自己的禅房，将珍藏多年的软件真经传授于他，然后让他趁着月色连夜逃走…</p>\n<p>后来，慧能果然不负师父厚望，在南方开创了禅宗另一个广阔的天空。而慧能当年带走的软件真经中就有一本是《JavaScript真经》！</p>\n<h2 id=\"回归简单\"><a href=\"#回归简单\" class=\"headerlink\" title=\"回归简单\"></a>回归简单</h2><p>要理解JavaScript，你得首先放下对象和类的概念，回到数据和代码的本原。前面说过，编程世界只有数据和代码两种基本元素，而这两种元素又有着纠缠不清的关系。JavaScript就是把数据和代码都简化到最原始的程度。</p>\n<p>JavaScript中的数据很简洁的。简单数据只有 undefined, null, boolean, number和string这五种，而复杂数据只有一种，即object。这就好比中国古典的朴素唯物思想，把世界最基本的元素归为金木水火土，其他复杂的物质都是由这五种基本元素组成。</p>\n<p>JavaScript中的代码只体现为一种形式，就是function。</p>\n<p>注意：以上单词都是小写的，不要和Number, String, Object, Function等JavaScript内置函数混淆了。要知道，JavaScript语言是区分大小写的呀!</p>\n<p>任何一个JavaScript的标识、常量、变量和参数都只是unfined, null, bool, number, string, object 和 function类型中的一种，也就typeof返回值表明的类型。除此之外没有其他类型了。</p>\n<p>先说说简单数据类型吧。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"literal\">undefined</span></div><div class=\"line\"><span class=\"comment\">//代表一切未知的事物，啥都没有，无法想象，代码也就更无法去处理了。</span></div><div class=\"line\"><span class=\"comment\">//注意：typeof(undefined) 返回也是 undefined。</span></div><div class=\"line\"><span class=\"comment\">//可以将undefined赋值给任何变量或属性，但并不意味了清除了该变量，反而会因此多了一个属性。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"literal\">null</span></div><div class=\"line\"><span class=\"comment\">//有那么一个概念，但没有东西。无中似有，有中还无。虽难以想象，但已经可以用代码来处理了。</span></div><div class=\"line\"><span class=\"comment\">//注意：typeof(null)返回object，但null并非object，具有null值的变量也并非object。</span></div><div class=\"line\"></div><div class=\"line\">boolean</div><div class=\"line\"><span class=\"comment\">//是就是，非就非，没有疑义。对就对，错就错，绝对明确。既能被代码处理，也可以控制代码的流程。</span></div><div class=\"line\"></div><div class=\"line\">number</div><div class=\"line\"><span class=\"comment\">//线性的事物，大小和次序分明，多而不乱。便于代码进行批量处理，也控制代码的迭代和循环等。</span></div><div class=\"line\"><span class=\"comment\">//注意：typeof(NaN)和typeof(Infinity)都返回number 。</span></div><div class=\"line\"><span class=\"comment\">//NaN参与任何数值计算的结构都是NaN，而且 NaN != NaN 。</span></div><div class=\"line\"><span class=\"comment\">//Infinity / Infinity = NaN 。</span></div><div class=\"line\"></div><div class=\"line\">string</div><div class=\"line\"><span class=\"comment\">//面向人类的理性事物，而不是机器信号。人机信息沟通，代码据此理解人的意图等等，都靠它了。</span></div></pre></td></tr></table></figure>\n<p>简单类型都不是对象，JavaScript没有将对象化的能力赋予这些简单类型。直接被赋予简单类型常量值的标识符、变量和参数都不是一个对象。</p>\n<p>所谓“对象化”，就是可以将数据和代码组织成复杂结构的能力。JavaScript中只有object类型和function类型提供了对象化的能力。</p>\n<h2 id=\"没有类\"><a href=\"#没有类\" class=\"headerlink\" title=\"没有类\"></a>没有类</h2><p>object就是对象的类型。在JavaScript中不管多么复杂的数据和代码，都可以组织成object形式的对象。</p>\n<p>但JavaScript却没有 “类”的概念！</p>\n<p>对于许多面向对象的程序员来说，这恐怕是JavaScript中最难以理解的地方。是啊，几乎任何讲面向对象的书中，第一个要讲的就是“类”的概念，这可是面向对象的支柱。这突然没有了“类”，我们就象一下子没了精神支柱，感到六神无主。看来，要放下对象和类，达到“对象本无根，类型亦无形”的境界确实是件不容易的事情啊。</p>\n<p>这样，我们先来看一段JavaScript程序：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> life = &#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">for</span>(life.age = <span class=\"number\">1</span>; life.age &lt;= <span class=\"number\">3</span>; life.age++) &#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span>(life.age) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>: life.body = <span class=\"string\">\"卵细胞\"</span>;</div><div class=\"line\">                life.say = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;alert(<span class=\"keyword\">this</span>.age+<span class=\"keyword\">this</span>.body)&#125;;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>: life.tail = <span class=\"string\">\"尾巴\"</span>;</div><div class=\"line\">                life.gill = <span class=\"string\">\"腮\"</span>;</div><div class=\"line\">                life.body = <span class=\"string\">\"蝌蚪\"</span>;</div><div class=\"line\">                life.say = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;alert(<span class=\"keyword\">this</span>.age+<span class=\"keyword\">this</span>.body+<span class=\"string\">\"-\"</span>+<span class=\"keyword\">this</span>.tail+<span class=\"string\">\",\"</span>+<span class=\"keyword\">this</span>.gill)&#125;;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>: <span class=\"keyword\">delete</span> life.tail;</div><div class=\"line\">                <span class=\"keyword\">delete</span> life.gill;</div><div class=\"line\">                life.legs = <span class=\"string\">\"四条腿\"</span>;</div><div class=\"line\">                life.lung = <span class=\"string\">\"肺\"</span>;</div><div class=\"line\">                life.body = <span class=\"string\">\"青蛙\"</span>;</div><div class=\"line\">                life.say = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;alert(<span class=\"keyword\">this</span>.age+<span class=\"keyword\">this</span>.body+<span class=\"string\">\"-\"</span>+<span class=\"keyword\">this</span>.legs+<span class=\"string\">\",\"</span>+<span class=\"keyword\">this</span>.lung)&#125;;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    life.say();</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>这段JavaScript程序一开始产生了一个生命对象life，life诞生时只是一个光溜溜的对象，没有任何属性和方法。在第一次生命过程中，它有了一个身体属性body，并有了一个say方法，看起来是一个“卵细胞”。在第二次生命过程中，它又长出了“尾巴”和“腮”，有了tail和gill属性，显然它是一个“蝌蚪”。在第三次生命过程中，它的tail和gill属性消失了，但又长出了“四条腿”和“肺”，有了legs和lung属性，从而最终变成了“青蛙”。如果，你的想像力丰富的话，或许还能让它变成英俊的“王子”，娶个美丽的“公主”什么的。不过，在看完这段程序之后，请你思考一个问题：</p>\n<p>我们一定需要类吗？</p>\n<p>还记得儿时那个“小蝌蚪找妈妈”的童话吗？也许就在昨天晚，你的孩子刚好是在这个美丽的童话中进入梦乡的吧。可爱的小蝌蚪也就是在其自身类型不断演化过程中，逐渐变成了和妈妈一样的“类”，从而找到了自己的妈妈。这个童话故事中蕴含的编程哲理就是：对象的“类”是从无到有，又不断演化，最终又消失于无形之中的…</p>\n<p>“类”，的确可以帮助我们理解复杂的现实世界，这纷乱的现实世界也的确需要进行分类。但如果我们的思想被“类”束缚住了，“类”也就变成了“累”。想象一下，如果一个生命对象开始的时就被规定了固定的“类”，那么它还能演化吗？蝌蚪还能变成青蛙吗？还可以给孩子们讲小蝌蚪找妈妈的故事吗？</p>\n<p>所以，JavaScript中没有“类”，类已化于无形，与对象融为一体。正是由于放下了“类”这个概念，JavaScript的对象才有了其他编程语言所没有的活力。</p>\n<p>如果，此时你的内心深处开始有所感悟，那么你已经逐渐开始理解JavaScript的禅机了。</p>\n<h2 id=\"函数的魔力\"><a href=\"#函数的魔力\" class=\"headerlink\" title=\"函数的魔力\"></a>函数的魔力</h2><p>接下来，我们再讨论一下JavaScript函数的魔力吧。</p>\n<p>JavaScript的代码就只有function一种形式，function就是函数的类型。也许其他编程语言还有procedure或 method等代码概念，但在JavaScript里只有function一种形式。当我们写下一个函数的时候，只不过是建立了一个function类型的实体而已。</p>\n<p>请看下面的程序：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myfunc</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"hello\"</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">alert(<span class=\"keyword\">typeof</span>(myfunc));</div></pre></td></tr></table></figure>\n<p>这个代码运行之后可以看到typeof(myfunc)返回的是function。以上的函数写法我们称之为“定义式”的，如果我们将其改写成下面的“变量式”的，就更容易理解了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myfunc = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"hello\"</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">alert(<span class=\"keyword\">typeof</span>(myfunc));</div></pre></td></tr></table></figure>\n<p>这里明确定义了一个变量myfunc，它的初始值被赋予了一个function的实体。因此，typeof(myfunc)返回的也是function。其实，这两种函数的写法是等价的，除了一点细微差别，其内部实现完全相同。也就是说，我们写的这些JavaScript函数只是一个命了名的变量而已，其变量类型即为function，变量的值就是我们编写的函数代码体。</p>\n<p>聪明的你或许立即会进一步的追问：既然函数只是变量，那么变量就可以被随意赋值并用到任意地方啰？</p>\n<p>我们来看看下面的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myfunc = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"hello\"</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\">myfunc(); <span class=\"comment\">//第一次调用myfunc，输出hello</span></div><div class=\"line\"></div><div class=\"line\">myfunc = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"yeah\"</span>);</div><div class=\"line\">&#125;;    </div><div class=\"line\">myfunc(); <span class=\"comment\">//第二次调用myfunc，将输出yeah</span></div></pre></td></tr></table></figure>\n<p>这个程序运行的结果告诉我们：答案是肯定的！在第一次调用函数之后，函数变量又被赋予了新的函数代码体，使得第二次调用该函数时，出现了不同的输出。</p>\n<p>好了，我们又来把上面的代码改成第一种定义式的函数形式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myfunc</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"hello\"</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\">myfunc(); <span class=\"comment\">//这里调用myfunc，输出yeah而不是hello</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myfunc</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"yeah\"</span>);</div><div class=\"line\">&#125;;    </div><div class=\"line\">myfunc(); <span class=\"comment\">//这里调用myfunc，当然输出yeah</span></div></pre></td></tr></table></figure>\n<p>按理说，两个签名完全相同的函数，在其他编程语言中应该是非法的。但在JavaScript中，这没错。不过，程序运行之后却发现一个奇怪的现象：两次调用都只是最后那个函数里输出的值！显然第一个函数没有起到任何作用。这又是为什么呢？</p>\n<p>原来，JavaScript执行引擎并非一行一行地分析和执行程序，而是一段一段地分析执行的。而且，在同一段程序的分析执行中，定义式的函数语句会被提取出来优先执行。函数定义执行完之后，才会按顺序执行其他语句代码。也就是说，在第一次调用myfunc之前，第一个函数语句定义的代码逻辑，已被第二个函数定义语句覆盖了。所以，两次都调用都是执行最后一个函数逻辑了。</p>\n<p>如果把这个JavaScript代码分成两段，例如将它们写在一个html中，并用 <code>&lt;script/&gt;</code> 标签将其分成这样的两块：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myfunc</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">\"hello\"</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    myfunc(); <span class=\"comment\">//这里调用myfunc，输出hello</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myfunc</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">\"yeah\"</span>);</div><div class=\"line\">    &#125;;    </div><div class=\"line\">    myfunc(); <span class=\"comment\">//这里调用myfunc，输出yeah</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>这时，输出才是各自按顺序来的，也证明了JavaScript的确是一段段地执行的。</p>\n<p>一段代码中的定义式函数语句会优先执行，这似乎有点象静态语言的编译概念。所以，这一特征也被有些人称为：JavaScript的“预编译”。</p>\n<p>大多数情况下，我们也没有必要去纠缠这些细节问题。只要你记住一点：JavaScript里的代码也是一种数据，同样可以被任意赋值和修改的，而它的值就是代码的逻辑。只是，与一般数据不同的是，函数是可以被调用执行的。</p>\n<p>不过，如果JavaScript函数仅仅只有这点道行的话，这与C++的函数指针，DELPHI的方法指针，C#的委托相比，又有啥稀奇嘛！然而，JavaScript函数的神奇之处还体现在另外两个方面：一是函数function类型本身也具有对象化的能力，二是函数function与对象 object超然的结合能力。</p>\n<h2 id=\"奇妙的对象\"><a href=\"#奇妙的对象\" class=\"headerlink\" title=\"奇妙的对象\"></a>奇妙的对象</h2><p>先来说说函数的对象化能力。</p>\n<p>任何一个函数都可以为其动态地添加或去除属性，这些属性可以是简单类型，可以是对象，也可以是其他函数。也就是说，函数具有对象的全部特征，你完全可以把函数当对象来用。其实，函数就是对象，只不过比一般的对象多了一个括号“()”操作符，这个操作符用来执行函数的逻辑。即，函数本身还可以被调用，一般对象却不可以被调用，除此之外完全相同。请看下面的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Sing</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">with</span>(<span class=\"built_in\">arguments</span>.callee)</div><div class=\"line\">        alert(author + <span class=\"string\">\"：\"</span> + poem);</div><div class=\"line\">&#125;;</div><div class=\"line\">Sing.author = <span class=\"string\">\"李白\"</span>;</div><div class=\"line\">Sing.poem = <span class=\"string\">\"汉家秦地月，流影照明妃。一上玉关道，天涯去不归\"</span>;</div><div class=\"line\">Sing();</div><div class=\"line\">Sing.author = <span class=\"string\">\"李战\"</span>;</div><div class=\"line\">Sing.poem = <span class=\"string\">\"日出汉家天，月落阴山前。女儿琵琶怨，已唱三千年\"</span>;</div><div class=\"line\">Sing();</div></pre></td></tr></table></figure>\n<p>在这段代码中，Sing函数被定义后，又给Sing函数动态地增加了author和poem属性。将author和poem属性设为不同的作者和诗句，在调用Sing()时就能显示出不同的结果。这个示例用一种诗情画意的方式，让我们理解了JavaScript函数就是对象的本质，也感受到了JavaScript语言的优美。</p>\n<p>好了，以上的讲述，我们应该算理解了function类型的东西都是和object类型一样的东西，这种东西被我们称为“对象”。我们的确可以这样去看待这些“对象”，因为它们既有“属性”也有“方法”嘛。但下面的代码又会让我们产生新的疑惑：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> anObject = &#123;&#125;;  <span class=\"comment\">//一个对象</span></div><div class=\"line\">anObject.aProperty = <span class=\"string\">\"Property of object\"</span>;  <span class=\"comment\">//对象的一个属性</span></div><div class=\"line\">anObject.aMethod = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;alert(<span class=\"string\">\"Method of object\"</span>)&#125;; <span class=\"comment\">//对象的一个方法</span></div><div class=\"line\"><span class=\"comment\">//主要看下面：</span></div><div class=\"line\">alert(anObject[<span class=\"string\">\"aProperty\"</span>]);   <span class=\"comment\">//可以将对象当数组以属性名作为下标来访问属性</span></div><div class=\"line\">anObject[<span class=\"string\">\"aMethod\"</span>]();          <span class=\"comment\">//可以将对象当数组以方法名作为下标来调用方法</span></div><div class=\"line\"><span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> s <span class=\"keyword\">in</span> anObject)           <span class=\"comment\">//遍历对象的所有属性和方法进行迭代化处理</span></div><div class=\"line\">    alert(s + <span class=\"string\">\" is a \"</span> + <span class=\"keyword\">typeof</span>(anObject[s]));</div></pre></td></tr></table></figure>\n<p>同样对于function类型的对象也是一样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> aFunction = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;  <span class=\"comment\">//一个函数</span></div><div class=\"line\">aFunction.aProperty = <span class=\"string\">\"Property of function\"</span>;  <span class=\"comment\">//函数的一个属性</span></div><div class=\"line\">aFunction.aMethod = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;alert(<span class=\"string\">\"Method of function\"</span>)&#125;; <span class=\"comment\">//函数的一个方法</span></div><div class=\"line\"><span class=\"comment\">//主要看下面：</span></div><div class=\"line\">alert(aFunction[<span class=\"string\">\"aProperty\"</span>]);   <span class=\"comment\">//可以将函数当数组以属性名作为下标来访问属性</span></div><div class=\"line\">aFunction[<span class=\"string\">\"aMethod\"</span>]();          <span class=\"comment\">//可以将函数当数组以方法名作为下标来调用方法</span></div><div class=\"line\"><span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> s <span class=\"keyword\">in</span> aFunction)         <span class=\"comment\">//遍历函数的所有属性和方法进行迭代化处理</span></div><div class=\"line\">    alert(s + <span class=\"string\">\" is a \"</span> + <span class=\"keyword\">typeof</span>(aFunction[s]));</div></pre></td></tr></table></figure>\n<p>是的，对象和函数可以象数组一样，用属性名或方法名作为下标来访问并处理。那么，它到底应该算是数组呢，还是算对象？</p>\n<p>我们知道，数组应该算是线性数据结构，线性数据结构一般有一定的规律，适合进行统一的批量迭代操作等，有点像波。而对象是离散数据结构，适合描述分散的和个性化的东西，有点像粒子。因此，我们也可以这样问：JavaScript里的对象到底是波还是粒子？</p>\n<p>如果存在对象量子论，那么答案一定是：波粒二象性！</p>\n<p>因此，JavaScript里的函数和对象既有对象的特征也有数组的特征。这里的数组被称为“字典”，一种可以任意伸缩的名称值对儿的集合。其实， object和function的内部实现就是一个字典结构，但这种字典结构却通过严谨而精巧的语法表现出了丰富的外观。正如量子力学在一些地方用粒子来解释和处理问题，而在另一些地方却用波来解释和处理问题。你也可以在需要的时候，自由选择用对象还是数组来解释和处理问题。只要善于把握JavaScript的这些奇妙特性，就可以编写出很多简洁而强大的代码来。</p>\n<h2 id=\"放下对象\"><a href=\"#放下对象\" class=\"headerlink\" title=\"放下对象\"></a>放下对象</h2><p>我们再来看看function与object的超然结合吧。</p>\n<p>在面向对象的编程世界里，数据与代码的有机结合就构成了对象的概念。自从有了对象，编程世界就被划分成两部分，一个是对象内的世界，一个是对象外的世界。对象天生具有自私的一面，外面的世界未经允许是不可访问对象内部的。对象也有大方的一面，它对外提供属性和方法，也为他人服务。不过，在这里我们要谈到一个有趣的问题，就是“对象的自我意识”。</p>\n<p>什么？没听错吧？对象有自我意识？</p>\n<p>可能对许多程序员来说，这的确是第一次听说。不过，请君看看C++、C#和Java的this，DELPHI的self，还有VB的me，或许你会恍然大悟！当然，也可能只是说句“不过如此”而已。</p>\n<p>然而，就在对象将世界划分为内外两部分的同时，对象的“自我”也就随之产生。“自我意识”是生命的最基本特征！正是由于对象这种强大的生命力，才使得编程世界充满无限的生机和活力。</p>\n<p>但对象的“自我意识”在带给我们快乐的同时也带来了痛苦和烦恼。我们给对象赋予了太多欲望，总希望它们能做更多的事情。然而，对象的自私使得它们互相争抢系统资源，对象的自负让对象变得复杂和臃肿，对象的自欺也往往带来挥之不去的错误和异常。我们为什么会有这么多的痛苦和烦恼呢？</p>\n<p>为此，有一个人，在对象树下，整整想了九九八十一天，终于悟出了生命的痛苦来自于欲望，但究其欲望的根源是来自于自我意识。于是他放下了“自我”，在对象树下成了佛，从此他开始普度众生，传播真经。他的名字就叫释迦摩尼，而《JavaScript真经》正是他所传经书中的一本。</p>\n<p>JavaScript中也有this，但这个this却与C++、C#或Java等语言的this不同。一般编程语言的this就是对象自己，而 JavaScript的this却并不一定！this可能是我，也可能是你，可能是他，反正是我中有你，你中有我，这就不能用原来的那个“自我”来理解 JavaScript这个this的含义了。为此，我们必须首先放下原来对象的那个“自我”。</p>\n<p>我们来看下面的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">WhoAmI</span>(<span class=\"params\"></span>) </span>&#123;       <span class=\"comment\">//定义一个函数WhoAmI</span></div><div class=\"line\">    alert(<span class=\"string\">\"I'm \"</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">\" of \"</span> + <span class=\"keyword\">typeof</span>(<span class=\"keyword\">this</span>));</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">WhoAmI();   <span class=\"comment\">//此时是this当前这段代码的全局对象，在浏览器中就是window对象，其name属性为空字符串。输出：I'm of object</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> BillGates = &#123;<span class=\"attr\">name</span>: <span class=\"string\">\"Bill Gates\"</span>&#125;;</div><div class=\"line\">BillGates.WhoAmI = WhoAmI;  <span class=\"comment\">//将函数WhoAmI作为BillGates的方法。</span></div><div class=\"line\">BillGates.WhoAmI();         <span class=\"comment\">//此时的this是BillGates。输出：I'm Bill Gates of object</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> SteveJobs = &#123;<span class=\"attr\">name</span>: <span class=\"string\">\"Steve Jobs\"</span>&#125;;</div><div class=\"line\">SteveJobs.WhoAmI = WhoAmI;  <span class=\"comment\">//将函数WhoAmI作为SteveJobs的方法。</span></div><div class=\"line\">SteveJobs.WhoAmI();         <span class=\"comment\">//此时的this是SteveJobs。输出：I'm Steve Jobs of object</span></div><div class=\"line\"></div><div class=\"line\">WhoAmI.call(BillGates);     <span class=\"comment\">//直接将BillGates作为this，调用WhoAmI。输出：I'm Bill Gates of object</span></div><div class=\"line\">WhoAmI.call(SteveJobs);     <span class=\"comment\">//直接将SteveJobs作为this，调用WhoAmI。输出：I'm Steve Jobs of object</span></div><div class=\"line\"></div><div class=\"line\">BillGates.WhoAmI.call(SteveJobs);   <span class=\"comment\">//将SteveJobs作为this，却调用BillGates的WhoAmI方法。输出：I'm Steve Jobs of object</span></div><div class=\"line\">SteveJobs.WhoAmI.call(BillGates);   <span class=\"comment\">//将BillGates作为this，却调用SteveJobs的WhoAmI方法。输出：I'm Bill Gates of object</span></div><div class=\"line\"></div><div class=\"line\">WhoAmI.WhoAmI = WhoAmI;     <span class=\"comment\">//将WhoAmI函数设置为自身的方法。</span></div><div class=\"line\">WhoAmI.name = <span class=\"string\">\"WhoAmI\"</span>;</div><div class=\"line\">WhoAmI.WhoAmI();            <span class=\"comment\">//此时的this是WhoAmI函数自己。输出：I'm WhoAmI of function</span></div><div class=\"line\">    </div><div class=\"line\">(&#123;<span class=\"attr\">name</span>: <span class=\"string\">\"nobody\"</span>, <span class=\"attr\">WhoAmI</span>: WhoAmI&#125;).WhoAmI();    <span class=\"comment\">//临时创建一个匿名对象并设置属性后调用WhoAmI方法。输出：I'm nobody of object</span></div></pre></td></tr></table></figure>\n<p>从上面的代码可以看出，同一个函数可以从不同的角度来调用，this并不一定是函数本身所属的对象。this只是在任意对象和function元素结合时的一个概念，是种结合比起一般对象语言的默认结合更加灵活，显得更加超然和洒脱。</p>\n<p>在JavaScript函数中，你只能把this看成当前要服务的“这个”对象。this是一个特殊的内置参数，根据this参数，您可以访问到“这个”对象的属性和方法，但却不能给this参数赋值。在一般对象语言中，方法体代码中的this可以省略的，成员默认都首先是“自己”的。但JavaScript却不同，由于不存在“自我”，当访问“这个”对象时，this不可省略！</p>\n<p>JavaScript提供了传递this参数的多种形式和手段，其中，象BillGates.WhoAmI()和SteveJobs.WhoAmI()这种形式，是传递this参数最正规的形式，此时的this就是函数所属的对象本身。而大多数情况下，我们也几乎很少去采用那些借花仙佛的调用形式。但只我们要明白JavaScript的这个“自我”与其他编程语言的“自我”是不同的，这是一个放下了的“自我”，这就是JavaScript特有的世界观。</p>\n<h2 id=\"对象素描\"><a href=\"#对象素描\" class=\"headerlink\" title=\"对象素描\"></a>对象素描</h2><p>已经说了许多了许多话题了，但有一个很基本的问题我们忘了讨论，那就是：怎样建立对象？</p>\n<p>在前面的示例中，我们已经涉及到了对象的建立了。我们使用了一种被称为JavaScript Object Notation(缩写JSON)的形式，翻译为中文就是“JavaScript对象表示法”。</p>\n<p>JSON为创建对象提供了非常简单的方法。例如，创建一个没有任何属性的对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;&#125;;</div></pre></td></tr></table></figure>\n<p>创建一个对象并设置属性及初始值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> person = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">\"Angel\"</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</div><div class=\"line\">    <span class=\"attr\">married</span>: <span class=\"literal\">false</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>创建一个对象并设置属性和方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> speaker = &#123;</div><div class=\"line\">    <span class=\"attr\">text</span>: <span class=\"string\">\"Hello World\"</span>,</div><div class=\"line\">    <span class=\"attr\">say</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        alert(<span class=\"keyword\">this</span>.text)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>创建一个更复杂的对象，嵌套其他对象和对象数组等：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> company = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">\"Microsoft\"</span>,</div><div class=\"line\">    <span class=\"attr\">product</span>: <span class=\"string\">\"softwares\"</span>,</div><div class=\"line\">    <span class=\"attr\">chairman</span>: &#123;<span class=\"attr\">name</span>: <span class=\"string\">\"Bill Gates\"</span>, <span class=\"attr\">age</span>: <span class=\"number\">53</span>, <span class=\"attr\">Married</span>: <span class=\"literal\">true</span>&#125;,</div><div class=\"line\">    <span class=\"attr\">employees</span>: [&#123;<span class=\"attr\">name</span>: <span class=\"string\">\"Angel\"</span>, <span class=\"attr\">age</span>: <span class=\"number\">26</span>, <span class=\"attr\">Married</span>: <span class=\"literal\">false</span>&#125;, &#123;<span class=\"attr\">name</span>: <span class=\"string\">\"Hanson\"</span>, <span class=\"attr\">age</span>: <span class=\"number\">32</span>, <span class=\"attr\">Marred</span>: <span class=\"literal\">true</span>&#125;],</div><div class=\"line\">    <span class=\"attr\">readme</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"built_in\">document</span>.write(<span class=\"keyword\">this</span>.name + <span class=\"string\">\" product \"</span> + <span class=\"keyword\">this</span>.product);&#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>JSON的形式就是用大括“{}”号包括起来的项目列表，每一个项目间并用逗号“,”分隔，而项目就是用冒号“:”分隔的属性名和属性值。这是典型的字典表示形式，也再次表明了 JavaScript里的对象就是字典结构。不管多么复杂的对象，都可以被一句JSON代码来创建并赋值。</p>\n<p>其实，JSON就是JavaScript对象最好的序列化形式，它比XML更简洁也更省空间。对象可以作为一个JSON形式的字符串，在网络间自由传递和交换信息。而当需要将这个JSON字符串变成一个JavaScript对象时，只需要使用eval函数这个强大的数码转换引擎，就立即能得到一个JavaScript内存对象。正是由于JSON的这种简单朴素的天生丽质，才使得她在AJAX舞台上成为璀璨夺目的明星。</p>\n<p>JavaScript就是这样，把面向对象那些看似复杂的东西，用及其简洁的形式表达出来。卸下对象浮华的浓妆，还对象一个眉目清晰！</p>\n<h2 id=\"构造对象\"><a href=\"#构造对象\" class=\"headerlink\" title=\"构造对象\"></a>构造对象</h2><p>好了，接下我们来讨论一下对象的另一种创建方法。</p>\n<p>除JSON外，在JavaScript中我们可以使用new操作符结合一个函数的形式来创建对象。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyFunc</span>(<span class=\"params\"></span>) </span>&#123;&#125;;         <span class=\"comment\">//定义一个空函数</span></div><div class=\"line\"><span class=\"keyword\">var</span> anObj = <span class=\"keyword\">new</span> MyFunc();  <span class=\"comment\">//使用new操作符，借助MyFun函数，就创建了一个对象</span></div></pre></td></tr></table></figure>\n<p>JavaScript的这种创建对象的方式可真有意思，如何去理解这种写法呢？</p>\n<p>其实，可以把上面的代码改写成这种等价形式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyFunc</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> anObj = &#123;&#125;;     <span class=\"comment\">//创建一个对象</span></div><div class=\"line\">MyFunc.call(anObj); <span class=\"comment\">//将anObj对象作为this指针调用MyFunc函数</span></div></pre></td></tr></table></figure>\n<p>我们就可以这样理解，JavaScript先用new操作符创建了一个对象，紧接着就将这个对象作为this参数调用了后面的函数。其实，JavaScript内部就是这么做的，而且任何函数都可以被这样调用！但从 “anObj = new MyFunc()” 这种形式，我们又看到一个熟悉的身影，C++和C#不就是这样创建对象的吗？原来，条条大路通灵山，殊途同归啊！</p>\n<p>君看到此处也许会想，我们为什么不可以把这个MyFunc当作构造函数呢？恭喜你，答对了！JavaScript也是这么想的！请看下面的代码： </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;   <span class=\"comment\">//带参数的构造函数</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;   <span class=\"comment\">//将参数值赋给给this对象的属性</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.SayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;alert(<span class=\"string\">\"Hello, I'm \"</span> + <span class=\"keyword\">this</span>.name);&#125;;   <span class=\"comment\">//给this对象定义一个SayHello方法。</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Employee</span>(<span class=\"params\">name, salary</span>) </span>&#123;     <span class=\"comment\">//子构造函数</span></div><div class=\"line\">    Person.call(<span class=\"keyword\">this</span>, name);        <span class=\"comment\">//将this传给父构造函数</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.salary = salary;       <span class=\"comment\">//设置一个this的salary属性</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.ShowMeTheMoney = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;alert(<span class=\"keyword\">this</span>.name + <span class=\"string\">\" $\"</span> + <span class=\"keyword\">this</span>.salary);&#125;;  <span class=\"comment\">//添加ShowMeTheMoney方法。</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> BillGates = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Bill Gates\"</span>);   <span class=\"comment\">//用Person构造函数创建BillGates对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> SteveJobs = <span class=\"keyword\">new</span> Employee(<span class=\"string\">\"Steve Jobs\"</span>, <span class=\"number\">1234</span>);   <span class=\"comment\">//用Empolyee构造函数创建SteveJobs对象</span></div><div class=\"line\"></div><div class=\"line\">BillGates.SayHello();   <span class=\"comment\">//显示：I'm Bill Gates</span></div><div class=\"line\">SteveJobs.SayHello();   <span class=\"comment\">//显示：I'm Steve Jobs</span></div><div class=\"line\">SteveJobs.ShowMeTheMoney();   <span class=\"comment\">//显示：Steve Jobs $1234</span></div><div class=\"line\"></div><div class=\"line\">alert(BillGates.constructor == Person);  <span class=\"comment\">//显示：true</span></div><div class=\"line\">alert(SteveJobs.constructor == Employee);  <span class=\"comment\">//显示：true</span></div><div class=\"line\"></div><div class=\"line\">alert(BillGates.SayHello == SteveJobs.SayHello); <span class=\"comment\">//显示：false</span></div></pre></td></tr></table></figure>\n<p>这段代码表明，函数不但可以当作构造函数，而且还可以带参数，还可以为对象添加成员和方法。其中的第9行，Employee构造函数又将自己接收的this作为参数调用Person构造函数，这就是相当于调用基类的构造函数。第21、22行还表明这样一个意思：BillGates是由Person构造的，而SteveJobs是由Employee构造的。对象内置的constructor属性还指明了构造对象所用的具体函数！</p>\n<p>其实，如果你愿意把函数当作“类”的话，她就是“类”，因为她本来就有“类”的那些特征。难道不是吗？她生出的儿子各个都有相同的特征，而且构造函数也与类同名嘛！</p>\n<p>但要注意的是，用构造函数操作this对象创建出来的每一个对象，不但具有各自的成员数据，而且还具有各自的方法数据。换句话说，方法的代码体(体现函数逻辑的数据)在每一个对象中都存在一个副本。尽管每一个代码副本的逻辑是相同的，但对象们确实是各自保存了一份代码体。上例中的最后一句说明了这一实事，这也解释了JavaScript中的函数就是对象的概念。</p>\n<p>同一类的对象各自有一份方法代码显然是一种浪费。在传统的对象语言中，方法函数并不象JavaScript那样是个对象概念。即使也有象函数指针、方法指针或委托那样的变化形式，但其实质也是对同一份代码的引用。一般的对象语言很难遇到这种情况。</p>\n<p>不过，JavaScript语言有大的灵活性。我们可以先定义一份唯一的方法函数体，并在构造this对象时使用这唯一的函数对象作为其方法，就能共享方法逻辑。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SayHello</span>(<span class=\"params\"></span>) </span>&#123;     <span class=\"comment\">//先定义一份SayHello函数代码</span></div><div class=\"line\">    alert(<span class=\"string\">\"Hello, I'm \"</span> + <span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;   <span class=\"comment\">//带参数的构造函数</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;   <span class=\"comment\">//将参数值赋给给this对象的属性</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.SayHello = SayHello;   <span class=\"comment\">//给this对象SayHello方法赋值为前面那份SayHello代码。</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> BillGates = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Bill Gates\"</span>);   <span class=\"comment\">//创建BillGates对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> SteveJobs = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Steve Jobs\"</span>);   <span class=\"comment\">//创建SteveJobs对象</span></div><div class=\"line\"></div><div class=\"line\">alert(BillGates.SayHello == SteveJobs.SayHello); <span class=\"comment\">//显示：true</span></div></pre></td></tr></table></figure>\n<p>其中，最后一行的输出结果表明两个对象确实共享了一个函数对象。虽然，这段程序达到了共享了一份方法代码的目的，但却不怎么优雅。因为，定义SayHello方法时反映不出其与Person类的关系。“优雅”这个词用来形容代码，也不知道是谁先提出来的。不过，这个词反映了程序员已经从追求代码的正确、高效、可靠和易读等基础上，向着追求代码的美观感觉和艺术境界的层次发展，程序人生又多了些浪漫色彩。</p>\n<p>显然，JavaScript早想到了这一问题，她的设计者们为此提供了一个有趣的prototype概念。</p>\n<h2 id=\"初看原型\"><a href=\"#初看原型\" class=\"headerlink\" title=\"初看原型\"></a>初看原型</h2><p>prototype源自法语，软件界的标准翻译为“原型”，代表事物的初始形态，也含有模型和样板的意义。JavaScript中的prototype概念恰如其分地反映了这个词的内含，我们不能将其理解为C++的prototype那种预先声明的概念。</p>\n<p>JavaScript的所有function类型的对象都有一个prototype属性。这个prototype属性本身又是一个object类型的对象，因此我们也可以给这个prototype对象添加任意的属性和方法。既然prototype是对象的“原型”，那么由该函数构造出来的对象应该都会具有这个“原型”的特性。事实上，在构造函数的prototype上定义的所有属性和方法，都是可以通过其构造的对象直接访问和调用的。也可以这么说，prototype提供了一群同类对象共享属性和方法的机制。</p>\n<p>我们先来看看下面的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;   <span class=\"comment\">//设置对象属性，每个对象各自一份属性数据</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">Person.prototype.SayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)  //给<span class=\"title\">Person</span>函数的<span class=\"title\">prototype</span>添加<span class=\"title\">SayHello</span>方法。</span></div><div class=\"line\">&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"Hello, I'm \"</span> + <span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> BillGates = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Bill Gates\"</span>);   <span class=\"comment\">//创建BillGates对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> SteveJobs = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Steve Jobs\"</span>);   <span class=\"comment\">//创建SteveJobs对象</span></div><div class=\"line\"></div><div class=\"line\">BillGates.SayHello();   <span class=\"comment\">//通过BillGates对象直接调用到SayHello方法</span></div><div class=\"line\">SteveJobs.SayHello();   <span class=\"comment\">//通过SteveJobs对象直接调用到SayHello方法</span></div><div class=\"line\"></div><div class=\"line\">alert(BillGates.SayHello == SteveJobs.SayHello); <span class=\"comment\">//因为两个对象是共享prototype的SayHello，所以显示：true</span></div></pre></td></tr></table></figure>\n<p>程序运行的结果表明，构造函数的prototype上定义的方法确实可以通过对象直接调用到，而且代码是共享的。显然，把方法设置到prototype的写法显得优雅多了，尽管调用形式没有变，但逻辑上却体现了方法与类的关系，相对前面的写法，更容易理解和组织代码。</p>\n<p>那么，对于多层次类型的构造函数情况又如何呢？</p>\n<p>我们再来看下面的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;   <span class=\"comment\">//基类构造函数</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">Person.prototype.SayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">//给基类构造函数的prototype添加方法</span></div><div class=\"line\">    alert(<span class=\"string\">\"Hello, I'm \"</span> + <span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Employee</span>(<span class=\"params\">name, salary</span>) </span>&#123; <span class=\"comment\">//子类构造函数</span></div><div class=\"line\">    Person.call(<span class=\"keyword\">this</span>, name);    <span class=\"comment\">//调用基类构造函数</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.salary = salary;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">Employee.prototype = <span class=\"keyword\">new</span> Person();  <span class=\"comment\">//建一个基类的对象作为子类原型的原型，这里很有意思</span></div><div class=\"line\"></div><div class=\"line\">Employee.prototype.ShowMeTheMoney = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">//给子类添构造函数的prototype添加方法</span></div><div class=\"line\">    alert(<span class=\"keyword\">this</span>.name + <span class=\"string\">\" $\"</span> + <span class=\"keyword\">this</span>.salary);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> BillGates = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Bill Gates\"</span>);   <span class=\"comment\">//创建基类Person的BillGates对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> SteveJobs = <span class=\"keyword\">new</span> Employee(<span class=\"string\">\"Steve Jobs\"</span>, <span class=\"number\">1234</span>);   <span class=\"comment\">//创建子类Employee的SteveJobs对象</span></div><div class=\"line\"></div><div class=\"line\">BillGates.SayHello();       <span class=\"comment\">//通过对象直接调用到prototype的方法</span></div><div class=\"line\">SteveJobs.SayHello();       <span class=\"comment\">//通过子类对象直接调用基类prototype的方法，关注！</span></div><div class=\"line\">SteveJobs.ShowMeTheMoney(); <span class=\"comment\">//通过子类对象直接调用子类prototype的方法</span></div><div class=\"line\"></div><div class=\"line\">alert(BillGates.SayHello == SteveJobs.SayHello); <span class=\"comment\">//显示：true，表明prototype的方法是共享的</span></div></pre></td></tr></table></figure>\n<p>这段代码的第17行，构造了一个基类的对象，并将其设为子类构造函数的prototype，这是很有意思的。这样做的目的就是为了第28行，通过子类对象也可以直接调用基类prototype的方法。为什么可以这样呢？</p>\n<p>原来，在JavaScript中，prototype不但能让对象共享自己财富，而且prototype还有寻根问祖的天性，从而使得先辈们的遗产可以代代相传。当从一个对象那里读取属性或调用方法时，如果该对象自身不存在这样的属性或方法，就会去自己关联的prototype对象那里寻找；如果prototype没有，又会去prototype自己关联的前辈prototype那里寻找，直到找到或追溯过程结束为止。</p>\n<p>在JavaScript内部，对象的属性和方法追溯机制是通过所谓的prototype链来实现的。当用new操作符构造对象时，也会同时将构造函数的prototype对象指派给新创建的对象，成为该对象内置的原型对象。对象内置的原型对象应该是对外不可见的，尽管有些浏览器(如Firefox)可以让我们访问这个内置原型对象，但并不建议这样做。内置的原型对象本身也是对象，也有自己关联的原型对象，这样就形成了所谓的原型链。</p>\n<p>在原型链的最末端，就是Object构造函数prototype属性指向的那一个原型对象。这个原型对象是所有对象的最老祖先，这个老祖宗实现了诸如toString等所有对象天生就该具有的方法。其他内置构造函数，如Function, Boolean, String, Date和RegExp等的prototype都是从这个老祖宗传承下来的，但他们各自又定义了自身的属性和方法，从而他们的子孙就表现出各自宗族的那些特征。</p>\n<p>这不就是“继承”吗？是的，这就是“继承”，是JavaScript特有的“原型继承”。</p>\n<p>“原型继承”是慈祥而又严厉的。原形对象将自己的属性和方法无私地贡献给孩子们使用，也并不强迫孩子们必须遵从，允许一些顽皮孩子按自己的兴趣和爱好独立行事。从这点上看，原型对象是一位慈祥的母亲。然而，任何一个孩子虽然可以我行我素，但却不能动原型对象既有的财产，因为那可能会影响到其他孩子的利益。从这一点上看，原型对象又象一位严厉的父亲。我们来看看下面的代码就可以理解这个意思了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">Person.prototype.company = <span class=\"string\">\"Microsoft\"</span>; <span class=\"comment\">//原型的属性</span></div><div class=\"line\"></div><div class=\"line\">Person.prototype.SayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)  //原型的方法</span></div><div class=\"line\">&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"Hello, I'm \"</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">\" of \"</span> + <span class=\"keyword\">this</span>.company);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> BillGates = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Bill Gates\"</span>);</div><div class=\"line\">BillGates.SayHello();   <span class=\"comment\">//由于继承了原型的东西，规规矩矩输出：Hello, I'm Bill Gates</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> SteveJobs = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Steve Jobs\"</span>);</div><div class=\"line\">SteveJobs.company = <span class=\"string\">\"Apple\"</span>;    <span class=\"comment\">//设置自己的company属性，掩盖了原型的company属性</span></div><div class=\"line\">SteveJobs.SayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) //实现了自己的<span class=\"title\">SayHello</span>方法，掩盖了原型的<span class=\"title\">SayHello</span>方法</span></div><div class=\"line\">&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"Hi, \"</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">\" like \"</span> + <span class=\"keyword\">this</span>.company + <span class=\"string\">\", ha ha ha \"</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">SteveJobs.SayHello();   <span class=\"comment\">//都是自己覆盖的属性和方法，输出：Hi, Steve Jobs like Apple, ha ha ha </span></div><div class=\"line\"></div><div class=\"line\">BillGates.SayHello();   <span class=\"comment\">//SteveJobs的覆盖没有影响原型对象，BillGates还是按老样子输出</span></div></pre></td></tr></table></figure>\n<p>对象可以掩盖原型对象的那些属性和方法，一个构造函数原型对象也可以掩盖上层构造函数原型对象既有的属性和方法。这种掩盖其实只是在对象自己身上创建了新的属性和方法，只不过这些属性和方法与原型对象的那些同名而已。JavaScript就是用这简单的掩盖机制实现了对象的“多态”性，与静态对象语言的虚函数和重载(override)概念不谋而合。</p>\n<p>然而，比静态对象语言更神奇的是，我们可以随时给原型对象动态添加新的属性和方法，从而动态地扩展基类的功能特性。这在静态对象语言中是很难想象的。我们来看下面的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">Person.prototype.SayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)  //建立对象前定义的方法</span></div><div class=\"line\">&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"Hello, I'm \"</span> + <span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> BillGates = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Bill Gates\"</span>);   <span class=\"comment\">//建立对象</span></div><div class=\"line\"></div><div class=\"line\">BillGates.SayHello();</div><div class=\"line\"></div><div class=\"line\">Person.prototype.Retire = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)    //建立对象后再动态扩展原型的方法</span></div><div class=\"line\">&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"Poor \"</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">\", bye bye!\"</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">BillGates.Retire(); <span class=\"comment\">//动态扩展的方法即可被先前建立的对象立即调用</span></div></pre></td></tr></table></figure>\n<p>阿弥佗佛，原型继承竟然可以玩出有这样的法术！</p>\n<h2 id=\"原型扩展\"><a href=\"#原型扩展\" class=\"headerlink\" title=\"原型扩展\"></a>原型扩展</h2><p> 想必君的悟性极高，可能你会这样想：如果在JavaScript内置的那些如Object和Function等函数的prototype上添加些新的方法和属性，是不是就能扩展JavaScript的功能呢？</p>\n<p>那么，恭喜你，你得到了！</p>\n<p>在AJAX技术迅猛发展的今天，许多成功的AJAX项目的JavaScript运行库都大量扩展了内置函数的prototype功能。比如微软的ASP.NET AJAX，就给这些内置函数及其prototype添加了大量的新特性，从而增强了JavaScript的功能。</p>\n<p>我们来看一段摘自MicrosoftAjax.debug.js中的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">String</span>.prototype.trim = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">String$trim</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length !== <span class=\"number\">0</span>) <span class=\"keyword\">throw</span> <span class=\"built_in\">Error</span>.parameterCount();</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/^\\s+|\\s+$/g</span>, <span class=\"string\">''</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这段代码就是给内置String函数的prototype扩展了一个trim方法，于是所有的String类对象都有了trim方法了。有了这个扩展，今后要去除字符串两段的空白，就不用再分别处理了，因为任何字符串都有了这个扩展功能，只要调用即可，真的很方便。</p>\n<p>当然，几乎很少有人去给Object的prototype添加方法，因为那会影响到所有的对象，除非在你的架构中这种方法的确是所有对象都需要的。</p>\n<p>前两年，微软在设计AJAX类库的初期，用了一种被称为“闭包”(closure)的技术来模拟“类”。其大致模型如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">firstName, lastName, age</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//私有变量：</span></div><div class=\"line\">    <span class=\"keyword\">var</span> _firstName = firstName;</div><div class=\"line\">    <span class=\"keyword\">var</span> _lastName = lastName;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//公共变量:</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//方法：</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>(firstName + <span class=\"string\">\" \"</span> + lastName);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">this</span>.SayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        alert(<span class=\"string\">\"Hello, I'm \"</span> + firstName + <span class=\"string\">\" \"</span> + lastName);</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> BillGates = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Bill\"</span>, <span class=\"string\">\"Gates\"</span>, <span class=\"number\">53</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> SteveJobs = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Steve\"</span>, <span class=\"string\">\"Jobs\"</span>, <span class=\"number\">53</span>);</div><div class=\"line\"></div><div class=\"line\">BillGates.SayHello();</div><div class=\"line\">SteveJobs.SayHello();</div><div class=\"line\">alert(BillGates.getName() + <span class=\"string\">\" \"</span> + BillGates.age);</div><div class=\"line\">alert(BillGates.firstName);     <span class=\"comment\">//这里不能访问到私有变量</span></div></pre></td></tr></table></figure>\n<p>很显然，这种模型的类描述特别象C#语言的描述形式，在一个构造函数里依次定义了私有成员、公共属性和可用的方法，显得非常优雅嘛。特别是“闭包”机制可以模拟对私有成员的保护机制，做得非常漂亮。</p>\n<p>所谓的“闭包”，就是在构造函数体内定义另外的函数作为目标对象的方法函数，而这个对象的方法函数反过来引用外层外层函数体中的临时变量。这使得只要目标对象在生存期内始终能保持其方法，就能间接保持原构造函数体当时用到的临时变量值。尽管最开始的构造函数调用已经结束，临时变量的名称也都消失了，但在目标对象的方法内却始终能引用到该变量的值，而且该值只能通这种方法来访问。即使再次调用相同的构造函数，但只会生成新对象和方法，新的临时变量只是对应新的值，和上次那次调用的是各自独立的。的确很巧妙！</p>\n<p>但是前面我们说过，给每一个对象设置一份方法是一种很大的浪费。还有，“闭包”这种间接保持变量值的机制，往往会给JavaSript的垃圾回收器制造难题。特别是遇到对象间复杂的循环引用时，垃圾回收的判断逻辑非常复杂。无独有偶，IE浏览器早期版本确实存在JavaSript垃圾回收方面的内存泄漏问题。再加上“闭包”模型在性能测试方面的表现不佳，微软最终放弃了“闭包”模型，而改用“原型”模型。正所谓“有得必有失”嘛。</p>\n<p>原型模型需要一个构造函数来定义对象的成员，而方法却依附在该构造函数的原型上。大致写法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//定义构造函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;   <span class=\"comment\">//在构造函数中定义成员</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//方法定义到构造函数的prototype上</span></div><div class=\"line\">Person.prototype.SayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"Hello, I'm \"</span> + <span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;;    </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//子类构造函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Employee</span>(<span class=\"params\">name, salary</span>) </span>&#123;</div><div class=\"line\">    Person.call(<span class=\"keyword\">this</span>, name);    <span class=\"comment\">//调用上层构造函数</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.salary = salary;       <span class=\"comment\">//扩展的成员</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//子类构造函数首先需要用上层构造函数来建立prototype对象，实现继承的概念</span></div><div class=\"line\">Employee.prototype = <span class=\"keyword\">new</span> Person()   <span class=\"comment\">//只需要其prototype的方法，此对象的成员没有任何意义！</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//子类方法也定义到构造函数之上</span></div><div class=\"line\">Employee.prototype.ShowMeTheMoney = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    alert(<span class=\"keyword\">this</span>.name + <span class=\"string\">\" $\"</span> + <span class=\"keyword\">this</span>.salary);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> BillGates = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Bill Gates\"</span>);</div><div class=\"line\">BillGates.SayHello();    </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> SteveJobs = <span class=\"keyword\">new</span> Employee(<span class=\"string\">\"Steve Jobs\"</span>, <span class=\"number\">1234</span>);</div><div class=\"line\">SteveJobs.SayHello();</div><div class=\"line\">SteveJobs.ShowMeTheMoney();</div></pre></td></tr></table></figure>\n<p>原型类模型虽然不能模拟真正的私有变量，而且也要分两部分来定义类，显得不怎么“优雅”。不过，对象间的方法是共享的，不会遇到垃圾回收问题，而且性能优于“闭包”模型。正所谓“有失必有得”嘛。</p>\n<p>在原型模型中，为了实现类继承，必须首先将子类构造函数的prototype设置为一个父类的对象实例。创建这个父类对象实例的目的就是为了构成原型链，以起到共享上层原型方法作用。但创建这个实例对象时，上层构造函数也会给它设置对象成员，这些对象成员对于继承来说是没有意义的。虽然，我们也没有给构造函数传递参数，但确实创建了若干没有用的成员，尽管其值是undefined，这也是一种浪费啊。</p>\n<p>唉！世界上没有完美的事情啊！</p>\n<h2 id=\"原型真谛\"><a href=\"#原型真谛\" class=\"headerlink\" title=\"原型真谛\"></a>原型真谛</h2><p>正当我们感概万分时，天空中一道红光闪过，祥云中出现了观音菩萨。只见她手持玉净瓶，轻拂翠柳枝，洒下几滴甘露，顿时让JavaScript又添新的灵气。</p>\n<p>观音洒下的甘露在JavaScript的世界里凝结成块，成为了一种称为“语法甘露”的东西。这种语法甘露可以让我们编写的代码看起来更象对象语言。</p>\n<p>要想知道这“语法甘露”为何物，就请君侧耳细听。</p>\n<p>在理解这些语法甘露之前，我们需要重新再回顾一下JavaScript构造对象的过程。</p>\n<p>我们已经知道，用 var anObject = new aFunction() 形式创建对象的过程实际上可以分为三步：第一步是建立一个新对象；第二步将该对象内置的原型对象设置为构造函数prototype引用的那个原型对象；第三步就是将该对象作为this参数调用构造函数，完成成员设置等初始化工作。对象建立之后，对象上的任何访问和操作都只与对象自身及其原型链上的那串对象有关，与构造函数再扯不上关系了。换句话说，构造函数只是在创建对象时起到介绍原型对象和初始化对象两个作用。</p>\n<p>那么，我们能否自己定义一个对象来当作原型，并在这个原型上描述类，然后将这个原型设置给新创建的对象，将其当作对象的类呢？我们又能否将这个原型中的一个方法当作构造函数，去初始化新建的对象呢？例如，我们定义这样一个原型对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Person = &#123;  <span class=\"comment\">//定义一个对象来作为原型类</span></div><div class=\"line\">    Create: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, age</span>) </span>&#123;  <span class=\"comment\">//这个当构造函数</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">SayHello</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">//定义方法</span></div><div class=\"line\">        alert(<span class=\"string\">\"Hello, I'm \"</span> + <span class=\"keyword\">this</span>.name);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">HowOld</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">//定义方法</span></div><div class=\"line\">        alert(<span class=\"keyword\">this</span>.name + <span class=\"string\">\" is \"</span> + <span class=\"keyword\">this</span>.age + <span class=\"string\">\" years old.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>这个JSON形式的写法多么象一个C#的类啊！既有构造函数，又有各种方法。如果可以用某种形式来创建对象，并将对象的内置的原型设置为上面这个“类”对象，不就相当于创建该类的对象了吗？</p>\n<p>但遗憾的是，我们几乎不能访问到对象内置的原型属性！尽管有些浏览器可以访问到对象的内置原型，但这样做的话就只能限定了用户必须使用那种浏览器。这也几乎不可行。</p>\n<p>那么，我们可不可以通过一个函数对象来做媒介，利用该函数对象的prototype属性来中转这个原型，并用new操作符传递给新建的对象呢？</p>\n<p>其实，象这样的代码就可以实现这一目标：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">anyfunc</span>(<span class=\"params\"></span>)</span>&#123;&#125;;           <span class=\"comment\">//定义一个函数躯壳</span></div><div class=\"line\">anyfunc.prototype = Person;     <span class=\"comment\">//将原型对象放到中转站prototype</span></div><div class=\"line\"><span class=\"keyword\">var</span> BillGates = <span class=\"keyword\">new</span> anyfunc();  <span class=\"comment\">//新建对象的内置原型将是我们期望的原型对象</span></div></pre></td></tr></table></figure>\n<p>不过，这个anyfunc函数只是一个躯壳，在使用过这个躯壳之后它就成了多余的东西了，而且这和直接使用构造函数来创建对象也没啥不同，有点不爽。</p>\n<p>可是，如果我们将这些代码写成一个通用函数，而那个函数躯壳也就成了函数内的函数，这个内部函数不就可以在外层函数退出作用域后自动消亡吗？而且，我们可以将原型对象作为通用函数的参数，让通用函数返回创建的对象。我们需要的就是下面这个形式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">New</span>(<span class=\"params\">aClass, aParams</span>) </span>&#123;   <span class=\"comment\">//通用创建函数</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">new_</span>(<span class=\"params\"></span>)     //定义临时的中转函数壳</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        aClass.Create.apply(<span class=\"keyword\">this</span>, aParams);   <span class=\"comment\">//调用原型中定义的的构造函数，中转构造逻辑及构造参数</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    new_.prototype = aClass;    <span class=\"comment\">//准备中转原型对象</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> new_();          <span class=\"comment\">//返回建立最终建立的对象</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> Person = &#123;        <span class=\"comment\">//定义的类</span></div><div class=\"line\">    Create: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, age</span>) </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">SayHello</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">        alert(<span class=\"string\">\"Hello, I'm \"</span> + <span class=\"keyword\">this</span>.name);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">HowOld</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        alert(<span class=\"keyword\">this</span>.name + <span class=\"string\">\" is \"</span> + <span class=\"keyword\">this</span>.age + <span class=\"string\">\" years old.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> BillGates = New(Person, [<span class=\"string\">\"Bill Gates\"</span>, <span class=\"number\">53</span>]);  <span class=\"comment\">//调用通用函数创建对象，并以数组形式传递构造参数</span></div><div class=\"line\">BillGates.SayHello();</div><div class=\"line\">BillGates.HowOld();</div><div class=\"line\"></div><div class=\"line\">alert(BillGates.constructor == <span class=\"built_in\">Object</span>);     <span class=\"comment\">//输出：true</span></div></pre></td></tr></table></figure>\n<p>这里的通用函数New()就是一个“语法甘露”！这个语法甘露不但中转了原型对象，还中转了构造函数逻辑及构造参数。</p>\n<p>有趣的是，每次创建完对象退出New函数作用域时，临时的 new<em> 函数对象会被自动释放。由于 new</em> 的prototype属性被设置为新的原型对象，其原来的原型对象和new_之间就已解开了引用链，临时函数及其原来的原型对象都会被正确回收了。上面代码的最后一句证明，新创建的对象的constructor属性返回的是Object函数。其实新建的对象自己及其原型里没有constructor属性，那返回的只是最顶层原型对象的构造函数，即Object。</p>\n<p>有了New这个语法甘露，类的定义就很像C#那些静态对象语言的形式了，这样的代码显得多么文静而优雅啊！</p>\n<p>当然，这个代码仅仅展示了“语法甘露”的概念。我们还需要多一些的语法甘露，才能实现用简洁而优雅的代码书写类层次及其继承关系。好了，我们再来看一个更丰富的示例吧：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//语法甘露：</span></div><div class=\"line\"><span class=\"keyword\">var</span> object =    <span class=\"comment\">//定义小写的object基本类，用于实现最基础的方法等</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">isA</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">aType</span>)   //一个判断类与类之间以及对象与类之间关系的基础方法</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span>(self)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (self == aType)</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">            self = self.Type;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Class</span>(<span class=\"params\">aBaseClass, aClassDefine</span>)    //创建类的函数，用于声明类及继承关系</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">class_</span>(<span class=\"params\"></span>)   //创建类的临时函数壳</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.Type = aBaseClass;    <span class=\"comment\">//我们给每一个类约定一个Type属性，引用其继承的类</span></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> member <span class=\"keyword\">in</span> aClassDefine)</div><div class=\"line\">            <span class=\"keyword\">this</span>[member] = aClassDefine[member];    <span class=\"comment\">//复制类的全部定义到当前创建的类</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    class_.prototype = aBaseClass;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> class_();</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">New</span>(<span class=\"params\">aClass, aParams</span>)   //创建对象的函数，用于任意类的对象创建</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">new_</span>(<span class=\"params\"></span>)     //创建对象的临时函数壳</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.Type = aClass;    <span class=\"comment\">//我们也给每一个对象约定一个Type属性，据此可以访问到对象所属的类</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (aClass.Create)</div><div class=\"line\">            aClass.Create.apply(<span class=\"keyword\">this</span>, aParams);   <span class=\"comment\">//我们约定所有类的构造函数都叫Create，这和DELPHI比较相似</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    new_.prototype = aClass;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> new_();</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//语法甘露的应用效果：    </span></div><div class=\"line\"><span class=\"keyword\">var</span> Person = Class(object,      <span class=\"comment\">//派生至object基本类</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">Create</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, age</span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">SayHello</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        alert(<span class=\"string\">\"Hello, I'm \"</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">\", \"</span> + <span class=\"keyword\">this</span>.age + <span class=\"string\">\" years old.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> Employee = Class(Person,    <span class=\"comment\">//派生至Person类，是不是和一般对象语言很相似？</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">Create</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, age, salary</span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        Person.Create.call(<span class=\"keyword\">this</span>, name, age);  <span class=\"comment\">//调用基类的构造函数</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.salary = salary;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">ShowMeTheMoney</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        alert(<span class=\"keyword\">this</span>.name + <span class=\"string\">\" $\"</span> + <span class=\"keyword\">this</span>.salary);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> BillGates = New(Person, [<span class=\"string\">\"Bill Gates\"</span>, <span class=\"number\">53</span>]);</div><div class=\"line\"><span class=\"keyword\">var</span> SteveJobs = New(Employee, [<span class=\"string\">\"Steve Jobs\"</span>, <span class=\"number\">53</span>, <span class=\"number\">1234</span>]);</div><div class=\"line\">BillGates.SayHello();</div><div class=\"line\">SteveJobs.SayHello();</div><div class=\"line\">SteveJobs.ShowMeTheMoney();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> LittleBill = New(BillGates.Type, [<span class=\"string\">\"Little Bill\"</span>, <span class=\"number\">6</span>]);   <span class=\"comment\">//根据BillGate的类型创建LittleBill</span></div><div class=\"line\">LittleBill.SayHello();</div><div class=\"line\"></div><div class=\"line\">alert(BillGates.isA(Person));       <span class=\"comment\">//true</span></div><div class=\"line\">alert(BillGates.isA(Employee));     <span class=\"comment\">//false</span></div><div class=\"line\">alert(SteveJobs.isA(Person));       <span class=\"comment\">//true</span></div><div class=\"line\">alert(Person.isA(Employee));        <span class=\"comment\">//false</span></div><div class=\"line\">alert(Employee.isA(Person));        <span class=\"comment\">//true</span></div></pre></td></tr></table></figure>\n<p>“语法甘露”不用太多，只要那么一点点，就能改观整个代码的易读性和流畅性，从而让代码显得更优雅。有了这些语法甘露，JavaScript就很像一般对象语言了，写起代码了感觉也就爽多了！</p>\n<p>令人高兴的是，受这些甘露滋养的JavaScript程序效率会更高。因为其原型对象里既没有了毫无用处的那些对象级的成员，而且还不存在constructor属性体，少了与构造函数间的牵连，但依旧保持了方法的共享性。这让JavaScript在追溯原型链和搜索属性及方法时，少费许多工夫啊。</p>\n<p>我们就把这种形式称为“甘露模型”吧！其实，这种“甘露模型”的原型用法才是符合prototype概念的本意，才是的JavaScript原型的真谛！</p>\n<p>想必微软那些设计AJAX架构的工程师看到这个甘露模型时，肯定后悔没有早点把AJAX部门从美国搬到咱中国的观音庙来，错过了观音菩萨的点化。当然，我们也只能是在代码的示例中，把Bill Gates当作对象玩玩，真要让他放弃上帝转而皈依我佛肯定是不容易的，机缘未到啊！如果哪天你在微软新出的AJAX类库中看到这种甘露模型，那才是真正的缘分！</p>\n<h2 id=\"编程的快乐\"><a href=\"#编程的快乐\" class=\"headerlink\" title=\"编程的快乐\"></a>编程的快乐</h2><p>在软件工业迅猛发展的今天，各式各样的编程语言层出不穷，新语言的诞生，旧语言的演化，似乎已经让我们眼花缭乱。为了适应面向对象编程的潮流，JavaScript语言也在向完全面向对象的方向发展，新的JavaScript标准已经从语义上扩展了许多面向对象的新元素。与此相反的是，许多静态的对象语言也在向JavaScript的那种简洁而幽雅的方向发展。例如，新版本的C#语言就吸收了JSON那样的简洁表示法，以及一些其他形式的JavaScript特性。</p>\n<p>我们应该看到，随着RIA(强互联应用)的发展和普及，AJAX技术也将逐渐淡出江湖，JavaScript也将最终消失或演化成其他形式的语言。但不管编程语言如何发展和演化，编程世界永远都会在“数据”与“代码”这千丝万缕的纠缠中保持着无限的生机。只要我们能看透这一点，我们就能很容易地学习和理解软件世界的各种新事物。不管是已熟悉的过程式编程，还是正在发展的函数式编程，以及未来量子纠缠态的大规模并行式编程，我们都有足够的法力来化解一切复杂的难题。</p>\n<p>佛最后淡淡地说：只要我们放下那些表面的“类”，放下那些对象的“自我”，就能达到一种“对象本无根，类型亦无形”的境界，从而将自我融入到整个宇宙的生命轮循环中。我们将没有自我，也没有自私的欲望，你就是我，我就是你，你中有我，我中有你。这时，我们再看这生机勃勃的编程世界时，我们的内心将自然生起无限的慈爱之心，这种慈爱之心不是虚伪而是真诚的。关爱他人就是关爱自己，就是关爱这世界中的一切。那么，我们的心是永远快乐的，我们的程序是永远快乐的，我们的类是永远快乐的，我们的对象也是永远快乐的。这就是编程的极乐！</p>\n<p>说到这里，在座的比丘都犹如醍醐灌顶，心中豁然开朗。看看左边这位早已喜不自禁，再看看右边那位也是心花怒放。</p>\n<p>蓦然回首时，唯见君拈花微笑…</p>\n<blockquote>\n<p>原著：李战(leadzen).深圳 2008-2-23<br><a href=\"http://www.cnblogs.com/leadzen/archive/2008/02/25/1073404.html\" target=\"_blank\" rel=\"external\">悟透JavaScript</a></p>\n</blockquote>\n","excerpt":"","more":"<blockquote>\n<p>转载：<a href=\"http://www.cnblogs.com/leadzen/archive/2008/02/25/1073404.html\">悟透JavaScript</a></p>\n</blockquote>\n<h2 id=\"引子\"><a href=\"#引子\" class=\"headerlink\" title=\"引子\"></a>引子</h2><p>编程世界里只存在两种基本元素，一个是数据，一个是代码。编程世界就是在数据和代码千丝万缕的纠缠中呈现出无限的生机和活力。</p>\n<p>数据天生就是文静的，总想保持自己固有的本色；而代码却天生活泼，总想改变这个世界。</p>\n<p>你看，数据代码间的关系与物质能量间的关系有着惊人的相似。数据也是有惯性的，如果没有代码来施加外力，她总保持自己原来的状态。而代码就象能量，他存在的唯一目的，就是要努力改变数据原来的状态。在代码改变数据的同时，也会因为数据的抗拒而反过来影响或改变代码原有的趋势。甚至在某些情况下，数据可以转变为代码，而代码却又有可能被转变为数据，或许还存在一个类似E=MC2形式的数码转换方程呢。然而，就是在数据和代码间这种即矛盾又统一的运转中，总能体现出计算机世界的规律，这些规律正是我们编写的程序逻辑。</p>\n<p>不过，由于不同程序员有着不同的世界观，这些数据和代码看起来也就不尽相同。于是，不同世界观的程序员们运用各自的方法论，推动着编程世界的进化和发展。</p>\n<p>众所周知，当今最流行的编程思想莫过于面向对象编程的思想。为什么面向对象的思想能迅速风靡编程世界呢？因为面向对象的思想首次把数据和代码结合成统一体，并以一个简单的对象概念呈现给编程者。这一下子就将原来那些杂乱的算法与子程序，以及纠缠不清的复杂数据结构，划分成清晰而有序的对象结构，从而理清了数据与代码在我们心中那团乱麻般的结。我们又可以有一个更清晰的思维，在另一个思想高度上去探索更加浩瀚的编程世界了。</p>\n<p>在五祖弘忍讲授完《对象真经》之后的一天，他对众弟子们说：“经已讲完，想必尔等应该有所感悟，请各自写个偈子来看”。大弟子神秀是被大家公认为悟性最高的师兄，他的偈子写道：“身是对象树，心如类般明。朝朝勤拂拭，莫让惹尘埃！”。此偈一出，立即引起师兄弟们的轰动，大家都说写得太好了。只有火头僧慧能看后，轻轻地叹了口气，又随手在墙上写道：“对象本无根，类型亦无形。本来无一物，何处惹尘埃？”。然后摇了摇头，扬长而去。大家看了慧能的偈子都说：“写的什么乱七八糟的啊，看不懂”。师父弘忍看了神秀的诗偈也点头称赞，再看慧能的诗偈之后默然摇头。就在当天夜里，弘忍却悄悄把慧能叫到自己的禅房，将珍藏多年的软件真经传授于他，然后让他趁着月色连夜逃走…</p>\n<p>后来，慧能果然不负师父厚望，在南方开创了禅宗另一个广阔的天空。而慧能当年带走的软件真经中就有一本是《JavaScript真经》！</p>\n<h2 id=\"回归简单\"><a href=\"#回归简单\" class=\"headerlink\" title=\"回归简单\"></a>回归简单</h2><p>要理解JavaScript，你得首先放下对象和类的概念，回到数据和代码的本原。前面说过，编程世界只有数据和代码两种基本元素，而这两种元素又有着纠缠不清的关系。JavaScript就是把数据和代码都简化到最原始的程度。</p>\n<p>JavaScript中的数据很简洁的。简单数据只有 undefined, null, boolean, number和string这五种，而复杂数据只有一种，即object。这就好比中国古典的朴素唯物思想，把世界最基本的元素归为金木水火土，其他复杂的物质都是由这五种基本元素组成。</p>\n<p>JavaScript中的代码只体现为一种形式，就是function。</p>\n<p>注意：以上单词都是小写的，不要和Number, String, Object, Function等JavaScript内置函数混淆了。要知道，JavaScript语言是区分大小写的呀!</p>\n<p>任何一个JavaScript的标识、常量、变量和参数都只是unfined, null, bool, number, string, object 和 function类型中的一种，也就typeof返回值表明的类型。除此之外没有其他类型了。</p>\n<p>先说说简单数据类型吧。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"literal\">undefined</span></div><div class=\"line\"><span class=\"comment\">//代表一切未知的事物，啥都没有，无法想象，代码也就更无法去处理了。</span></div><div class=\"line\"><span class=\"comment\">//注意：typeof(undefined) 返回也是 undefined。</span></div><div class=\"line\"><span class=\"comment\">//可以将undefined赋值给任何变量或属性，但并不意味了清除了该变量，反而会因此多了一个属性。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"literal\">null</span></div><div class=\"line\"><span class=\"comment\">//有那么一个概念，但没有东西。无中似有，有中还无。虽难以想象，但已经可以用代码来处理了。</span></div><div class=\"line\"><span class=\"comment\">//注意：typeof(null)返回object，但null并非object，具有null值的变量也并非object。</span></div><div class=\"line\"></div><div class=\"line\">boolean</div><div class=\"line\"><span class=\"comment\">//是就是，非就非，没有疑义。对就对，错就错，绝对明确。既能被代码处理，也可以控制代码的流程。</span></div><div class=\"line\"></div><div class=\"line\">number</div><div class=\"line\"><span class=\"comment\">//线性的事物，大小和次序分明，多而不乱。便于代码进行批量处理，也控制代码的迭代和循环等。</span></div><div class=\"line\"><span class=\"comment\">//注意：typeof(NaN)和typeof(Infinity)都返回number 。</span></div><div class=\"line\"><span class=\"comment\">//NaN参与任何数值计算的结构都是NaN，而且 NaN != NaN 。</span></div><div class=\"line\"><span class=\"comment\">//Infinity / Infinity = NaN 。</span></div><div class=\"line\"></div><div class=\"line\">string</div><div class=\"line\"><span class=\"comment\">//面向人类的理性事物，而不是机器信号。人机信息沟通，代码据此理解人的意图等等，都靠它了。</span></div></pre></td></tr></table></figure>\n<p>简单类型都不是对象，JavaScript没有将对象化的能力赋予这些简单类型。直接被赋予简单类型常量值的标识符、变量和参数都不是一个对象。</p>\n<p>所谓“对象化”，就是可以将数据和代码组织成复杂结构的能力。JavaScript中只有object类型和function类型提供了对象化的能力。</p>\n<h2 id=\"没有类\"><a href=\"#没有类\" class=\"headerlink\" title=\"没有类\"></a>没有类</h2><p>object就是对象的类型。在JavaScript中不管多么复杂的数据和代码，都可以组织成object形式的对象。</p>\n<p>但JavaScript却没有 “类”的概念！</p>\n<p>对于许多面向对象的程序员来说，这恐怕是JavaScript中最难以理解的地方。是啊，几乎任何讲面向对象的书中，第一个要讲的就是“类”的概念，这可是面向对象的支柱。这突然没有了“类”，我们就象一下子没了精神支柱，感到六神无主。看来，要放下对象和类，达到“对象本无根，类型亦无形”的境界确实是件不容易的事情啊。</p>\n<p>这样，我们先来看一段JavaScript程序：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> life = &#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">for</span>(life.age = <span class=\"number\">1</span>; life.age &lt;= <span class=\"number\">3</span>; life.age++) &#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span>(life.age) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>: life.body = <span class=\"string\">\"卵细胞\"</span>;</div><div class=\"line\">                life.say = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;alert(<span class=\"keyword\">this</span>.age+<span class=\"keyword\">this</span>.body)&#125;;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>: life.tail = <span class=\"string\">\"尾巴\"</span>;</div><div class=\"line\">                life.gill = <span class=\"string\">\"腮\"</span>;</div><div class=\"line\">                life.body = <span class=\"string\">\"蝌蚪\"</span>;</div><div class=\"line\">                life.say = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;alert(<span class=\"keyword\">this</span>.age+<span class=\"keyword\">this</span>.body+<span class=\"string\">\"-\"</span>+<span class=\"keyword\">this</span>.tail+<span class=\"string\">\",\"</span>+<span class=\"keyword\">this</span>.gill)&#125;;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>: <span class=\"keyword\">delete</span> life.tail;</div><div class=\"line\">                <span class=\"keyword\">delete</span> life.gill;</div><div class=\"line\">                life.legs = <span class=\"string\">\"四条腿\"</span>;</div><div class=\"line\">                life.lung = <span class=\"string\">\"肺\"</span>;</div><div class=\"line\">                life.body = <span class=\"string\">\"青蛙\"</span>;</div><div class=\"line\">                life.say = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;alert(<span class=\"keyword\">this</span>.age+<span class=\"keyword\">this</span>.body+<span class=\"string\">\"-\"</span>+<span class=\"keyword\">this</span>.legs+<span class=\"string\">\",\"</span>+<span class=\"keyword\">this</span>.lung)&#125;;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    life.say();</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>这段JavaScript程序一开始产生了一个生命对象life，life诞生时只是一个光溜溜的对象，没有任何属性和方法。在第一次生命过程中，它有了一个身体属性body，并有了一个say方法，看起来是一个“卵细胞”。在第二次生命过程中，它又长出了“尾巴”和“腮”，有了tail和gill属性，显然它是一个“蝌蚪”。在第三次生命过程中，它的tail和gill属性消失了，但又长出了“四条腿”和“肺”，有了legs和lung属性，从而最终变成了“青蛙”。如果，你的想像力丰富的话，或许还能让它变成英俊的“王子”，娶个美丽的“公主”什么的。不过，在看完这段程序之后，请你思考一个问题：</p>\n<p>我们一定需要类吗？</p>\n<p>还记得儿时那个“小蝌蚪找妈妈”的童话吗？也许就在昨天晚，你的孩子刚好是在这个美丽的童话中进入梦乡的吧。可爱的小蝌蚪也就是在其自身类型不断演化过程中，逐渐变成了和妈妈一样的“类”，从而找到了自己的妈妈。这个童话故事中蕴含的编程哲理就是：对象的“类”是从无到有，又不断演化，最终又消失于无形之中的…</p>\n<p>“类”，的确可以帮助我们理解复杂的现实世界，这纷乱的现实世界也的确需要进行分类。但如果我们的思想被“类”束缚住了，“类”也就变成了“累”。想象一下，如果一个生命对象开始的时就被规定了固定的“类”，那么它还能演化吗？蝌蚪还能变成青蛙吗？还可以给孩子们讲小蝌蚪找妈妈的故事吗？</p>\n<p>所以，JavaScript中没有“类”，类已化于无形，与对象融为一体。正是由于放下了“类”这个概念，JavaScript的对象才有了其他编程语言所没有的活力。</p>\n<p>如果，此时你的内心深处开始有所感悟，那么你已经逐渐开始理解JavaScript的禅机了。</p>\n<h2 id=\"函数的魔力\"><a href=\"#函数的魔力\" class=\"headerlink\" title=\"函数的魔力\"></a>函数的魔力</h2><p>接下来，我们再讨论一下JavaScript函数的魔力吧。</p>\n<p>JavaScript的代码就只有function一种形式，function就是函数的类型。也许其他编程语言还有procedure或 method等代码概念，但在JavaScript里只有function一种形式。当我们写下一个函数的时候，只不过是建立了一个function类型的实体而已。</p>\n<p>请看下面的程序：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myfunc</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"hello\"</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">alert(<span class=\"keyword\">typeof</span>(myfunc));</div></pre></td></tr></table></figure>\n<p>这个代码运行之后可以看到typeof(myfunc)返回的是function。以上的函数写法我们称之为“定义式”的，如果我们将其改写成下面的“变量式”的，就更容易理解了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myfunc = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"hello\"</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">alert(<span class=\"keyword\">typeof</span>(myfunc));</div></pre></td></tr></table></figure>\n<p>这里明确定义了一个变量myfunc，它的初始值被赋予了一个function的实体。因此，typeof(myfunc)返回的也是function。其实，这两种函数的写法是等价的，除了一点细微差别，其内部实现完全相同。也就是说，我们写的这些JavaScript函数只是一个命了名的变量而已，其变量类型即为function，变量的值就是我们编写的函数代码体。</p>\n<p>聪明的你或许立即会进一步的追问：既然函数只是变量，那么变量就可以被随意赋值并用到任意地方啰？</p>\n<p>我们来看看下面的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myfunc = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"hello\"</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\">myfunc(); <span class=\"comment\">//第一次调用myfunc，输出hello</span></div><div class=\"line\"></div><div class=\"line\">myfunc = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"yeah\"</span>);</div><div class=\"line\">&#125;;    </div><div class=\"line\">myfunc(); <span class=\"comment\">//第二次调用myfunc，将输出yeah</span></div></pre></td></tr></table></figure>\n<p>这个程序运行的结果告诉我们：答案是肯定的！在第一次调用函数之后，函数变量又被赋予了新的函数代码体，使得第二次调用该函数时，出现了不同的输出。</p>\n<p>好了，我们又来把上面的代码改成第一种定义式的函数形式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myfunc</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"hello\"</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\">myfunc(); <span class=\"comment\">//这里调用myfunc，输出yeah而不是hello</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myfunc</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"yeah\"</span>);</div><div class=\"line\">&#125;;    </div><div class=\"line\">myfunc(); <span class=\"comment\">//这里调用myfunc，当然输出yeah</span></div></pre></td></tr></table></figure>\n<p>按理说，两个签名完全相同的函数，在其他编程语言中应该是非法的。但在JavaScript中，这没错。不过，程序运行之后却发现一个奇怪的现象：两次调用都只是最后那个函数里输出的值！显然第一个函数没有起到任何作用。这又是为什么呢？</p>\n<p>原来，JavaScript执行引擎并非一行一行地分析和执行程序，而是一段一段地分析执行的。而且，在同一段程序的分析执行中，定义式的函数语句会被提取出来优先执行。函数定义执行完之后，才会按顺序执行其他语句代码。也就是说，在第一次调用myfunc之前，第一个函数语句定义的代码逻辑，已被第二个函数定义语句覆盖了。所以，两次都调用都是执行最后一个函数逻辑了。</p>\n<p>如果把这个JavaScript代码分成两段，例如将它们写在一个html中，并用 <code>&lt;script/&gt;</code> 标签将其分成这样的两块：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myfunc</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">\"hello\"</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    myfunc(); <span class=\"comment\">//这里调用myfunc，输出hello</span></div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myfunc</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">\"yeah\"</span>);</div><div class=\"line\">    &#125;;    </div><div class=\"line\">    myfunc(); <span class=\"comment\">//这里调用myfunc，输出yeah</span></div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>这时，输出才是各自按顺序来的，也证明了JavaScript的确是一段段地执行的。</p>\n<p>一段代码中的定义式函数语句会优先执行，这似乎有点象静态语言的编译概念。所以，这一特征也被有些人称为：JavaScript的“预编译”。</p>\n<p>大多数情况下，我们也没有必要去纠缠这些细节问题。只要你记住一点：JavaScript里的代码也是一种数据，同样可以被任意赋值和修改的，而它的值就是代码的逻辑。只是，与一般数据不同的是，函数是可以被调用执行的。</p>\n<p>不过，如果JavaScript函数仅仅只有这点道行的话，这与C++的函数指针，DELPHI的方法指针，C#的委托相比，又有啥稀奇嘛！然而，JavaScript函数的神奇之处还体现在另外两个方面：一是函数function类型本身也具有对象化的能力，二是函数function与对象 object超然的结合能力。</p>\n<h2 id=\"奇妙的对象\"><a href=\"#奇妙的对象\" class=\"headerlink\" title=\"奇妙的对象\"></a>奇妙的对象</h2><p>先来说说函数的对象化能力。</p>\n<p>任何一个函数都可以为其动态地添加或去除属性，这些属性可以是简单类型，可以是对象，也可以是其他函数。也就是说，函数具有对象的全部特征，你完全可以把函数当对象来用。其实，函数就是对象，只不过比一般的对象多了一个括号“()”操作符，这个操作符用来执行函数的逻辑。即，函数本身还可以被调用，一般对象却不可以被调用，除此之外完全相同。请看下面的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Sing</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">with</span>(<span class=\"built_in\">arguments</span>.callee)</div><div class=\"line\">        alert(author + <span class=\"string\">\"：\"</span> + poem);</div><div class=\"line\">&#125;;</div><div class=\"line\">Sing.author = <span class=\"string\">\"李白\"</span>;</div><div class=\"line\">Sing.poem = <span class=\"string\">\"汉家秦地月，流影照明妃。一上玉关道，天涯去不归\"</span>;</div><div class=\"line\">Sing();</div><div class=\"line\">Sing.author = <span class=\"string\">\"李战\"</span>;</div><div class=\"line\">Sing.poem = <span class=\"string\">\"日出汉家天，月落阴山前。女儿琵琶怨，已唱三千年\"</span>;</div><div class=\"line\">Sing();</div></pre></td></tr></table></figure>\n<p>在这段代码中，Sing函数被定义后，又给Sing函数动态地增加了author和poem属性。将author和poem属性设为不同的作者和诗句，在调用Sing()时就能显示出不同的结果。这个示例用一种诗情画意的方式，让我们理解了JavaScript函数就是对象的本质，也感受到了JavaScript语言的优美。</p>\n<p>好了，以上的讲述，我们应该算理解了function类型的东西都是和object类型一样的东西，这种东西被我们称为“对象”。我们的确可以这样去看待这些“对象”，因为它们既有“属性”也有“方法”嘛。但下面的代码又会让我们产生新的疑惑：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> anObject = &#123;&#125;;  <span class=\"comment\">//一个对象</span></div><div class=\"line\">anObject.aProperty = <span class=\"string\">\"Property of object\"</span>;  <span class=\"comment\">//对象的一个属性</span></div><div class=\"line\">anObject.aMethod = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;alert(<span class=\"string\">\"Method of object\"</span>)&#125;; <span class=\"comment\">//对象的一个方法</span></div><div class=\"line\"><span class=\"comment\">//主要看下面：</span></div><div class=\"line\">alert(anObject[<span class=\"string\">\"aProperty\"</span>]);   <span class=\"comment\">//可以将对象当数组以属性名作为下标来访问属性</span></div><div class=\"line\">anObject[<span class=\"string\">\"aMethod\"</span>]();          <span class=\"comment\">//可以将对象当数组以方法名作为下标来调用方法</span></div><div class=\"line\"><span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> s <span class=\"keyword\">in</span> anObject)           <span class=\"comment\">//遍历对象的所有属性和方法进行迭代化处理</span></div><div class=\"line\">    alert(s + <span class=\"string\">\" is a \"</span> + <span class=\"keyword\">typeof</span>(anObject[s]));</div></pre></td></tr></table></figure>\n<p>同样对于function类型的对象也是一样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> aFunction = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;  <span class=\"comment\">//一个函数</span></div><div class=\"line\">aFunction.aProperty = <span class=\"string\">\"Property of function\"</span>;  <span class=\"comment\">//函数的一个属性</span></div><div class=\"line\">aFunction.aMethod = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;alert(<span class=\"string\">\"Method of function\"</span>)&#125;; <span class=\"comment\">//函数的一个方法</span></div><div class=\"line\"><span class=\"comment\">//主要看下面：</span></div><div class=\"line\">alert(aFunction[<span class=\"string\">\"aProperty\"</span>]);   <span class=\"comment\">//可以将函数当数组以属性名作为下标来访问属性</span></div><div class=\"line\">aFunction[<span class=\"string\">\"aMethod\"</span>]();          <span class=\"comment\">//可以将函数当数组以方法名作为下标来调用方法</span></div><div class=\"line\"><span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> s <span class=\"keyword\">in</span> aFunction)         <span class=\"comment\">//遍历函数的所有属性和方法进行迭代化处理</span></div><div class=\"line\">    alert(s + <span class=\"string\">\" is a \"</span> + <span class=\"keyword\">typeof</span>(aFunction[s]));</div></pre></td></tr></table></figure>\n<p>是的，对象和函数可以象数组一样，用属性名或方法名作为下标来访问并处理。那么，它到底应该算是数组呢，还是算对象？</p>\n<p>我们知道，数组应该算是线性数据结构，线性数据结构一般有一定的规律，适合进行统一的批量迭代操作等，有点像波。而对象是离散数据结构，适合描述分散的和个性化的东西，有点像粒子。因此，我们也可以这样问：JavaScript里的对象到底是波还是粒子？</p>\n<p>如果存在对象量子论，那么答案一定是：波粒二象性！</p>\n<p>因此，JavaScript里的函数和对象既有对象的特征也有数组的特征。这里的数组被称为“字典”，一种可以任意伸缩的名称值对儿的集合。其实， object和function的内部实现就是一个字典结构，但这种字典结构却通过严谨而精巧的语法表现出了丰富的外观。正如量子力学在一些地方用粒子来解释和处理问题，而在另一些地方却用波来解释和处理问题。你也可以在需要的时候，自由选择用对象还是数组来解释和处理问题。只要善于把握JavaScript的这些奇妙特性，就可以编写出很多简洁而强大的代码来。</p>\n<h2 id=\"放下对象\"><a href=\"#放下对象\" class=\"headerlink\" title=\"放下对象\"></a>放下对象</h2><p>我们再来看看function与object的超然结合吧。</p>\n<p>在面向对象的编程世界里，数据与代码的有机结合就构成了对象的概念。自从有了对象，编程世界就被划分成两部分，一个是对象内的世界，一个是对象外的世界。对象天生具有自私的一面，外面的世界未经允许是不可访问对象内部的。对象也有大方的一面，它对外提供属性和方法，也为他人服务。不过，在这里我们要谈到一个有趣的问题，就是“对象的自我意识”。</p>\n<p>什么？没听错吧？对象有自我意识？</p>\n<p>可能对许多程序员来说，这的确是第一次听说。不过，请君看看C++、C#和Java的this，DELPHI的self，还有VB的me，或许你会恍然大悟！当然，也可能只是说句“不过如此”而已。</p>\n<p>然而，就在对象将世界划分为内外两部分的同时，对象的“自我”也就随之产生。“自我意识”是生命的最基本特征！正是由于对象这种强大的生命力，才使得编程世界充满无限的生机和活力。</p>\n<p>但对象的“自我意识”在带给我们快乐的同时也带来了痛苦和烦恼。我们给对象赋予了太多欲望，总希望它们能做更多的事情。然而，对象的自私使得它们互相争抢系统资源，对象的自负让对象变得复杂和臃肿，对象的自欺也往往带来挥之不去的错误和异常。我们为什么会有这么多的痛苦和烦恼呢？</p>\n<p>为此，有一个人，在对象树下，整整想了九九八十一天，终于悟出了生命的痛苦来自于欲望，但究其欲望的根源是来自于自我意识。于是他放下了“自我”，在对象树下成了佛，从此他开始普度众生，传播真经。他的名字就叫释迦摩尼，而《JavaScript真经》正是他所传经书中的一本。</p>\n<p>JavaScript中也有this，但这个this却与C++、C#或Java等语言的this不同。一般编程语言的this就是对象自己，而 JavaScript的this却并不一定！this可能是我，也可能是你，可能是他，反正是我中有你，你中有我，这就不能用原来的那个“自我”来理解 JavaScript这个this的含义了。为此，我们必须首先放下原来对象的那个“自我”。</p>\n<p>我们来看下面的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">WhoAmI</span>(<span class=\"params\"></span>) </span>&#123;       <span class=\"comment\">//定义一个函数WhoAmI</span></div><div class=\"line\">    alert(<span class=\"string\">\"I'm \"</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">\" of \"</span> + <span class=\"keyword\">typeof</span>(<span class=\"keyword\">this</span>));</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">WhoAmI();   <span class=\"comment\">//此时是this当前这段代码的全局对象，在浏览器中就是window对象，其name属性为空字符串。输出：I'm of object</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> BillGates = &#123;<span class=\"attr\">name</span>: <span class=\"string\">\"Bill Gates\"</span>&#125;;</div><div class=\"line\">BillGates.WhoAmI = WhoAmI;  <span class=\"comment\">//将函数WhoAmI作为BillGates的方法。</span></div><div class=\"line\">BillGates.WhoAmI();         <span class=\"comment\">//此时的this是BillGates。输出：I'm Bill Gates of object</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> SteveJobs = &#123;<span class=\"attr\">name</span>: <span class=\"string\">\"Steve Jobs\"</span>&#125;;</div><div class=\"line\">SteveJobs.WhoAmI = WhoAmI;  <span class=\"comment\">//将函数WhoAmI作为SteveJobs的方法。</span></div><div class=\"line\">SteveJobs.WhoAmI();         <span class=\"comment\">//此时的this是SteveJobs。输出：I'm Steve Jobs of object</span></div><div class=\"line\"></div><div class=\"line\">WhoAmI.call(BillGates);     <span class=\"comment\">//直接将BillGates作为this，调用WhoAmI。输出：I'm Bill Gates of object</span></div><div class=\"line\">WhoAmI.call(SteveJobs);     <span class=\"comment\">//直接将SteveJobs作为this，调用WhoAmI。输出：I'm Steve Jobs of object</span></div><div class=\"line\"></div><div class=\"line\">BillGates.WhoAmI.call(SteveJobs);   <span class=\"comment\">//将SteveJobs作为this，却调用BillGates的WhoAmI方法。输出：I'm Steve Jobs of object</span></div><div class=\"line\">SteveJobs.WhoAmI.call(BillGates);   <span class=\"comment\">//将BillGates作为this，却调用SteveJobs的WhoAmI方法。输出：I'm Bill Gates of object</span></div><div class=\"line\"></div><div class=\"line\">WhoAmI.WhoAmI = WhoAmI;     <span class=\"comment\">//将WhoAmI函数设置为自身的方法。</span></div><div class=\"line\">WhoAmI.name = <span class=\"string\">\"WhoAmI\"</span>;</div><div class=\"line\">WhoAmI.WhoAmI();            <span class=\"comment\">//此时的this是WhoAmI函数自己。输出：I'm WhoAmI of function</span></div><div class=\"line\">    </div><div class=\"line\">(&#123;<span class=\"attr\">name</span>: <span class=\"string\">\"nobody\"</span>, <span class=\"attr\">WhoAmI</span>: WhoAmI&#125;).WhoAmI();    <span class=\"comment\">//临时创建一个匿名对象并设置属性后调用WhoAmI方法。输出：I'm nobody of object</span></div></pre></td></tr></table></figure>\n<p>从上面的代码可以看出，同一个函数可以从不同的角度来调用，this并不一定是函数本身所属的对象。this只是在任意对象和function元素结合时的一个概念，是种结合比起一般对象语言的默认结合更加灵活，显得更加超然和洒脱。</p>\n<p>在JavaScript函数中，你只能把this看成当前要服务的“这个”对象。this是一个特殊的内置参数，根据this参数，您可以访问到“这个”对象的属性和方法，但却不能给this参数赋值。在一般对象语言中，方法体代码中的this可以省略的，成员默认都首先是“自己”的。但JavaScript却不同，由于不存在“自我”，当访问“这个”对象时，this不可省略！</p>\n<p>JavaScript提供了传递this参数的多种形式和手段，其中，象BillGates.WhoAmI()和SteveJobs.WhoAmI()这种形式，是传递this参数最正规的形式，此时的this就是函数所属的对象本身。而大多数情况下，我们也几乎很少去采用那些借花仙佛的调用形式。但只我们要明白JavaScript的这个“自我”与其他编程语言的“自我”是不同的，这是一个放下了的“自我”，这就是JavaScript特有的世界观。</p>\n<h2 id=\"对象素描\"><a href=\"#对象素描\" class=\"headerlink\" title=\"对象素描\"></a>对象素描</h2><p>已经说了许多了许多话题了，但有一个很基本的问题我们忘了讨论，那就是：怎样建立对象？</p>\n<p>在前面的示例中，我们已经涉及到了对象的建立了。我们使用了一种被称为JavaScript Object Notation(缩写JSON)的形式，翻译为中文就是“JavaScript对象表示法”。</p>\n<p>JSON为创建对象提供了非常简单的方法。例如，创建一个没有任何属性的对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;&#125;;</div></pre></td></tr></table></figure>\n<p>创建一个对象并设置属性及初始值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> person = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">\"Angel\"</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</div><div class=\"line\">    <span class=\"attr\">married</span>: <span class=\"literal\">false</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>创建一个对象并设置属性和方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> speaker = &#123;</div><div class=\"line\">    <span class=\"attr\">text</span>: <span class=\"string\">\"Hello World\"</span>,</div><div class=\"line\">    <span class=\"attr\">say</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        alert(<span class=\"keyword\">this</span>.text)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>创建一个更复杂的对象，嵌套其他对象和对象数组等：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> company = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">\"Microsoft\"</span>,</div><div class=\"line\">    <span class=\"attr\">product</span>: <span class=\"string\">\"softwares\"</span>,</div><div class=\"line\">    <span class=\"attr\">chairman</span>: &#123;<span class=\"attr\">name</span>: <span class=\"string\">\"Bill Gates\"</span>, <span class=\"attr\">age</span>: <span class=\"number\">53</span>, <span class=\"attr\">Married</span>: <span class=\"literal\">true</span>&#125;,</div><div class=\"line\">    <span class=\"attr\">employees</span>: [&#123;<span class=\"attr\">name</span>: <span class=\"string\">\"Angel\"</span>, <span class=\"attr\">age</span>: <span class=\"number\">26</span>, <span class=\"attr\">Married</span>: <span class=\"literal\">false</span>&#125;, &#123;<span class=\"attr\">name</span>: <span class=\"string\">\"Hanson\"</span>, <span class=\"attr\">age</span>: <span class=\"number\">32</span>, <span class=\"attr\">Marred</span>: <span class=\"literal\">true</span>&#125;],</div><div class=\"line\">    <span class=\"attr\">readme</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"built_in\">document</span>.write(<span class=\"keyword\">this</span>.name + <span class=\"string\">\" product \"</span> + <span class=\"keyword\">this</span>.product);&#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>JSON的形式就是用大括“{}”号包括起来的项目列表，每一个项目间并用逗号“,”分隔，而项目就是用冒号“:”分隔的属性名和属性值。这是典型的字典表示形式，也再次表明了 JavaScript里的对象就是字典结构。不管多么复杂的对象，都可以被一句JSON代码来创建并赋值。</p>\n<p>其实，JSON就是JavaScript对象最好的序列化形式，它比XML更简洁也更省空间。对象可以作为一个JSON形式的字符串，在网络间自由传递和交换信息。而当需要将这个JSON字符串变成一个JavaScript对象时，只需要使用eval函数这个强大的数码转换引擎，就立即能得到一个JavaScript内存对象。正是由于JSON的这种简单朴素的天生丽质，才使得她在AJAX舞台上成为璀璨夺目的明星。</p>\n<p>JavaScript就是这样，把面向对象那些看似复杂的东西，用及其简洁的形式表达出来。卸下对象浮华的浓妆，还对象一个眉目清晰！</p>\n<h2 id=\"构造对象\"><a href=\"#构造对象\" class=\"headerlink\" title=\"构造对象\"></a>构造对象</h2><p>好了，接下我们来讨论一下对象的另一种创建方法。</p>\n<p>除JSON外，在JavaScript中我们可以使用new操作符结合一个函数的形式来创建对象。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyFunc</span>(<span class=\"params\"></span>) </span>&#123;&#125;;         <span class=\"comment\">//定义一个空函数</span></div><div class=\"line\"><span class=\"keyword\">var</span> anObj = <span class=\"keyword\">new</span> MyFunc();  <span class=\"comment\">//使用new操作符，借助MyFun函数，就创建了一个对象</span></div></pre></td></tr></table></figure>\n<p>JavaScript的这种创建对象的方式可真有意思，如何去理解这种写法呢？</p>\n<p>其实，可以把上面的代码改写成这种等价形式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyFunc</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> anObj = &#123;&#125;;     <span class=\"comment\">//创建一个对象</span></div><div class=\"line\">MyFunc.call(anObj); <span class=\"comment\">//将anObj对象作为this指针调用MyFunc函数</span></div></pre></td></tr></table></figure>\n<p>我们就可以这样理解，JavaScript先用new操作符创建了一个对象，紧接着就将这个对象作为this参数调用了后面的函数。其实，JavaScript内部就是这么做的，而且任何函数都可以被这样调用！但从 “anObj = new MyFunc()” 这种形式，我们又看到一个熟悉的身影，C++和C#不就是这样创建对象的吗？原来，条条大路通灵山，殊途同归啊！</p>\n<p>君看到此处也许会想，我们为什么不可以把这个MyFunc当作构造函数呢？恭喜你，答对了！JavaScript也是这么想的！请看下面的代码： </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;   <span class=\"comment\">//带参数的构造函数</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;   <span class=\"comment\">//将参数值赋给给this对象的属性</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.SayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;alert(<span class=\"string\">\"Hello, I'm \"</span> + <span class=\"keyword\">this</span>.name);&#125;;   <span class=\"comment\">//给this对象定义一个SayHello方法。</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Employee</span>(<span class=\"params\">name, salary</span>) </span>&#123;     <span class=\"comment\">//子构造函数</span></div><div class=\"line\">    Person.call(<span class=\"keyword\">this</span>, name);        <span class=\"comment\">//将this传给父构造函数</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.salary = salary;       <span class=\"comment\">//设置一个this的salary属性</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.ShowMeTheMoney = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;alert(<span class=\"keyword\">this</span>.name + <span class=\"string\">\" $\"</span> + <span class=\"keyword\">this</span>.salary);&#125;;  <span class=\"comment\">//添加ShowMeTheMoney方法。</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> BillGates = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Bill Gates\"</span>);   <span class=\"comment\">//用Person构造函数创建BillGates对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> SteveJobs = <span class=\"keyword\">new</span> Employee(<span class=\"string\">\"Steve Jobs\"</span>, <span class=\"number\">1234</span>);   <span class=\"comment\">//用Empolyee构造函数创建SteveJobs对象</span></div><div class=\"line\"></div><div class=\"line\">BillGates.SayHello();   <span class=\"comment\">//显示：I'm Bill Gates</span></div><div class=\"line\">SteveJobs.SayHello();   <span class=\"comment\">//显示：I'm Steve Jobs</span></div><div class=\"line\">SteveJobs.ShowMeTheMoney();   <span class=\"comment\">//显示：Steve Jobs $1234</span></div><div class=\"line\"></div><div class=\"line\">alert(BillGates.constructor == Person);  <span class=\"comment\">//显示：true</span></div><div class=\"line\">alert(SteveJobs.constructor == Employee);  <span class=\"comment\">//显示：true</span></div><div class=\"line\"></div><div class=\"line\">alert(BillGates.SayHello == SteveJobs.SayHello); <span class=\"comment\">//显示：false</span></div></pre></td></tr></table></figure>\n<p>这段代码表明，函数不但可以当作构造函数，而且还可以带参数，还可以为对象添加成员和方法。其中的第9行，Employee构造函数又将自己接收的this作为参数调用Person构造函数，这就是相当于调用基类的构造函数。第21、22行还表明这样一个意思：BillGates是由Person构造的，而SteveJobs是由Employee构造的。对象内置的constructor属性还指明了构造对象所用的具体函数！</p>\n<p>其实，如果你愿意把函数当作“类”的话，她就是“类”，因为她本来就有“类”的那些特征。难道不是吗？她生出的儿子各个都有相同的特征，而且构造函数也与类同名嘛！</p>\n<p>但要注意的是，用构造函数操作this对象创建出来的每一个对象，不但具有各自的成员数据，而且还具有各自的方法数据。换句话说，方法的代码体(体现函数逻辑的数据)在每一个对象中都存在一个副本。尽管每一个代码副本的逻辑是相同的，但对象们确实是各自保存了一份代码体。上例中的最后一句说明了这一实事，这也解释了JavaScript中的函数就是对象的概念。</p>\n<p>同一类的对象各自有一份方法代码显然是一种浪费。在传统的对象语言中，方法函数并不象JavaScript那样是个对象概念。即使也有象函数指针、方法指针或委托那样的变化形式，但其实质也是对同一份代码的引用。一般的对象语言很难遇到这种情况。</p>\n<p>不过，JavaScript语言有大的灵活性。我们可以先定义一份唯一的方法函数体，并在构造this对象时使用这唯一的函数对象作为其方法，就能共享方法逻辑。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SayHello</span>(<span class=\"params\"></span>) </span>&#123;     <span class=\"comment\">//先定义一份SayHello函数代码</span></div><div class=\"line\">    alert(<span class=\"string\">\"Hello, I'm \"</span> + <span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;   <span class=\"comment\">//带参数的构造函数</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;   <span class=\"comment\">//将参数值赋给给this对象的属性</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.SayHello = SayHello;   <span class=\"comment\">//给this对象SayHello方法赋值为前面那份SayHello代码。</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> BillGates = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Bill Gates\"</span>);   <span class=\"comment\">//创建BillGates对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> SteveJobs = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Steve Jobs\"</span>);   <span class=\"comment\">//创建SteveJobs对象</span></div><div class=\"line\"></div><div class=\"line\">alert(BillGates.SayHello == SteveJobs.SayHello); <span class=\"comment\">//显示：true</span></div></pre></td></tr></table></figure>\n<p>其中，最后一行的输出结果表明两个对象确实共享了一个函数对象。虽然，这段程序达到了共享了一份方法代码的目的，但却不怎么优雅。因为，定义SayHello方法时反映不出其与Person类的关系。“优雅”这个词用来形容代码，也不知道是谁先提出来的。不过，这个词反映了程序员已经从追求代码的正确、高效、可靠和易读等基础上，向着追求代码的美观感觉和艺术境界的层次发展，程序人生又多了些浪漫色彩。</p>\n<p>显然，JavaScript早想到了这一问题，她的设计者们为此提供了一个有趣的prototype概念。</p>\n<h2 id=\"初看原型\"><a href=\"#初看原型\" class=\"headerlink\" title=\"初看原型\"></a>初看原型</h2><p>prototype源自法语，软件界的标准翻译为“原型”，代表事物的初始形态，也含有模型和样板的意义。JavaScript中的prototype概念恰如其分地反映了这个词的内含，我们不能将其理解为C++的prototype那种预先声明的概念。</p>\n<p>JavaScript的所有function类型的对象都有一个prototype属性。这个prototype属性本身又是一个object类型的对象，因此我们也可以给这个prototype对象添加任意的属性和方法。既然prototype是对象的“原型”，那么由该函数构造出来的对象应该都会具有这个“原型”的特性。事实上，在构造函数的prototype上定义的所有属性和方法，都是可以通过其构造的对象直接访问和调用的。也可以这么说，prototype提供了一群同类对象共享属性和方法的机制。</p>\n<p>我们先来看看下面的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;   <span class=\"comment\">//设置对象属性，每个对象各自一份属性数据</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">Person.prototype.SayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)  //给<span class=\"title\">Person</span>函数的<span class=\"title\">prototype</span>添加<span class=\"title\">SayHello</span>方法。</div><div class=\"line\"></span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"Hello, I'm \"</span> + <span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> BillGates = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Bill Gates\"</span>);   <span class=\"comment\">//创建BillGates对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> SteveJobs = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Steve Jobs\"</span>);   <span class=\"comment\">//创建SteveJobs对象</span></div><div class=\"line\"></div><div class=\"line\">BillGates.SayHello();   <span class=\"comment\">//通过BillGates对象直接调用到SayHello方法</span></div><div class=\"line\">SteveJobs.SayHello();   <span class=\"comment\">//通过SteveJobs对象直接调用到SayHello方法</span></div><div class=\"line\"></div><div class=\"line\">alert(BillGates.SayHello == SteveJobs.SayHello); <span class=\"comment\">//因为两个对象是共享prototype的SayHello，所以显示：true</span></div></pre></td></tr></table></figure>\n<p>程序运行的结果表明，构造函数的prototype上定义的方法确实可以通过对象直接调用到，而且代码是共享的。显然，把方法设置到prototype的写法显得优雅多了，尽管调用形式没有变，但逻辑上却体现了方法与类的关系，相对前面的写法，更容易理解和组织代码。</p>\n<p>那么，对于多层次类型的构造函数情况又如何呢？</p>\n<p>我们再来看下面的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;   <span class=\"comment\">//基类构造函数</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">Person.prototype.SayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">//给基类构造函数的prototype添加方法</span></div><div class=\"line\">    alert(<span class=\"string\">\"Hello, I'm \"</span> + <span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Employee</span>(<span class=\"params\">name, salary</span>) </span>&#123; <span class=\"comment\">//子类构造函数</span></div><div class=\"line\">    Person.call(<span class=\"keyword\">this</span>, name);    <span class=\"comment\">//调用基类构造函数</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.salary = salary;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">Employee.prototype = <span class=\"keyword\">new</span> Person();  <span class=\"comment\">//建一个基类的对象作为子类原型的原型，这里很有意思</span></div><div class=\"line\"></div><div class=\"line\">Employee.prototype.ShowMeTheMoney = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">//给子类添构造函数的prototype添加方法</span></div><div class=\"line\">    alert(<span class=\"keyword\">this</span>.name + <span class=\"string\">\" $\"</span> + <span class=\"keyword\">this</span>.salary);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> BillGates = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Bill Gates\"</span>);   <span class=\"comment\">//创建基类Person的BillGates对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> SteveJobs = <span class=\"keyword\">new</span> Employee(<span class=\"string\">\"Steve Jobs\"</span>, <span class=\"number\">1234</span>);   <span class=\"comment\">//创建子类Employee的SteveJobs对象</span></div><div class=\"line\"></div><div class=\"line\">BillGates.SayHello();       <span class=\"comment\">//通过对象直接调用到prototype的方法</span></div><div class=\"line\">SteveJobs.SayHello();       <span class=\"comment\">//通过子类对象直接调用基类prototype的方法，关注！</span></div><div class=\"line\">SteveJobs.ShowMeTheMoney(); <span class=\"comment\">//通过子类对象直接调用子类prototype的方法</span></div><div class=\"line\"></div><div class=\"line\">alert(BillGates.SayHello == SteveJobs.SayHello); <span class=\"comment\">//显示：true，表明prototype的方法是共享的</span></div></pre></td></tr></table></figure>\n<p>这段代码的第17行，构造了一个基类的对象，并将其设为子类构造函数的prototype，这是很有意思的。这样做的目的就是为了第28行，通过子类对象也可以直接调用基类prototype的方法。为什么可以这样呢？</p>\n<p>原来，在JavaScript中，prototype不但能让对象共享自己财富，而且prototype还有寻根问祖的天性，从而使得先辈们的遗产可以代代相传。当从一个对象那里读取属性或调用方法时，如果该对象自身不存在这样的属性或方法，就会去自己关联的prototype对象那里寻找；如果prototype没有，又会去prototype自己关联的前辈prototype那里寻找，直到找到或追溯过程结束为止。</p>\n<p>在JavaScript内部，对象的属性和方法追溯机制是通过所谓的prototype链来实现的。当用new操作符构造对象时，也会同时将构造函数的prototype对象指派给新创建的对象，成为该对象内置的原型对象。对象内置的原型对象应该是对外不可见的，尽管有些浏览器(如Firefox)可以让我们访问这个内置原型对象，但并不建议这样做。内置的原型对象本身也是对象，也有自己关联的原型对象，这样就形成了所谓的原型链。</p>\n<p>在原型链的最末端，就是Object构造函数prototype属性指向的那一个原型对象。这个原型对象是所有对象的最老祖先，这个老祖宗实现了诸如toString等所有对象天生就该具有的方法。其他内置构造函数，如Function, Boolean, String, Date和RegExp等的prototype都是从这个老祖宗传承下来的，但他们各自又定义了自身的属性和方法，从而他们的子孙就表现出各自宗族的那些特征。</p>\n<p>这不就是“继承”吗？是的，这就是“继承”，是JavaScript特有的“原型继承”。</p>\n<p>“原型继承”是慈祥而又严厉的。原形对象将自己的属性和方法无私地贡献给孩子们使用，也并不强迫孩子们必须遵从，允许一些顽皮孩子按自己的兴趣和爱好独立行事。从这点上看，原型对象是一位慈祥的母亲。然而，任何一个孩子虽然可以我行我素，但却不能动原型对象既有的财产，因为那可能会影响到其他孩子的利益。从这一点上看，原型对象又象一位严厉的父亲。我们来看看下面的代码就可以理解这个意思了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">Person.prototype.company = <span class=\"string\">\"Microsoft\"</span>; <span class=\"comment\">//原型的属性</span></div><div class=\"line\"></div><div class=\"line\">Person.prototype.SayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)  //原型的方法</div><div class=\"line\"></span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"Hello, I'm \"</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">\" of \"</span> + <span class=\"keyword\">this</span>.company);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> BillGates = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Bill Gates\"</span>);</div><div class=\"line\">BillGates.SayHello();   <span class=\"comment\">//由于继承了原型的东西，规规矩矩输出：Hello, I'm Bill Gates</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> SteveJobs = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Steve Jobs\"</span>);</div><div class=\"line\">SteveJobs.company = <span class=\"string\">\"Apple\"</span>;    <span class=\"comment\">//设置自己的company属性，掩盖了原型的company属性</span></div><div class=\"line\">SteveJobs.SayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) //实现了自己的<span class=\"title\">SayHello</span>方法，掩盖了原型的<span class=\"title\">SayHello</span>方法</div><div class=\"line\"></span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"Hi, \"</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">\" like \"</span> + <span class=\"keyword\">this</span>.company + <span class=\"string\">\", ha ha ha \"</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">SteveJobs.SayHello();   <span class=\"comment\">//都是自己覆盖的属性和方法，输出：Hi, Steve Jobs like Apple, ha ha ha </span></div><div class=\"line\"></div><div class=\"line\">BillGates.SayHello();   <span class=\"comment\">//SteveJobs的覆盖没有影响原型对象，BillGates还是按老样子输出</span></div></pre></td></tr></table></figure>\n<p>对象可以掩盖原型对象的那些属性和方法，一个构造函数原型对象也可以掩盖上层构造函数原型对象既有的属性和方法。这种掩盖其实只是在对象自己身上创建了新的属性和方法，只不过这些属性和方法与原型对象的那些同名而已。JavaScript就是用这简单的掩盖机制实现了对象的“多态”性，与静态对象语言的虚函数和重载(override)概念不谋而合。</p>\n<p>然而，比静态对象语言更神奇的是，我们可以随时给原型对象动态添加新的属性和方法，从而动态地扩展基类的功能特性。这在静态对象语言中是很难想象的。我们来看下面的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">Person.prototype.SayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)  //建立对象前定义的方法</div><div class=\"line\"></span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"Hello, I'm \"</span> + <span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> BillGates = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Bill Gates\"</span>);   <span class=\"comment\">//建立对象</span></div><div class=\"line\"></div><div class=\"line\">BillGates.SayHello();</div><div class=\"line\"></div><div class=\"line\">Person.prototype.Retire = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)    //建立对象后再动态扩展原型的方法</div><div class=\"line\"></span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"Poor \"</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">\", bye bye!\"</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">BillGates.Retire(); <span class=\"comment\">//动态扩展的方法即可被先前建立的对象立即调用</span></div></pre></td></tr></table></figure>\n<p>阿弥佗佛，原型继承竟然可以玩出有这样的法术！</p>\n<h2 id=\"原型扩展\"><a href=\"#原型扩展\" class=\"headerlink\" title=\"原型扩展\"></a>原型扩展</h2><p> 想必君的悟性极高，可能你会这样想：如果在JavaScript内置的那些如Object和Function等函数的prototype上添加些新的方法和属性，是不是就能扩展JavaScript的功能呢？</p>\n<p>那么，恭喜你，你得到了！</p>\n<p>在AJAX技术迅猛发展的今天，许多成功的AJAX项目的JavaScript运行库都大量扩展了内置函数的prototype功能。比如微软的ASP.NET AJAX，就给这些内置函数及其prototype添加了大量的新特性，从而增强了JavaScript的功能。</p>\n<p>我们来看一段摘自MicrosoftAjax.debug.js中的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">String</span>.prototype.trim = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">String$trim</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length !== <span class=\"number\">0</span>) <span class=\"keyword\">throw</span> <span class=\"built_in\">Error</span>.parameterCount();</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/^\\s+|\\s+$/g</span>, <span class=\"string\">''</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这段代码就是给内置String函数的prototype扩展了一个trim方法，于是所有的String类对象都有了trim方法了。有了这个扩展，今后要去除字符串两段的空白，就不用再分别处理了，因为任何字符串都有了这个扩展功能，只要调用即可，真的很方便。</p>\n<p>当然，几乎很少有人去给Object的prototype添加方法，因为那会影响到所有的对象，除非在你的架构中这种方法的确是所有对象都需要的。</p>\n<p>前两年，微软在设计AJAX类库的初期，用了一种被称为“闭包”(closure)的技术来模拟“类”。其大致模型如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">firstName, lastName, age</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//私有变量：</span></div><div class=\"line\">    <span class=\"keyword\">var</span> _firstName = firstName;</div><div class=\"line\">    <span class=\"keyword\">var</span> _lastName = lastName;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//公共变量:</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//方法：</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>(firstName + <span class=\"string\">\" \"</span> + lastName);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">this</span>.SayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">\"Hello, I'm \"</span> + firstName + <span class=\"string\">\" \"</span> + lastName);</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> BillGates = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Bill\"</span>, <span class=\"string\">\"Gates\"</span>, <span class=\"number\">53</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> SteveJobs = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Steve\"</span>, <span class=\"string\">\"Jobs\"</span>, <span class=\"number\">53</span>);</div><div class=\"line\"></div><div class=\"line\">BillGates.SayHello();</div><div class=\"line\">SteveJobs.SayHello();</div><div class=\"line\">alert(BillGates.getName() + <span class=\"string\">\" \"</span> + BillGates.age);</div><div class=\"line\">alert(BillGates.firstName);     <span class=\"comment\">//这里不能访问到私有变量</span></div></pre></td></tr></table></figure>\n<p>很显然，这种模型的类描述特别象C#语言的描述形式，在一个构造函数里依次定义了私有成员、公共属性和可用的方法，显得非常优雅嘛。特别是“闭包”机制可以模拟对私有成员的保护机制，做得非常漂亮。</p>\n<p>所谓的“闭包”，就是在构造函数体内定义另外的函数作为目标对象的方法函数，而这个对象的方法函数反过来引用外层外层函数体中的临时变量。这使得只要目标对象在生存期内始终能保持其方法，就能间接保持原构造函数体当时用到的临时变量值。尽管最开始的构造函数调用已经结束，临时变量的名称也都消失了，但在目标对象的方法内却始终能引用到该变量的值，而且该值只能通这种方法来访问。即使再次调用相同的构造函数，但只会生成新对象和方法，新的临时变量只是对应新的值，和上次那次调用的是各自独立的。的确很巧妙！</p>\n<p>但是前面我们说过，给每一个对象设置一份方法是一种很大的浪费。还有，“闭包”这种间接保持变量值的机制，往往会给JavaSript的垃圾回收器制造难题。特别是遇到对象间复杂的循环引用时，垃圾回收的判断逻辑非常复杂。无独有偶，IE浏览器早期版本确实存在JavaSript垃圾回收方面的内存泄漏问题。再加上“闭包”模型在性能测试方面的表现不佳，微软最终放弃了“闭包”模型，而改用“原型”模型。正所谓“有得必有失”嘛。</p>\n<p>原型模型需要一个构造函数来定义对象的成员，而方法却依附在该构造函数的原型上。大致写法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//定义构造函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;   <span class=\"comment\">//在构造函数中定义成员</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//方法定义到构造函数的prototype上</span></div><div class=\"line\">Person.prototype.SayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"Hello, I'm \"</span> + <span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;;    </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//子类构造函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Employee</span>(<span class=\"params\">name, salary</span>) </span>&#123;</div><div class=\"line\">    Person.call(<span class=\"keyword\">this</span>, name);    <span class=\"comment\">//调用上层构造函数</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.salary = salary;       <span class=\"comment\">//扩展的成员</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//子类构造函数首先需要用上层构造函数来建立prototype对象，实现继承的概念</span></div><div class=\"line\">Employee.prototype = <span class=\"keyword\">new</span> Person()   <span class=\"comment\">//只需要其prototype的方法，此对象的成员没有任何意义！</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//子类方法也定义到构造函数之上</span></div><div class=\"line\">Employee.prototype.ShowMeTheMoney = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</div><div class=\"line\"></span>&#123;</div><div class=\"line\">    alert(<span class=\"keyword\">this</span>.name + <span class=\"string\">\" $\"</span> + <span class=\"keyword\">this</span>.salary);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> BillGates = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Bill Gates\"</span>);</div><div class=\"line\">BillGates.SayHello();    </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> SteveJobs = <span class=\"keyword\">new</span> Employee(<span class=\"string\">\"Steve Jobs\"</span>, <span class=\"number\">1234</span>);</div><div class=\"line\">SteveJobs.SayHello();</div><div class=\"line\">SteveJobs.ShowMeTheMoney();</div></pre></td></tr></table></figure>\n<p>原型类模型虽然不能模拟真正的私有变量，而且也要分两部分来定义类，显得不怎么“优雅”。不过，对象间的方法是共享的，不会遇到垃圾回收问题，而且性能优于“闭包”模型。正所谓“有失必有得”嘛。</p>\n<p>在原型模型中，为了实现类继承，必须首先将子类构造函数的prototype设置为一个父类的对象实例。创建这个父类对象实例的目的就是为了构成原型链，以起到共享上层原型方法作用。但创建这个实例对象时，上层构造函数也会给它设置对象成员，这些对象成员对于继承来说是没有意义的。虽然，我们也没有给构造函数传递参数，但确实创建了若干没有用的成员，尽管其值是undefined，这也是一种浪费啊。</p>\n<p>唉！世界上没有完美的事情啊！</p>\n<h2 id=\"原型真谛\"><a href=\"#原型真谛\" class=\"headerlink\" title=\"原型真谛\"></a>原型真谛</h2><p>正当我们感概万分时，天空中一道红光闪过，祥云中出现了观音菩萨。只见她手持玉净瓶，轻拂翠柳枝，洒下几滴甘露，顿时让JavaScript又添新的灵气。</p>\n<p>观音洒下的甘露在JavaScript的世界里凝结成块，成为了一种称为“语法甘露”的东西。这种语法甘露可以让我们编写的代码看起来更象对象语言。</p>\n<p>要想知道这“语法甘露”为何物，就请君侧耳细听。</p>\n<p>在理解这些语法甘露之前，我们需要重新再回顾一下JavaScript构造对象的过程。</p>\n<p>我们已经知道，用 var anObject = new aFunction() 形式创建对象的过程实际上可以分为三步：第一步是建立一个新对象；第二步将该对象内置的原型对象设置为构造函数prototype引用的那个原型对象；第三步就是将该对象作为this参数调用构造函数，完成成员设置等初始化工作。对象建立之后，对象上的任何访问和操作都只与对象自身及其原型链上的那串对象有关，与构造函数再扯不上关系了。换句话说，构造函数只是在创建对象时起到介绍原型对象和初始化对象两个作用。</p>\n<p>那么，我们能否自己定义一个对象来当作原型，并在这个原型上描述类，然后将这个原型设置给新创建的对象，将其当作对象的类呢？我们又能否将这个原型中的一个方法当作构造函数，去初始化新建的对象呢？例如，我们定义这样一个原型对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Person = &#123;  <span class=\"comment\">//定义一个对象来作为原型类</span></div><div class=\"line\">    Create: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, age</span>) </span>&#123;  <span class=\"comment\">//这个当构造函数</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">SayHello</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">//定义方法</span></div><div class=\"line\">        alert(<span class=\"string\">\"Hello, I'm \"</span> + <span class=\"keyword\">this</span>.name);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">HowOld</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">//定义方法</span></div><div class=\"line\">        alert(<span class=\"keyword\">this</span>.name + <span class=\"string\">\" is \"</span> + <span class=\"keyword\">this</span>.age + <span class=\"string\">\" years old.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>这个JSON形式的写法多么象一个C#的类啊！既有构造函数，又有各种方法。如果可以用某种形式来创建对象，并将对象的内置的原型设置为上面这个“类”对象，不就相当于创建该类的对象了吗？</p>\n<p>但遗憾的是，我们几乎不能访问到对象内置的原型属性！尽管有些浏览器可以访问到对象的内置原型，但这样做的话就只能限定了用户必须使用那种浏览器。这也几乎不可行。</p>\n<p>那么，我们可不可以通过一个函数对象来做媒介，利用该函数对象的prototype属性来中转这个原型，并用new操作符传递给新建的对象呢？</p>\n<p>其实，象这样的代码就可以实现这一目标：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">anyfunc</span>(<span class=\"params\"></span>)</span>&#123;&#125;;           <span class=\"comment\">//定义一个函数躯壳</span></div><div class=\"line\">anyfunc.prototype = Person;     <span class=\"comment\">//将原型对象放到中转站prototype</span></div><div class=\"line\"><span class=\"keyword\">var</span> BillGates = <span class=\"keyword\">new</span> anyfunc();  <span class=\"comment\">//新建对象的内置原型将是我们期望的原型对象</span></div></pre></td></tr></table></figure>\n<p>不过，这个anyfunc函数只是一个躯壳，在使用过这个躯壳之后它就成了多余的东西了，而且这和直接使用构造函数来创建对象也没啥不同，有点不爽。</p>\n<p>可是，如果我们将这些代码写成一个通用函数，而那个函数躯壳也就成了函数内的函数，这个内部函数不就可以在外层函数退出作用域后自动消亡吗？而且，我们可以将原型对象作为通用函数的参数，让通用函数返回创建的对象。我们需要的就是下面这个形式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">New</span>(<span class=\"params\">aClass, aParams</span>) </span>&#123;   <span class=\"comment\">//通用创建函数</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">new_</span>(<span class=\"params\"></span>)     //定义临时的中转函数壳</div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        aClass.Create.apply(<span class=\"keyword\">this</span>, aParams);   <span class=\"comment\">//调用原型中定义的的构造函数，中转构造逻辑及构造参数</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    new_.prototype = aClass;    <span class=\"comment\">//准备中转原型对象</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> new_();          <span class=\"comment\">//返回建立最终建立的对象</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> Person = &#123;        <span class=\"comment\">//定义的类</span></div><div class=\"line\">    Create: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, age</span>) </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">SayHello</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">        alert(<span class=\"string\">\"Hello, I'm \"</span> + <span class=\"keyword\">this</span>.name);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">HowOld</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        alert(<span class=\"keyword\">this</span>.name + <span class=\"string\">\" is \"</span> + <span class=\"keyword\">this</span>.age + <span class=\"string\">\" years old.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> BillGates = New(Person, [<span class=\"string\">\"Bill Gates\"</span>, <span class=\"number\">53</span>]);  <span class=\"comment\">//调用通用函数创建对象，并以数组形式传递构造参数</span></div><div class=\"line\">BillGates.SayHello();</div><div class=\"line\">BillGates.HowOld();</div><div class=\"line\"></div><div class=\"line\">alert(BillGates.constructor == <span class=\"built_in\">Object</span>);     <span class=\"comment\">//输出：true</span></div></pre></td></tr></table></figure>\n<p>这里的通用函数New()就是一个“语法甘露”！这个语法甘露不但中转了原型对象，还中转了构造函数逻辑及构造参数。</p>\n<p>有趣的是，每次创建完对象退出New函数作用域时，临时的 new<em> 函数对象会被自动释放。由于 new</em> 的prototype属性被设置为新的原型对象，其原来的原型对象和new_之间就已解开了引用链，临时函数及其原来的原型对象都会被正确回收了。上面代码的最后一句证明，新创建的对象的constructor属性返回的是Object函数。其实新建的对象自己及其原型里没有constructor属性，那返回的只是最顶层原型对象的构造函数，即Object。</p>\n<p>有了New这个语法甘露，类的定义就很像C#那些静态对象语言的形式了，这样的代码显得多么文静而优雅啊！</p>\n<p>当然，这个代码仅仅展示了“语法甘露”的概念。我们还需要多一些的语法甘露，才能实现用简洁而优雅的代码书写类层次及其继承关系。好了，我们再来看一个更丰富的示例吧：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//语法甘露：</span></div><div class=\"line\"><span class=\"keyword\">var</span> object =    <span class=\"comment\">//定义小写的object基本类，用于实现最基础的方法等</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">isA</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">aType</span>)   //一个判断类与类之间以及对象与类之间关系的基础方法</div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span>(self)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (self == aType)</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">            self = self.Type;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Class</span>(<span class=\"params\">aBaseClass, aClassDefine</span>)    //创建类的函数，用于声明类及继承关系</div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">class_</span>(<span class=\"params\"></span>)   //创建类的临时函数壳</div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.Type = aBaseClass;    <span class=\"comment\">//我们给每一个类约定一个Type属性，引用其继承的类</span></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> member <span class=\"keyword\">in</span> aClassDefine)</div><div class=\"line\">            <span class=\"keyword\">this</span>[member] = aClassDefine[member];    <span class=\"comment\">//复制类的全部定义到当前创建的类</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    class_.prototype = aBaseClass;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> class_();</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">New</span>(<span class=\"params\">aClass, aParams</span>)   //创建对象的函数，用于任意类的对象创建</div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">new_</span>(<span class=\"params\"></span>)     //创建对象的临时函数壳</div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.Type = aClass;    <span class=\"comment\">//我们也给每一个对象约定一个Type属性，据此可以访问到对象所属的类</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (aClass.Create)</div><div class=\"line\">            aClass.Create.apply(<span class=\"keyword\">this</span>, aParams);   <span class=\"comment\">//我们约定所有类的构造函数都叫Create，这和DELPHI比较相似</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    new_.prototype = aClass;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> new_();</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//语法甘露的应用效果：    </span></div><div class=\"line\"><span class=\"keyword\">var</span> Person = Class(object,      <span class=\"comment\">//派生至object基本类</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">Create</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, age</span>)</div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">SayHello</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">\"Hello, I'm \"</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">\", \"</span> + <span class=\"keyword\">this</span>.age + <span class=\"string\">\" years old.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> Employee = Class(Person,    <span class=\"comment\">//派生至Person类，是不是和一般对象语言很相似？</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">Create</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, age, salary</span>)</div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        Person.Create.call(<span class=\"keyword\">this</span>, name, age);  <span class=\"comment\">//调用基类的构造函数</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.salary = salary;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">ShowMeTheMoney</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        alert(<span class=\"keyword\">this</span>.name + <span class=\"string\">\" $\"</span> + <span class=\"keyword\">this</span>.salary);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> BillGates = New(Person, [<span class=\"string\">\"Bill Gates\"</span>, <span class=\"number\">53</span>]);</div><div class=\"line\"><span class=\"keyword\">var</span> SteveJobs = New(Employee, [<span class=\"string\">\"Steve Jobs\"</span>, <span class=\"number\">53</span>, <span class=\"number\">1234</span>]);</div><div class=\"line\">BillGates.SayHello();</div><div class=\"line\">SteveJobs.SayHello();</div><div class=\"line\">SteveJobs.ShowMeTheMoney();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> LittleBill = New(BillGates.Type, [<span class=\"string\">\"Little Bill\"</span>, <span class=\"number\">6</span>]);   <span class=\"comment\">//根据BillGate的类型创建LittleBill</span></div><div class=\"line\">LittleBill.SayHello();</div><div class=\"line\"></div><div class=\"line\">alert(BillGates.isA(Person));       <span class=\"comment\">//true</span></div><div class=\"line\">alert(BillGates.isA(Employee));     <span class=\"comment\">//false</span></div><div class=\"line\">alert(SteveJobs.isA(Person));       <span class=\"comment\">//true</span></div><div class=\"line\">alert(Person.isA(Employee));        <span class=\"comment\">//false</span></div><div class=\"line\">alert(Employee.isA(Person));        <span class=\"comment\">//true</span></div></pre></td></tr></table></figure>\n<p>“语法甘露”不用太多，只要那么一点点，就能改观整个代码的易读性和流畅性，从而让代码显得更优雅。有了这些语法甘露，JavaScript就很像一般对象语言了，写起代码了感觉也就爽多了！</p>\n<p>令人高兴的是，受这些甘露滋养的JavaScript程序效率会更高。因为其原型对象里既没有了毫无用处的那些对象级的成员，而且还不存在constructor属性体，少了与构造函数间的牵连，但依旧保持了方法的共享性。这让JavaScript在追溯原型链和搜索属性及方法时，少费许多工夫啊。</p>\n<p>我们就把这种形式称为“甘露模型”吧！其实，这种“甘露模型”的原型用法才是符合prototype概念的本意，才是的JavaScript原型的真谛！</p>\n<p>想必微软那些设计AJAX架构的工程师看到这个甘露模型时，肯定后悔没有早点把AJAX部门从美国搬到咱中国的观音庙来，错过了观音菩萨的点化。当然，我们也只能是在代码的示例中，把Bill Gates当作对象玩玩，真要让他放弃上帝转而皈依我佛肯定是不容易的，机缘未到啊！如果哪天你在微软新出的AJAX类库中看到这种甘露模型，那才是真正的缘分！</p>\n<h2 id=\"编程的快乐\"><a href=\"#编程的快乐\" class=\"headerlink\" title=\"编程的快乐\"></a>编程的快乐</h2><p>在软件工业迅猛发展的今天，各式各样的编程语言层出不穷，新语言的诞生，旧语言的演化，似乎已经让我们眼花缭乱。为了适应面向对象编程的潮流，JavaScript语言也在向完全面向对象的方向发展，新的JavaScript标准已经从语义上扩展了许多面向对象的新元素。与此相反的是，许多静态的对象语言也在向JavaScript的那种简洁而幽雅的方向发展。例如，新版本的C#语言就吸收了JSON那样的简洁表示法，以及一些其他形式的JavaScript特性。</p>\n<p>我们应该看到，随着RIA(强互联应用)的发展和普及，AJAX技术也将逐渐淡出江湖，JavaScript也将最终消失或演化成其他形式的语言。但不管编程语言如何发展和演化，编程世界永远都会在“数据”与“代码”这千丝万缕的纠缠中保持着无限的生机。只要我们能看透这一点，我们就能很容易地学习和理解软件世界的各种新事物。不管是已熟悉的过程式编程，还是正在发展的函数式编程，以及未来量子纠缠态的大规模并行式编程，我们都有足够的法力来化解一切复杂的难题。</p>\n<p>佛最后淡淡地说：只要我们放下那些表面的“类”，放下那些对象的“自我”，就能达到一种“对象本无根，类型亦无形”的境界，从而将自我融入到整个宇宙的生命轮循环中。我们将没有自我，也没有自私的欲望，你就是我，我就是你，你中有我，我中有你。这时，我们再看这生机勃勃的编程世界时，我们的内心将自然生起无限的慈爱之心，这种慈爱之心不是虚伪而是真诚的。关爱他人就是关爱自己，就是关爱这世界中的一切。那么，我们的心是永远快乐的，我们的程序是永远快乐的，我们的类是永远快乐的，我们的对象也是永远快乐的。这就是编程的极乐！</p>\n<p>说到这里，在座的比丘都犹如醍醐灌顶，心中豁然开朗。看看左边这位早已喜不自禁，再看看右边那位也是心花怒放。</p>\n<p>蓦然回首时，唯见君拈花微笑…</p>\n<blockquote>\n<p>原著：李战(leadzen).深圳 2008-2-23<br><a href=\"http://www.cnblogs.com/leadzen/archive/2008/02/25/1073404.html\">悟透JavaScript</a></p>\n</blockquote>\n"},{"title":"Hello World","date":"2016-12-06T08:56:29.000Z","_content":"那就开始吧，或许还不晚。\n\n``` javascript\nvar javaScript = {\n    // ...\n}\n```\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: \"2016-12-06 16:56:29\"\n---\n那就开始吧，或许还不晚。\n\n``` javascript\nvar javaScript = {\n    // ...\n}\n```\n","slug":"hello-world","published":1,"updated":"2016-12-07T08:46:53.421Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj17hdrrh0005hkaj7f2poqeb","content":"<p>那就开始吧，或许还不晚。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> javaScript = &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>那就开始吧，或许还不晚。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> javaScript = &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"H5皮秒游戏总结","date":"2016-12-26T08:22:12.000Z","_content":"\n\n### 写在前面\n\n前段时间公司接的一个小项目，开发在微信上传播的小游戏。\n\n游戏的流程就是提供三种瑕疵的美女图片斑点、皱纹、纹身，需要用户点击来擦除斑点、皱纹、纹身，并计时统计总的擦除用时，来进行排名。\n\n接到项目的具体需求，心里想到的就是我们经常见到的刮刮乐，刮开图层显示中奖信息，这个原理跟要开发的小游戏基本一致，及擦除掉有斑点皱纹纹身的图层显示完美的一层即可。虽然这种效果经常遇见，具体的代码实现没有去看过。\n\n\n### 过程\n\n首先，使用Canvas是肯定的了。能力的不过关，自己从0开始去写这个东西不太现实，网上搜到一些大神们写好的Demo，基本都能匹配这次开发的需求点。擦除瑕疵图层到指定百分比及显示完美图层并停止当前的计时。\n\n找了几个例子，并在本地实现简单的Demo，实现过程中，也慢慢的发现跟自己开发不能匹配的问题，例如我需要这块的Canvas能够实现：\n\n- 擦除动作（开始，结束）回调\n- 自定义笔触大小\n- 笔触边缘要柔和（虚化）\n- 能够锁定画布，在达到指定擦除范围的百分比后我需要锁定画布，防止误操作\n- 能够指定动作，项目只需要点击的动作，禁止手指移动来擦除\n\n通过在Github上寻找，锁定了插件 [wScratchPad](https://github.com/websanova/wScratchPad) 来完成这次的开发。\n\n具体使用：\n```javascript\n// 设置\n$('#elem').wScratchPad({\n    size        : 5,          // 笔触尺寸\n    bg          : '#cacaca',  // 背景可以是颜色和图片\n    fg          : '#6699ff',  // 前景可以是颜色和图片（也就是需要擦掉的层）\n    realtime    : true,       // 实时显示已擦除百分比\n    scratchDown : function(e, percent){\n        console.log(percent);\n    },\n    scratchMove : function(e, percent){\n        console.log(percent);\n    },\n    scratchUp   : function(e, percent){\n        console.log(percent);\n    },\n    cursor      : 'crosshair' // 鼠标样式（可以是图片）\n});\n\n// 方法\n$('#elem').wScratchPad('reset'); // 重置画布\n$('#elem').wScratchPad('clear'); // 清除画布\n$('#elem').wScratchPad('enabled', <boolean>); // 是否开启 默认true\n```\n\n\n### 遇到的问题\n- 插件本身笔触是生硬的，去查了下Canvas的API把笔触修改为边缘羽化效果，`createRadialGradient`\n- 项目只需要点击擦除，禁止了手指移动擦除，插件基础上增加了 `disabledMove: false` 选项\n\n**处理音频(audio)遇到的问题**\n音频资源是客户提供的网易云音乐的资源，根据网上的方法，找到了该资源的真实mp3地址，尽然2.4MB，真实很大啊，先不管大了。\n\n音频这块，我一开始的思路：\n关于[Audio](http://www.w3school.com.cn/jsref/dom_obj_audio.asp)\n\n需要实现的是进入页面自动播放音乐，点击开关停止播放，音乐ICON停止转动。然后需要知道，音频资源当前状态是否可以用了，判断 `readyState` 的状态。然有点问题，我因该先去知道音频资源是否已经加载成功，才可以去知道它的当前状态说否可以播放。关于怎么知道加载成功，我参考了两篇文章 [怎么判断 audio video 是否加载完](http://kaifage.com/notes/87/audio-ready.html)，[判断音乐是否加载怎么做？](https://segmentfault.com/q/1010000007183637)。其实最后上线，音频这块的优化我并没有做，找的理由就是催的及，懒得搞，我先给你上线再说吧。\n\n关于自动播放，在iPhone7的微信浏览器中是不自动播放的，于是又去查到这个 [轻松化解iOS系统及微信中不支持audio自动播放问题](http://webexp.cn/dlsd2016.html)，根据这个方法，自动播放的问题解决了。\n\n关于音乐持续播放的问题，因为跨页面了，貌似让一首音乐持续接着播放好像不容易实现，去看了下API， `currentTime` 设置或返回音频中的当前播放位置（以秒计）。我想法是在跳转也时候把 currentTime 的值通过 URL 传到下一页去，在下一页中去指定 `audio` 的 `currentTime`。在我去查这个问题的时候，好像没有看到关于 `currentTime` 的思路，想想也是，如果跳转挺多页的话岂不是要玩儿死，所以这个思路肯定是行不通的。\n\n有空我要先Demo下 `currentTime` 是个什么情况，及一些网易云音乐Web版是怎么做的。\n\n\n### CSS3动画性能\n发现使用 `box-shadow` 来做闪烁的效果，几个同时闪烁，会有明显的卡顿现象（小米4C），如果 用边缘羽化过的图片 来替换box-shadow的话，卡顿现象消失了。\n这里有两篇关于CSS3动画性能的文章：\n\n- [高性能 CSS3 动画](https://www.qianduan.net/high-performance-css3-animations/)\n- [CSS动画之硬件加速](https://www.w3cplus.com/css3/introduction-to-hardware-acceleration-css-animations.html)\n\n\n### 还可以更好的地方\n- 图片资源的预加载\n- 音频资源的预加载\n- JS文件合并\n- 手机上如果快速点击的话，擦除的速度会有明显的慢（小米4C）\n- 页面布局也需要花点时间再去调试\n\n### 吐槽\n- 能力不够就是累啊，加油吧。\n- 开发前再三的确认设计是否定稿，结果还是因为设计返工，整个重新整。WTF!!!\n- 致所有的UI设计师们，提供的PSD不分组命名是几个意思，量少就不说了。TM 一大堆形似图层副本的玩意儿，太浪费别人的时间了，当代码搬运工也很累的。\n\n[线上地址](http://www.searchsport.cn:8015/)，因为需要用户提供姓名和手机才可以进入，程序这块有明显的体验问题，比如第二天再来还是需要重新输入，而且程序走的是手机号不能重复，然并没有任何提示，输入不同的昵称相同的手机号，排行显示的是首次使用的昵称，解决记住登录状态的问题就OK了。\n\n**最后最后，希望自己下次能更好吧，至少不犯过去的Bugs。**\n","source":"_posts/h5-pimiao-game-project-summary.md","raw":"---\ntitle: H5皮秒游戏总结\ndate: 2016-12-26 16:22:12\ncategories: 项目总结\n---\n\n\n### 写在前面\n\n前段时间公司接的一个小项目，开发在微信上传播的小游戏。\n\n游戏的流程就是提供三种瑕疵的美女图片斑点、皱纹、纹身，需要用户点击来擦除斑点、皱纹、纹身，并计时统计总的擦除用时，来进行排名。\n\n接到项目的具体需求，心里想到的就是我们经常见到的刮刮乐，刮开图层显示中奖信息，这个原理跟要开发的小游戏基本一致，及擦除掉有斑点皱纹纹身的图层显示完美的一层即可。虽然这种效果经常遇见，具体的代码实现没有去看过。\n\n\n### 过程\n\n首先，使用Canvas是肯定的了。能力的不过关，自己从0开始去写这个东西不太现实，网上搜到一些大神们写好的Demo，基本都能匹配这次开发的需求点。擦除瑕疵图层到指定百分比及显示完美图层并停止当前的计时。\n\n找了几个例子，并在本地实现简单的Demo，实现过程中，也慢慢的发现跟自己开发不能匹配的问题，例如我需要这块的Canvas能够实现：\n\n- 擦除动作（开始，结束）回调\n- 自定义笔触大小\n- 笔触边缘要柔和（虚化）\n- 能够锁定画布，在达到指定擦除范围的百分比后我需要锁定画布，防止误操作\n- 能够指定动作，项目只需要点击的动作，禁止手指移动来擦除\n\n通过在Github上寻找，锁定了插件 [wScratchPad](https://github.com/websanova/wScratchPad) 来完成这次的开发。\n\n具体使用：\n```javascript\n// 设置\n$('#elem').wScratchPad({\n    size        : 5,          // 笔触尺寸\n    bg          : '#cacaca',  // 背景可以是颜色和图片\n    fg          : '#6699ff',  // 前景可以是颜色和图片（也就是需要擦掉的层）\n    realtime    : true,       // 实时显示已擦除百分比\n    scratchDown : function(e, percent){\n        console.log(percent);\n    },\n    scratchMove : function(e, percent){\n        console.log(percent);\n    },\n    scratchUp   : function(e, percent){\n        console.log(percent);\n    },\n    cursor      : 'crosshair' // 鼠标样式（可以是图片）\n});\n\n// 方法\n$('#elem').wScratchPad('reset'); // 重置画布\n$('#elem').wScratchPad('clear'); // 清除画布\n$('#elem').wScratchPad('enabled', <boolean>); // 是否开启 默认true\n```\n\n\n### 遇到的问题\n- 插件本身笔触是生硬的，去查了下Canvas的API把笔触修改为边缘羽化效果，`createRadialGradient`\n- 项目只需要点击擦除，禁止了手指移动擦除，插件基础上增加了 `disabledMove: false` 选项\n\n**处理音频(audio)遇到的问题**\n音频资源是客户提供的网易云音乐的资源，根据网上的方法，找到了该资源的真实mp3地址，尽然2.4MB，真实很大啊，先不管大了。\n\n音频这块，我一开始的思路：\n关于[Audio](http://www.w3school.com.cn/jsref/dom_obj_audio.asp)\n\n需要实现的是进入页面自动播放音乐，点击开关停止播放，音乐ICON停止转动。然后需要知道，音频资源当前状态是否可以用了，判断 `readyState` 的状态。然有点问题，我因该先去知道音频资源是否已经加载成功，才可以去知道它的当前状态说否可以播放。关于怎么知道加载成功，我参考了两篇文章 [怎么判断 audio video 是否加载完](http://kaifage.com/notes/87/audio-ready.html)，[判断音乐是否加载怎么做？](https://segmentfault.com/q/1010000007183637)。其实最后上线，音频这块的优化我并没有做，找的理由就是催的及，懒得搞，我先给你上线再说吧。\n\n关于自动播放，在iPhone7的微信浏览器中是不自动播放的，于是又去查到这个 [轻松化解iOS系统及微信中不支持audio自动播放问题](http://webexp.cn/dlsd2016.html)，根据这个方法，自动播放的问题解决了。\n\n关于音乐持续播放的问题，因为跨页面了，貌似让一首音乐持续接着播放好像不容易实现，去看了下API， `currentTime` 设置或返回音频中的当前播放位置（以秒计）。我想法是在跳转也时候把 currentTime 的值通过 URL 传到下一页去，在下一页中去指定 `audio` 的 `currentTime`。在我去查这个问题的时候，好像没有看到关于 `currentTime` 的思路，想想也是，如果跳转挺多页的话岂不是要玩儿死，所以这个思路肯定是行不通的。\n\n有空我要先Demo下 `currentTime` 是个什么情况，及一些网易云音乐Web版是怎么做的。\n\n\n### CSS3动画性能\n发现使用 `box-shadow` 来做闪烁的效果，几个同时闪烁，会有明显的卡顿现象（小米4C），如果 用边缘羽化过的图片 来替换box-shadow的话，卡顿现象消失了。\n这里有两篇关于CSS3动画性能的文章：\n\n- [高性能 CSS3 动画](https://www.qianduan.net/high-performance-css3-animations/)\n- [CSS动画之硬件加速](https://www.w3cplus.com/css3/introduction-to-hardware-acceleration-css-animations.html)\n\n\n### 还可以更好的地方\n- 图片资源的预加载\n- 音频资源的预加载\n- JS文件合并\n- 手机上如果快速点击的话，擦除的速度会有明显的慢（小米4C）\n- 页面布局也需要花点时间再去调试\n\n### 吐槽\n- 能力不够就是累啊，加油吧。\n- 开发前再三的确认设计是否定稿，结果还是因为设计返工，整个重新整。WTF!!!\n- 致所有的UI设计师们，提供的PSD不分组命名是几个意思，量少就不说了。TM 一大堆形似图层副本的玩意儿，太浪费别人的时间了，当代码搬运工也很累的。\n\n[线上地址](http://www.searchsport.cn:8015/)，因为需要用户提供姓名和手机才可以进入，程序这块有明显的体验问题，比如第二天再来还是需要重新输入，而且程序走的是手机号不能重复，然并没有任何提示，输入不同的昵称相同的手机号，排行显示的是首次使用的昵称，解决记住登录状态的问题就OK了。\n\n**最后最后，希望自己下次能更好吧，至少不犯过去的Bugs。**\n","slug":"h5-pimiao-game-project-summary","published":1,"updated":"2017-01-11T06:37:17.177Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj17hdrrk0007hkajfs0wiews","content":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>前段时间公司接的一个小项目，开发在微信上传播的小游戏。</p>\n<p>游戏的流程就是提供三种瑕疵的美女图片斑点、皱纹、纹身，需要用户点击来擦除斑点、皱纹、纹身，并计时统计总的擦除用时，来进行排名。</p>\n<p>接到项目的具体需求，心里想到的就是我们经常见到的刮刮乐，刮开图层显示中奖信息，这个原理跟要开发的小游戏基本一致，及擦除掉有斑点皱纹纹身的图层显示完美的一层即可。虽然这种效果经常遇见，具体的代码实现没有去看过。</p>\n<h3 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h3><p>首先，使用Canvas是肯定的了。能力的不过关，自己从0开始去写这个东西不太现实，网上搜到一些大神们写好的Demo，基本都能匹配这次开发的需求点。擦除瑕疵图层到指定百分比及显示完美图层并停止当前的计时。</p>\n<p>找了几个例子，并在本地实现简单的Demo，实现过程中，也慢慢的发现跟自己开发不能匹配的问题，例如我需要这块的Canvas能够实现：</p>\n<ul>\n<li>擦除动作（开始，结束）回调</li>\n<li>自定义笔触大小</li>\n<li>笔触边缘要柔和（虚化）</li>\n<li>能够锁定画布，在达到指定擦除范围的百分比后我需要锁定画布，防止误操作</li>\n<li>能够指定动作，项目只需要点击的动作，禁止手指移动来擦除</li>\n</ul>\n<p>通过在Github上寻找，锁定了插件 <a href=\"https://github.com/websanova/wScratchPad\" target=\"_blank\" rel=\"external\">wScratchPad</a> 来完成这次的开发。</p>\n<p>具体使用：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 设置</span></div><div class=\"line\">$(<span class=\"string\">'#elem'</span>).wScratchPad(&#123;</div><div class=\"line\">    <span class=\"attr\">size</span>        : <span class=\"number\">5</span>,          <span class=\"comment\">// 笔触尺寸</span></div><div class=\"line\">    bg          : <span class=\"string\">'#cacaca'</span>,  <span class=\"comment\">// 背景可以是颜色和图片</span></div><div class=\"line\">    fg          : <span class=\"string\">'#6699ff'</span>,  <span class=\"comment\">// 前景可以是颜色和图片（也就是需要擦掉的层）</span></div><div class=\"line\">    realtime    : <span class=\"literal\">true</span>,       <span class=\"comment\">// 实时显示已擦除百分比</span></div><div class=\"line\">    scratchDown : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e, percent</span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(percent);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">scratchMove</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e, percent</span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(percent);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">scratchUp</span>   : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e, percent</span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(percent);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">cursor</span>      : <span class=\"string\">'crosshair'</span> <span class=\"comment\">// 鼠标样式（可以是图片）</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 方法</span></div><div class=\"line\">$(<span class=\"string\">'#elem'</span>).wScratchPad(<span class=\"string\">'reset'</span>); <span class=\"comment\">// 重置画布</span></div><div class=\"line\">$(<span class=\"string\">'#elem'</span>).wScratchPad(<span class=\"string\">'clear'</span>); <span class=\"comment\">// 清除画布</span></div><div class=\"line\">$(<span class=\"string\">'#elem'</span>).wScratchPad(<span class=\"string\">'enabled'</span>, &lt;boolean&gt;); <span class=\"comment\">// 是否开启 默认true</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h3><ul>\n<li>插件本身笔触是生硬的，去查了下Canvas的API把笔触修改为边缘羽化效果，<code>createRadialGradient</code></li>\n<li>项目只需要点击擦除，禁止了手指移动擦除，插件基础上增加了 <code>disabledMove: false</code> 选项</li>\n</ul>\n<p><strong>处理音频(audio)遇到的问题</strong><br>音频资源是客户提供的网易云音乐的资源，根据网上的方法，找到了该资源的真实mp3地址，尽然2.4MB，真实很大啊，先不管大了。</p>\n<p>音频这块，我一开始的思路：<br>关于<a href=\"http://www.w3school.com.cn/jsref/dom_obj_audio.asp\" target=\"_blank\" rel=\"external\">Audio</a></p>\n<p>需要实现的是进入页面自动播放音乐，点击开关停止播放，音乐ICON停止转动。然后需要知道，音频资源当前状态是否可以用了，判断 <code>readyState</code> 的状态。然有点问题，我因该先去知道音频资源是否已经加载成功，才可以去知道它的当前状态说否可以播放。关于怎么知道加载成功，我参考了两篇文章 <a href=\"http://kaifage.com/notes/87/audio-ready.html\" target=\"_blank\" rel=\"external\">怎么判断 audio video 是否加载完</a>，<a href=\"https://segmentfault.com/q/1010000007183637\" target=\"_blank\" rel=\"external\">判断音乐是否加载怎么做？</a>。其实最后上线，音频这块的优化我并没有做，找的理由就是催的及，懒得搞，我先给你上线再说吧。</p>\n<p>关于自动播放，在iPhone7的微信浏览器中是不自动播放的，于是又去查到这个 <a href=\"http://webexp.cn/dlsd2016.html\" target=\"_blank\" rel=\"external\">轻松化解iOS系统及微信中不支持audio自动播放问题</a>，根据这个方法，自动播放的问题解决了。</p>\n<p>关于音乐持续播放的问题，因为跨页面了，貌似让一首音乐持续接着播放好像不容易实现，去看了下API， <code>currentTime</code> 设置或返回音频中的当前播放位置（以秒计）。我想法是在跳转也时候把 currentTime 的值通过 URL 传到下一页去，在下一页中去指定 <code>audio</code> 的 <code>currentTime</code>。在我去查这个问题的时候，好像没有看到关于 <code>currentTime</code> 的思路，想想也是，如果跳转挺多页的话岂不是要玩儿死，所以这个思路肯定是行不通的。</p>\n<p>有空我要先Demo下 <code>currentTime</code> 是个什么情况，及一些网易云音乐Web版是怎么做的。</p>\n<h3 id=\"CSS3动画性能\"><a href=\"#CSS3动画性能\" class=\"headerlink\" title=\"CSS3动画性能\"></a>CSS3动画性能</h3><p>发现使用 <code>box-shadow</code> 来做闪烁的效果，几个同时闪烁，会有明显的卡顿现象（小米4C），如果 用边缘羽化过的图片 来替换box-shadow的话，卡顿现象消失了。<br>这里有两篇关于CSS3动画性能的文章：</p>\n<ul>\n<li><a href=\"https://www.qianduan.net/high-performance-css3-animations/\" target=\"_blank\" rel=\"external\">高性能 CSS3 动画</a></li>\n<li><a href=\"https://www.w3cplus.com/css3/introduction-to-hardware-acceleration-css-animations.html\" target=\"_blank\" rel=\"external\">CSS动画之硬件加速</a></li>\n</ul>\n<h3 id=\"还可以更好的地方\"><a href=\"#还可以更好的地方\" class=\"headerlink\" title=\"还可以更好的地方\"></a>还可以更好的地方</h3><ul>\n<li>图片资源的预加载</li>\n<li>音频资源的预加载</li>\n<li>JS文件合并</li>\n<li>手机上如果快速点击的话，擦除的速度会有明显的慢（小米4C）</li>\n<li>页面布局也需要花点时间再去调试</li>\n</ul>\n<h3 id=\"吐槽\"><a href=\"#吐槽\" class=\"headerlink\" title=\"吐槽\"></a>吐槽</h3><ul>\n<li>能力不够就是累啊，加油吧。</li>\n<li>开发前再三的确认设计是否定稿，结果还是因为设计返工，整个重新整。WTF!!!</li>\n<li>致所有的UI设计师们，提供的PSD不分组命名是几个意思，量少就不说了。TM 一大堆形似图层副本的玩意儿，太浪费别人的时间了，当代码搬运工也很累的。</li>\n</ul>\n<p><a href=\"http://www.searchsport.cn:8015/\" target=\"_blank\" rel=\"external\">线上地址</a>，因为需要用户提供姓名和手机才可以进入，程序这块有明显的体验问题，比如第二天再来还是需要重新输入，而且程序走的是手机号不能重复，然并没有任何提示，输入不同的昵称相同的手机号，排行显示的是首次使用的昵称，解决记住登录状态的问题就OK了。</p>\n<p><strong>最后最后，希望自己下次能更好吧，至少不犯过去的Bugs。</strong></p>\n","excerpt":"","more":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>前段时间公司接的一个小项目，开发在微信上传播的小游戏。</p>\n<p>游戏的流程就是提供三种瑕疵的美女图片斑点、皱纹、纹身，需要用户点击来擦除斑点、皱纹、纹身，并计时统计总的擦除用时，来进行排名。</p>\n<p>接到项目的具体需求，心里想到的就是我们经常见到的刮刮乐，刮开图层显示中奖信息，这个原理跟要开发的小游戏基本一致，及擦除掉有斑点皱纹纹身的图层显示完美的一层即可。虽然这种效果经常遇见，具体的代码实现没有去看过。</p>\n<h3 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h3><p>首先，使用Canvas是肯定的了。能力的不过关，自己从0开始去写这个东西不太现实，网上搜到一些大神们写好的Demo，基本都能匹配这次开发的需求点。擦除瑕疵图层到指定百分比及显示完美图层并停止当前的计时。</p>\n<p>找了几个例子，并在本地实现简单的Demo，实现过程中，也慢慢的发现跟自己开发不能匹配的问题，例如我需要这块的Canvas能够实现：</p>\n<ul>\n<li>擦除动作（开始，结束）回调</li>\n<li>自定义笔触大小</li>\n<li>笔触边缘要柔和（虚化）</li>\n<li>能够锁定画布，在达到指定擦除范围的百分比后我需要锁定画布，防止误操作</li>\n<li>能够指定动作，项目只需要点击的动作，禁止手指移动来擦除</li>\n</ul>\n<p>通过在Github上寻找，锁定了插件 <a href=\"https://github.com/websanova/wScratchPad\">wScratchPad</a> 来完成这次的开发。</p>\n<p>具体使用：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 设置</span></div><div class=\"line\">$(<span class=\"string\">'#elem'</span>).wScratchPad(&#123;</div><div class=\"line\">    <span class=\"attr\">size</span>        : <span class=\"number\">5</span>,          <span class=\"comment\">// 笔触尺寸</span></div><div class=\"line\">    bg          : <span class=\"string\">'#cacaca'</span>,  <span class=\"comment\">// 背景可以是颜色和图片</span></div><div class=\"line\">    fg          : <span class=\"string\">'#6699ff'</span>,  <span class=\"comment\">// 前景可以是颜色和图片（也就是需要擦掉的层）</span></div><div class=\"line\">    realtime    : <span class=\"literal\">true</span>,       <span class=\"comment\">// 实时显示已擦除百分比</span></div><div class=\"line\">    scratchDown : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e, percent</span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(percent);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">scratchMove</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e, percent</span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(percent);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">scratchUp</span>   : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e, percent</span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(percent);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">cursor</span>      : <span class=\"string\">'crosshair'</span> <span class=\"comment\">// 鼠标样式（可以是图片）</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 方法</span></div><div class=\"line\">$(<span class=\"string\">'#elem'</span>).wScratchPad(<span class=\"string\">'reset'</span>); <span class=\"comment\">// 重置画布</span></div><div class=\"line\">$(<span class=\"string\">'#elem'</span>).wScratchPad(<span class=\"string\">'clear'</span>); <span class=\"comment\">// 清除画布</span></div><div class=\"line\">$(<span class=\"string\">'#elem'</span>).wScratchPad(<span class=\"string\">'enabled'</span>, &lt;boolean&gt;); <span class=\"comment\">// 是否开启 默认true</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h3><ul>\n<li>插件本身笔触是生硬的，去查了下Canvas的API把笔触修改为边缘羽化效果，<code>createRadialGradient</code></li>\n<li>项目只需要点击擦除，禁止了手指移动擦除，插件基础上增加了 <code>disabledMove: false</code> 选项</li>\n</ul>\n<p><strong>处理音频(audio)遇到的问题</strong><br>音频资源是客户提供的网易云音乐的资源，根据网上的方法，找到了该资源的真实mp3地址，尽然2.4MB，真实很大啊，先不管大了。</p>\n<p>音频这块，我一开始的思路：<br>关于<a href=\"http://www.w3school.com.cn/jsref/dom_obj_audio.asp\">Audio</a></p>\n<p>需要实现的是进入页面自动播放音乐，点击开关停止播放，音乐ICON停止转动。然后需要知道，音频资源当前状态是否可以用了，判断 <code>readyState</code> 的状态。然有点问题，我因该先去知道音频资源是否已经加载成功，才可以去知道它的当前状态说否可以播放。关于怎么知道加载成功，我参考了两篇文章 <a href=\"http://kaifage.com/notes/87/audio-ready.html\">怎么判断 audio video 是否加载完</a>，<a href=\"https://segmentfault.com/q/1010000007183637\">判断音乐是否加载怎么做？</a>。其实最后上线，音频这块的优化我并没有做，找的理由就是催的及，懒得搞，我先给你上线再说吧。</p>\n<p>关于自动播放，在iPhone7的微信浏览器中是不自动播放的，于是又去查到这个 <a href=\"http://webexp.cn/dlsd2016.html\">轻松化解iOS系统及微信中不支持audio自动播放问题</a>，根据这个方法，自动播放的问题解决了。</p>\n<p>关于音乐持续播放的问题，因为跨页面了，貌似让一首音乐持续接着播放好像不容易实现，去看了下API， <code>currentTime</code> 设置或返回音频中的当前播放位置（以秒计）。我想法是在跳转也时候把 currentTime 的值通过 URL 传到下一页去，在下一页中去指定 <code>audio</code> 的 <code>currentTime</code>。在我去查这个问题的时候，好像没有看到关于 <code>currentTime</code> 的思路，想想也是，如果跳转挺多页的话岂不是要玩儿死，所以这个思路肯定是行不通的。</p>\n<p>有空我要先Demo下 <code>currentTime</code> 是个什么情况，及一些网易云音乐Web版是怎么做的。</p>\n<h3 id=\"CSS3动画性能\"><a href=\"#CSS3动画性能\" class=\"headerlink\" title=\"CSS3动画性能\"></a>CSS3动画性能</h3><p>发现使用 <code>box-shadow</code> 来做闪烁的效果，几个同时闪烁，会有明显的卡顿现象（小米4C），如果 用边缘羽化过的图片 来替换box-shadow的话，卡顿现象消失了。<br>这里有两篇关于CSS3动画性能的文章：</p>\n<ul>\n<li><a href=\"https://www.qianduan.net/high-performance-css3-animations/\">高性能 CSS3 动画</a></li>\n<li><a href=\"https://www.w3cplus.com/css3/introduction-to-hardware-acceleration-css-animations.html\">CSS动画之硬件加速</a></li>\n</ul>\n<h3 id=\"还可以更好的地方\"><a href=\"#还可以更好的地方\" class=\"headerlink\" title=\"还可以更好的地方\"></a>还可以更好的地方</h3><ul>\n<li>图片资源的预加载</li>\n<li>音频资源的预加载</li>\n<li>JS文件合并</li>\n<li>手机上如果快速点击的话，擦除的速度会有明显的慢（小米4C）</li>\n<li>页面布局也需要花点时间再去调试</li>\n</ul>\n<h3 id=\"吐槽\"><a href=\"#吐槽\" class=\"headerlink\" title=\"吐槽\"></a>吐槽</h3><ul>\n<li>能力不够就是累啊，加油吧。</li>\n<li>开发前再三的确认设计是否定稿，结果还是因为设计返工，整个重新整。WTF!!!</li>\n<li>致所有的UI设计师们，提供的PSD不分组命名是几个意思，量少就不说了。TM 一大堆形似图层副本的玩意儿，太浪费别人的时间了，当代码搬运工也很累的。</li>\n</ul>\n<p><a href=\"http://www.searchsport.cn:8015/\">线上地址</a>，因为需要用户提供姓名和手机才可以进入，程序这块有明显的体验问题，比如第二天再来还是需要重新输入，而且程序走的是手机号不能重复，然并没有任何提示，输入不同的昵称相同的手机号，排行显示的是首次使用的昵称，解决记住登录状态的问题就OK了。</p>\n<p><strong>最后最后，希望自己下次能更好吧，至少不犯过去的Bugs。</strong></p>\n"},{"title":"[转载]Web 中文字体应用指南","date":"2017-03-16T06:04:36.000Z","_content":"\n### 写在前面\n\n最近一个儿童教育机构的官网项目，碰上了字体处理的问题，本身解决各个平台对中文字体的相对友好的设置是件挺头疼的事儿，一般常见的方法就是设置 `font-family: sans-serif;` 即完全由各平台自己决定使用什么中文字体。\n\n但是为了解决需求，去搜索了能够相对友好的中文字体设置方法：[跨平台 CSS 中文字体解决方案 - zenozeng/fonts.css](https://github.com/zenozeng/fonts.css)\n\n下面的文字也详细的介绍了 web 中文字体的设置\n\n> 作者：[nightire](http://ruby-china.org/nightire) [Web 中文字体应用指南](http://ruby-china.org/topics/14005)\n\n------\n\n### Web 中文字体应用指南\n\n在 Web 上应用字体是一项基本技术，同时也是一门艺术。对于英文字体来说可选择的范围实在是太广泛了，合理的使用它们将会为你的网站增色不少。关于英文字体的使用和搭配技巧，在这里不做赘述，只推荐一套非常好的视频：[Fundamentals of Design by CodeSchool](https://www.codeschool.com/courses/fundamentals-of-design)\n\n而真正的挑战在于中文字体，由于中文字体组成的特殊性导致其体积过于庞大，除了操作系统内置的字体之外，我们很难在网站上应用其他的字体。在可选性很差的前提之下，如何正确的使用中文字体呢？\n\n首先，以下的字体声明都是很糟糕的，切忌使用：\n\n```css\nfont-family: \"宋体\";\n\nfont-family: \"宋体\", Arial;\n\nfont-family: Arial, \"宋体\", \"微软雅黑\";\n\nfont-family: Helvetica, Arial, \"华文细黑\", \"微软雅黑\";\n```\n\n接下来，我们一步一步来说明如何定义好的字体声明。\n\n### 中文字体也有英文名称\n\n很多开发者忽略了这一点：尽管我们在操作系统中常常看到宋体、微软雅黑、华文细黑这样的字体名称，但实际上这只是字体的显示名称，而不是字体文件的名称。虽然说在大多数情况下直接使用显示名称也有效，但有些用户却工作在一些很极端的情况下，这会导致你的字体声明无效。\n\n比如说，用户安装了中文版的操作系统（这意味着系统有中文字体），但是却切换到了以英文为主要语言——这种情况在那些希望加强英语锻炼的中文用户当中是很常见的。这时候，操作系统很有可能无法按照显示名称找到正确的字体，所以我们要记住的第一件事情就是： **同时声明中文字体的字体名称（英文）和显示名称（中文）**，就像这样：\n\n```css\nfont-family: SimSun, \"宋体\";\n\nfont-family: \"Microsoft YaHei\", \"微软雅黑\";\n\nfont-family: STXihei, \"华文细黑\", \"Microsoft YaHei\", \"微软雅黑\";\n```\n\n### 永远不要忘记声明英文字体，并且英文字体应该在中文字体之前\n\n记住这个事实：绝大部分中文字体里包含英文字母（但是基本上都很丑），而英文字体里不包含中文字符。\n\n在网页里中/英文混排是很常见的，你绝对不会喜欢用中文字体显示英文的效果，所以一定不要忘了先声明英文字体：\n\n```css\nfont-family: Georgia, SimSun, \"宋体\";\n\nfont-family: Arial, \"Microsoft YaHei\", \"微软雅黑\";\n```\n\n另外还有一个好习惯，就是在最后补充英文字体族的名称。字体族大体上分为两类：非衬线和衬线，它们之间的区别和使用规则请见本文开始介绍的视频。一般来说，你应该这么做：\n\n```css\nfont-family: Georgia, SimSun, \"宋体\", serif;\n\nfont-family: Arial, \"Microsoft YaHei\", \"微软雅黑\", sans-serif;\n```\n\n请注意：以上两句声明中的 宋体 和 微软雅黑 不应该调换（尽管调换了也不会发生错误），这是因为从字体的式样来看，微软雅黑 是非衬线的，而宋体才是衬线的。然而中文并不像英文那样严格区分字体族，所以这一点在实际应用当中并不那么重要。\n\n### 别忘了照顾不同的操作系统\n\n作为一个 Web 开发者，你理应对 Windows, Mac OS, Linux 家族等常用操作系统里的系统字体有足够的了解，特别是中文。在这里，我们假设目标网站要同时给予 windows 用户和 mac 用户最好的字体体验，于是我们可以这样声明：\n\n```css\nfont-family: Helvetica, Tahoma, Arial, STXihei, \"华文细黑\", \"Microsoft YaHei\", \"微软雅黑\", sans-serif;\n```\n\n这句声明都做到哪些事情呢？让我们一一说明（括号内代表其对应的目标操作系统）：\n\n- 对于英文字符，首先查找 `Helvetica`(Mac)，然后查找 `Tahoma`(Win)，都找不到就用 `Arial`(Mac&Win)；若是以上三者都缺失，则使用当前默认的 `sans-serif` 字体(操作系统或浏览器指定)；\n- 对于中文字体，我们已经了解其规则了。`华文细黑`(Mac)，`微软雅黑`(Win)是这两个平台的默认中文字体。\n\n### 注意向下兼容\n\n到此为止，我们的字体声明已经很不错了——如果你不必考虑还在使用旧版本操作系统的用户的话。遗憾地是，中文市场还有大量的用户在使用 Windows XP，`宋体` 才是他们的主要中文字体。为了照顾到这些用户，你可以为 `微软雅黑` 增加一个 fallback：\n\n```css\nfont-family: Helvetica, Tahoma, Arial, STXihei, \"华文细黑\", Heiti, \"黑体\", \"Microsoft YaHei\", \"微软雅黑\", SimSun, \"宋体\", sans-serif;\n```\n\n同样地，你看到我们也为 Mac 系统使用了 `黑体` 作为 fallback。\n\n\n### 其他\n\n#### 不加双引号可以吗？\n\n可以。有些英文字体的名称多于两个单词，因为单词中间有空格所以需要用 `\"\"` 包裹起来。中文字体很特别，按照英文的角度来看，像微软雅黑究竟算是一个词还是四个词呢？没关系，好在中文字体的名称里没有空格，所以 `\"\"` 不加也没什么大碍。\n\n不过，谁都不能保证在任何操作系统/浏览器环境下都是如此，若是发生了奇怪的事情，不妨加上双引号试试看。\n\n#### 可以默认显示某种字体吗？比如微软雅黑\n\n你可能注意到了，在我们最后的字体声明里，`华文细黑` 是默认字体（如果你的系统上安装了声明里所有的中文字体的话），为什么我要先声明 Mac 系统的字体呢？\n\n按理来说，大多数网站的主要目标市场还是 Windows 用户的，所以理论上这个才是合理的声明：\n\n```css\nfont-family: Helvetica, Tahoma, Arial, \"Microsoft YaHei\", \"微软雅黑\", SimSun, \"宋体\", STXihei, \"华文细黑\", Heiti, \"黑体\", sans-serif;\n```\n\n但实际上却并非如此。在中文字体的用户群体里，很大一部分拥有 Mac 的人都同时安装了 Win 下常用的中文字体（这得归功于 Office for Mac）；但极少有 Win 用户去安装 Mac 下的中文字体。\n\n因此，把 Mac 用字体声明在前面几乎不会对 Win 用户产生什么影响（因为他们压根没有！），倒是用来做 fallback 的黑体可能会取代微软雅黑的位置，所以更保险的做法或许是这样：\n\n```css\nfont-family: Helvetica, Tahoma, Arial, STXihei, \"华文细黑\", \"Microsoft YaHei\", \"微软雅黑\", SimSun, \"宋体\", Heiti, \"黑体\", sans-serif;\n```\n\n但无论如何请不要把 `微软雅黑` 放在中文字体的最前面，作为史上最丑陋的中文字体之一，`微软雅黑` 实在不是什么好的选择，请照顾一下被 Mac 宠坏的用户吧，谢谢！（仅代表个人观点）\n\nBTW，如果你也像我一样不喜欢呆头呆脑的 `微软雅黑`，那就干脆把它删了吧~\n\n到此为止，虽然在我们的示例代码里没有包含 Linux 家族的例子，不过相信你也明白该怎么做了吧。\n\n\n### 一点补充\n\n鉴于一些人对 `微软雅黑` 的排位产生异议，我不妨把上文的解决方案再延伸一步。事实是这样子的：\n\n- 把 `微软雅黑` 放前面，会导致安装了 `微软雅黑` 字体的 Mac 用户不得不面对 `微软雅黑`，而在 Mac 下比 `微软雅黑` 优雅得多的中文字体比比皆是；\n- 把 Mac 下的字体放前面，也会对 Windows 用户造成差不多的困惑，毕竟微软雅黑是 Windows 平台下显示效果最好的字体（目前为止）；\n1 和 2，哪一种出现的概率更大一些？我想这是一个不需要计算就能知道的答案吧？\n\n但是——的确还有另外两个因素在纠结着：\n\n- 不少 Windows 用户因为各种原因关闭了 `ClearType`，在此情形下微软雅黑将会惨不忍睹！但是 Mac 的字体也不是好的选择，真正的胜出者？猜对了，宋体。\n- 绝大部分 Mac 下的黑体在 Windows 下模糊不清，而微软雅黑虽然丑但在 Mac 下至少能看。（间接体现了两个平台的字体渲染技术的差距）\n\n所以在实践中，真正接近“万无一失”的方案需要考虑以下几点：\n\n- 利用 UA 判断为不同的平台加载不一样的字体声明；\n- 除非有特别的原因，否则尽量保持正文用宋体，标题和其他可以放大些的地方用 `微软雅黑` （针对 Windows）；\n- Mac 下的冬青体效果极佳，但是该字体在 Mac OS X 10.6 以前是没有的，所以谨慎考虑你的用户群体，或者使用华文黑体系列做 fallback；\n\n最后，我不想再和任何人争论字体的优劣，本文的目的是介绍使用方法而不是字体选择。“美”或“丑”向来都是很主观的事情，只因为我是作者，所以我免不了会有倾向性，然而我也相信你自己会有正确的判断，和我较真没有任何实际意义。","source":"_posts/web-chinese-fonts-guide.md","raw":"---\ntitle: '[转载]Web 中文字体应用指南'\ndate: 2017-03-16 14:04:36\ncategories: 项目总结\ntags: font\n---\n\n### 写在前面\n\n最近一个儿童教育机构的官网项目，碰上了字体处理的问题，本身解决各个平台对中文字体的相对友好的设置是件挺头疼的事儿，一般常见的方法就是设置 `font-family: sans-serif;` 即完全由各平台自己决定使用什么中文字体。\n\n但是为了解决需求，去搜索了能够相对友好的中文字体设置方法：[跨平台 CSS 中文字体解决方案 - zenozeng/fonts.css](https://github.com/zenozeng/fonts.css)\n\n下面的文字也详细的介绍了 web 中文字体的设置\n\n> 作者：[nightire](http://ruby-china.org/nightire) [Web 中文字体应用指南](http://ruby-china.org/topics/14005)\n\n------\n\n### Web 中文字体应用指南\n\n在 Web 上应用字体是一项基本技术，同时也是一门艺术。对于英文字体来说可选择的范围实在是太广泛了，合理的使用它们将会为你的网站增色不少。关于英文字体的使用和搭配技巧，在这里不做赘述，只推荐一套非常好的视频：[Fundamentals of Design by CodeSchool](https://www.codeschool.com/courses/fundamentals-of-design)\n\n而真正的挑战在于中文字体，由于中文字体组成的特殊性导致其体积过于庞大，除了操作系统内置的字体之外，我们很难在网站上应用其他的字体。在可选性很差的前提之下，如何正确的使用中文字体呢？\n\n首先，以下的字体声明都是很糟糕的，切忌使用：\n\n```css\nfont-family: \"宋体\";\n\nfont-family: \"宋体\", Arial;\n\nfont-family: Arial, \"宋体\", \"微软雅黑\";\n\nfont-family: Helvetica, Arial, \"华文细黑\", \"微软雅黑\";\n```\n\n接下来，我们一步一步来说明如何定义好的字体声明。\n\n### 中文字体也有英文名称\n\n很多开发者忽略了这一点：尽管我们在操作系统中常常看到宋体、微软雅黑、华文细黑这样的字体名称，但实际上这只是字体的显示名称，而不是字体文件的名称。虽然说在大多数情况下直接使用显示名称也有效，但有些用户却工作在一些很极端的情况下，这会导致你的字体声明无效。\n\n比如说，用户安装了中文版的操作系统（这意味着系统有中文字体），但是却切换到了以英文为主要语言——这种情况在那些希望加强英语锻炼的中文用户当中是很常见的。这时候，操作系统很有可能无法按照显示名称找到正确的字体，所以我们要记住的第一件事情就是： **同时声明中文字体的字体名称（英文）和显示名称（中文）**，就像这样：\n\n```css\nfont-family: SimSun, \"宋体\";\n\nfont-family: \"Microsoft YaHei\", \"微软雅黑\";\n\nfont-family: STXihei, \"华文细黑\", \"Microsoft YaHei\", \"微软雅黑\";\n```\n\n### 永远不要忘记声明英文字体，并且英文字体应该在中文字体之前\n\n记住这个事实：绝大部分中文字体里包含英文字母（但是基本上都很丑），而英文字体里不包含中文字符。\n\n在网页里中/英文混排是很常见的，你绝对不会喜欢用中文字体显示英文的效果，所以一定不要忘了先声明英文字体：\n\n```css\nfont-family: Georgia, SimSun, \"宋体\";\n\nfont-family: Arial, \"Microsoft YaHei\", \"微软雅黑\";\n```\n\n另外还有一个好习惯，就是在最后补充英文字体族的名称。字体族大体上分为两类：非衬线和衬线，它们之间的区别和使用规则请见本文开始介绍的视频。一般来说，你应该这么做：\n\n```css\nfont-family: Georgia, SimSun, \"宋体\", serif;\n\nfont-family: Arial, \"Microsoft YaHei\", \"微软雅黑\", sans-serif;\n```\n\n请注意：以上两句声明中的 宋体 和 微软雅黑 不应该调换（尽管调换了也不会发生错误），这是因为从字体的式样来看，微软雅黑 是非衬线的，而宋体才是衬线的。然而中文并不像英文那样严格区分字体族，所以这一点在实际应用当中并不那么重要。\n\n### 别忘了照顾不同的操作系统\n\n作为一个 Web 开发者，你理应对 Windows, Mac OS, Linux 家族等常用操作系统里的系统字体有足够的了解，特别是中文。在这里，我们假设目标网站要同时给予 windows 用户和 mac 用户最好的字体体验，于是我们可以这样声明：\n\n```css\nfont-family: Helvetica, Tahoma, Arial, STXihei, \"华文细黑\", \"Microsoft YaHei\", \"微软雅黑\", sans-serif;\n```\n\n这句声明都做到哪些事情呢？让我们一一说明（括号内代表其对应的目标操作系统）：\n\n- 对于英文字符，首先查找 `Helvetica`(Mac)，然后查找 `Tahoma`(Win)，都找不到就用 `Arial`(Mac&Win)；若是以上三者都缺失，则使用当前默认的 `sans-serif` 字体(操作系统或浏览器指定)；\n- 对于中文字体，我们已经了解其规则了。`华文细黑`(Mac)，`微软雅黑`(Win)是这两个平台的默认中文字体。\n\n### 注意向下兼容\n\n到此为止，我们的字体声明已经很不错了——如果你不必考虑还在使用旧版本操作系统的用户的话。遗憾地是，中文市场还有大量的用户在使用 Windows XP，`宋体` 才是他们的主要中文字体。为了照顾到这些用户，你可以为 `微软雅黑` 增加一个 fallback：\n\n```css\nfont-family: Helvetica, Tahoma, Arial, STXihei, \"华文细黑\", Heiti, \"黑体\", \"Microsoft YaHei\", \"微软雅黑\", SimSun, \"宋体\", sans-serif;\n```\n\n同样地，你看到我们也为 Mac 系统使用了 `黑体` 作为 fallback。\n\n\n### 其他\n\n#### 不加双引号可以吗？\n\n可以。有些英文字体的名称多于两个单词，因为单词中间有空格所以需要用 `\"\"` 包裹起来。中文字体很特别，按照英文的角度来看，像微软雅黑究竟算是一个词还是四个词呢？没关系，好在中文字体的名称里没有空格，所以 `\"\"` 不加也没什么大碍。\n\n不过，谁都不能保证在任何操作系统/浏览器环境下都是如此，若是发生了奇怪的事情，不妨加上双引号试试看。\n\n#### 可以默认显示某种字体吗？比如微软雅黑\n\n你可能注意到了，在我们最后的字体声明里，`华文细黑` 是默认字体（如果你的系统上安装了声明里所有的中文字体的话），为什么我要先声明 Mac 系统的字体呢？\n\n按理来说，大多数网站的主要目标市场还是 Windows 用户的，所以理论上这个才是合理的声明：\n\n```css\nfont-family: Helvetica, Tahoma, Arial, \"Microsoft YaHei\", \"微软雅黑\", SimSun, \"宋体\", STXihei, \"华文细黑\", Heiti, \"黑体\", sans-serif;\n```\n\n但实际上却并非如此。在中文字体的用户群体里，很大一部分拥有 Mac 的人都同时安装了 Win 下常用的中文字体（这得归功于 Office for Mac）；但极少有 Win 用户去安装 Mac 下的中文字体。\n\n因此，把 Mac 用字体声明在前面几乎不会对 Win 用户产生什么影响（因为他们压根没有！），倒是用来做 fallback 的黑体可能会取代微软雅黑的位置，所以更保险的做法或许是这样：\n\n```css\nfont-family: Helvetica, Tahoma, Arial, STXihei, \"华文细黑\", \"Microsoft YaHei\", \"微软雅黑\", SimSun, \"宋体\", Heiti, \"黑体\", sans-serif;\n```\n\n但无论如何请不要把 `微软雅黑` 放在中文字体的最前面，作为史上最丑陋的中文字体之一，`微软雅黑` 实在不是什么好的选择，请照顾一下被 Mac 宠坏的用户吧，谢谢！（仅代表个人观点）\n\nBTW，如果你也像我一样不喜欢呆头呆脑的 `微软雅黑`，那就干脆把它删了吧~\n\n到此为止，虽然在我们的示例代码里没有包含 Linux 家族的例子，不过相信你也明白该怎么做了吧。\n\n\n### 一点补充\n\n鉴于一些人对 `微软雅黑` 的排位产生异议，我不妨把上文的解决方案再延伸一步。事实是这样子的：\n\n- 把 `微软雅黑` 放前面，会导致安装了 `微软雅黑` 字体的 Mac 用户不得不面对 `微软雅黑`，而在 Mac 下比 `微软雅黑` 优雅得多的中文字体比比皆是；\n- 把 Mac 下的字体放前面，也会对 Windows 用户造成差不多的困惑，毕竟微软雅黑是 Windows 平台下显示效果最好的字体（目前为止）；\n1 和 2，哪一种出现的概率更大一些？我想这是一个不需要计算就能知道的答案吧？\n\n但是——的确还有另外两个因素在纠结着：\n\n- 不少 Windows 用户因为各种原因关闭了 `ClearType`，在此情形下微软雅黑将会惨不忍睹！但是 Mac 的字体也不是好的选择，真正的胜出者？猜对了，宋体。\n- 绝大部分 Mac 下的黑体在 Windows 下模糊不清，而微软雅黑虽然丑但在 Mac 下至少能看。（间接体现了两个平台的字体渲染技术的差距）\n\n所以在实践中，真正接近“万无一失”的方案需要考虑以下几点：\n\n- 利用 UA 判断为不同的平台加载不一样的字体声明；\n- 除非有特别的原因，否则尽量保持正文用宋体，标题和其他可以放大些的地方用 `微软雅黑` （针对 Windows）；\n- Mac 下的冬青体效果极佳，但是该字体在 Mac OS X 10.6 以前是没有的，所以谨慎考虑你的用户群体，或者使用华文黑体系列做 fallback；\n\n最后，我不想再和任何人争论字体的优劣，本文的目的是介绍使用方法而不是字体选择。“美”或“丑”向来都是很主观的事情，只因为我是作者，所以我免不了会有倾向性，然而我也相信你自己会有正确的判断，和我较真没有任何实际意义。","slug":"web-chinese-fonts-guide","published":1,"updated":"2017-03-16T06:51:34.407Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj17hdrrm0008hkajxvsn8mk8","content":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>最近一个儿童教育机构的官网项目，碰上了字体处理的问题，本身解决各个平台对中文字体的相对友好的设置是件挺头疼的事儿，一般常见的方法就是设置 <code>font-family: sans-serif;</code> 即完全由各平台自己决定使用什么中文字体。</p>\n<p>但是为了解决需求，去搜索了能够相对友好的中文字体设置方法：<a href=\"https://github.com/zenozeng/fonts.css\" target=\"_blank\" rel=\"external\">跨平台 CSS 中文字体解决方案 - zenozeng/fonts.css</a></p>\n<p>下面的文字也详细的介绍了 web 中文字体的设置</p>\n<blockquote>\n<p>作者：<a href=\"http://ruby-china.org/nightire\" target=\"_blank\" rel=\"external\">nightire</a> <a href=\"http://ruby-china.org/topics/14005\" target=\"_blank\" rel=\"external\">Web 中文字体应用指南</a></p>\n</blockquote>\n<hr>\n<h3 id=\"Web-中文字体应用指南\"><a href=\"#Web-中文字体应用指南\" class=\"headerlink\" title=\"Web 中文字体应用指南\"></a>Web 中文字体应用指南</h3><p>在 Web 上应用字体是一项基本技术，同时也是一门艺术。对于英文字体来说可选择的范围实在是太广泛了，合理的使用它们将会为你的网站增色不少。关于英文字体的使用和搭配技巧，在这里不做赘述，只推荐一套非常好的视频：<a href=\"https://www.codeschool.com/courses/fundamentals-of-design\" target=\"_blank\" rel=\"external\">Fundamentals of Design by CodeSchool</a></p>\n<p>而真正的挑战在于中文字体，由于中文字体组成的特殊性导致其体积过于庞大，除了操作系统内置的字体之外，我们很难在网站上应用其他的字体。在可选性很差的前提之下，如何正确的使用中文字体呢？</p>\n<p>首先，以下的字体声明都是很糟糕的，切忌使用：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">font-family</span>: \"宋体\";</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">font-family</span>: \"宋体\", <span class=\"selector-tag\">Arial</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">font-family</span>: <span class=\"selector-tag\">Arial</span>, \"宋体\", \"微软雅黑\";</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">font-family</span>: <span class=\"selector-tag\">Helvetica</span>, <span class=\"selector-tag\">Arial</span>, \"华文细黑\", \"微软雅黑\";</div></pre></td></tr></table></figure>\n<p>接下来，我们一步一步来说明如何定义好的字体声明。</p>\n<h3 id=\"中文字体也有英文名称\"><a href=\"#中文字体也有英文名称\" class=\"headerlink\" title=\"中文字体也有英文名称\"></a>中文字体也有英文名称</h3><p>很多开发者忽略了这一点：尽管我们在操作系统中常常看到宋体、微软雅黑、华文细黑这样的字体名称，但实际上这只是字体的显示名称，而不是字体文件的名称。虽然说在大多数情况下直接使用显示名称也有效，但有些用户却工作在一些很极端的情况下，这会导致你的字体声明无效。</p>\n<p>比如说，用户安装了中文版的操作系统（这意味着系统有中文字体），但是却切换到了以英文为主要语言——这种情况在那些希望加强英语锻炼的中文用户当中是很常见的。这时候，操作系统很有可能无法按照显示名称找到正确的字体，所以我们要记住的第一件事情就是： <strong>同时声明中文字体的字体名称（英文）和显示名称（中文）</strong>，就像这样：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">font-family</span>: <span class=\"selector-tag\">SimSun</span>, \"宋体\";</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">font-family</span>: \"<span class=\"selector-tag\">Microsoft</span> <span class=\"selector-tag\">YaHei</span>\", \"微软雅黑\";</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">font-family</span>: <span class=\"selector-tag\">STXihei</span>, \"华文细黑\", \"<span class=\"selector-tag\">Microsoft</span> <span class=\"selector-tag\">YaHei</span>\", \"微软雅黑\";</div></pre></td></tr></table></figure>\n<h3 id=\"永远不要忘记声明英文字体，并且英文字体应该在中文字体之前\"><a href=\"#永远不要忘记声明英文字体，并且英文字体应该在中文字体之前\" class=\"headerlink\" title=\"永远不要忘记声明英文字体，并且英文字体应该在中文字体之前\"></a>永远不要忘记声明英文字体，并且英文字体应该在中文字体之前</h3><p>记住这个事实：绝大部分中文字体里包含英文字母（但是基本上都很丑），而英文字体里不包含中文字符。</p>\n<p>在网页里中/英文混排是很常见的，你绝对不会喜欢用中文字体显示英文的效果，所以一定不要忘了先声明英文字体：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">font-family</span>: <span class=\"selector-tag\">Georgia</span>, <span class=\"selector-tag\">SimSun</span>, \"宋体\";</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">font-family</span>: <span class=\"selector-tag\">Arial</span>, \"<span class=\"selector-tag\">Microsoft</span> <span class=\"selector-tag\">YaHei</span>\", \"微软雅黑\";</div></pre></td></tr></table></figure>\n<p>另外还有一个好习惯，就是在最后补充英文字体族的名称。字体族大体上分为两类：非衬线和衬线，它们之间的区别和使用规则请见本文开始介绍的视频。一般来说，你应该这么做：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">font-family</span>: <span class=\"selector-tag\">Georgia</span>, <span class=\"selector-tag\">SimSun</span>, \"宋体\", <span class=\"selector-tag\">serif</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">font-family</span>: <span class=\"selector-tag\">Arial</span>, \"<span class=\"selector-tag\">Microsoft</span> <span class=\"selector-tag\">YaHei</span>\", \"微软雅黑\", <span class=\"selector-tag\">sans-serif</span>;</div></pre></td></tr></table></figure>\n<p>请注意：以上两句声明中的 宋体 和 微软雅黑 不应该调换（尽管调换了也不会发生错误），这是因为从字体的式样来看，微软雅黑 是非衬线的，而宋体才是衬线的。然而中文并不像英文那样严格区分字体族，所以这一点在实际应用当中并不那么重要。</p>\n<h3 id=\"别忘了照顾不同的操作系统\"><a href=\"#别忘了照顾不同的操作系统\" class=\"headerlink\" title=\"别忘了照顾不同的操作系统\"></a>别忘了照顾不同的操作系统</h3><p>作为一个 Web 开发者，你理应对 Windows, Mac OS, Linux 家族等常用操作系统里的系统字体有足够的了解，特别是中文。在这里，我们假设目标网站要同时给予 windows 用户和 mac 用户最好的字体体验，于是我们可以这样声明：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">font-family</span>: <span class=\"selector-tag\">Helvetica</span>, <span class=\"selector-tag\">Tahoma</span>, <span class=\"selector-tag\">Arial</span>, <span class=\"selector-tag\">STXihei</span>, \"华文细黑\", \"<span class=\"selector-tag\">Microsoft</span> <span class=\"selector-tag\">YaHei</span>\", \"微软雅黑\", <span class=\"selector-tag\">sans-serif</span>;</div></pre></td></tr></table></figure>\n<p>这句声明都做到哪些事情呢？让我们一一说明（括号内代表其对应的目标操作系统）：</p>\n<ul>\n<li>对于英文字符，首先查找 <code>Helvetica</code>(Mac)，然后查找 <code>Tahoma</code>(Win)，都找不到就用 <code>Arial</code>(Mac&amp;Win)；若是以上三者都缺失，则使用当前默认的 <code>sans-serif</code> 字体(操作系统或浏览器指定)；</li>\n<li>对于中文字体，我们已经了解其规则了。<code>华文细黑</code>(Mac)，<code>微软雅黑</code>(Win)是这两个平台的默认中文字体。</li>\n</ul>\n<h3 id=\"注意向下兼容\"><a href=\"#注意向下兼容\" class=\"headerlink\" title=\"注意向下兼容\"></a>注意向下兼容</h3><p>到此为止，我们的字体声明已经很不错了——如果你不必考虑还在使用旧版本操作系统的用户的话。遗憾地是，中文市场还有大量的用户在使用 Windows XP，<code>宋体</code> 才是他们的主要中文字体。为了照顾到这些用户，你可以为 <code>微软雅黑</code> 增加一个 fallback：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">font-family</span>: <span class=\"selector-tag\">Helvetica</span>, <span class=\"selector-tag\">Tahoma</span>, <span class=\"selector-tag\">Arial</span>, <span class=\"selector-tag\">STXihei</span>, \"华文细黑\", <span class=\"selector-tag\">Heiti</span>, \"黑体\", \"<span class=\"selector-tag\">Microsoft</span> <span class=\"selector-tag\">YaHei</span>\", \"微软雅黑\", <span class=\"selector-tag\">SimSun</span>, \"宋体\", <span class=\"selector-tag\">sans-serif</span>;</div></pre></td></tr></table></figure>\n<p>同样地，你看到我们也为 Mac 系统使用了 <code>黑体</code> 作为 fallback。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><h4 id=\"不加双引号可以吗？\"><a href=\"#不加双引号可以吗？\" class=\"headerlink\" title=\"不加双引号可以吗？\"></a>不加双引号可以吗？</h4><p>可以。有些英文字体的名称多于两个单词，因为单词中间有空格所以需要用 <code>&quot;&quot;</code> 包裹起来。中文字体很特别，按照英文的角度来看，像微软雅黑究竟算是一个词还是四个词呢？没关系，好在中文字体的名称里没有空格，所以 <code>&quot;&quot;</code> 不加也没什么大碍。</p>\n<p>不过，谁都不能保证在任何操作系统/浏览器环境下都是如此，若是发生了奇怪的事情，不妨加上双引号试试看。</p>\n<h4 id=\"可以默认显示某种字体吗？比如微软雅黑\"><a href=\"#可以默认显示某种字体吗？比如微软雅黑\" class=\"headerlink\" title=\"可以默认显示某种字体吗？比如微软雅黑\"></a>可以默认显示某种字体吗？比如微软雅黑</h4><p>你可能注意到了，在我们最后的字体声明里，<code>华文细黑</code> 是默认字体（如果你的系统上安装了声明里所有的中文字体的话），为什么我要先声明 Mac 系统的字体呢？</p>\n<p>按理来说，大多数网站的主要目标市场还是 Windows 用户的，所以理论上这个才是合理的声明：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">font-family</span>: <span class=\"selector-tag\">Helvetica</span>, <span class=\"selector-tag\">Tahoma</span>, <span class=\"selector-tag\">Arial</span>, \"<span class=\"selector-tag\">Microsoft</span> <span class=\"selector-tag\">YaHei</span>\", \"微软雅黑\", <span class=\"selector-tag\">SimSun</span>, \"宋体\", <span class=\"selector-tag\">STXihei</span>, \"华文细黑\", <span class=\"selector-tag\">Heiti</span>, \"黑体\", <span class=\"selector-tag\">sans-serif</span>;</div></pre></td></tr></table></figure>\n<p>但实际上却并非如此。在中文字体的用户群体里，很大一部分拥有 Mac 的人都同时安装了 Win 下常用的中文字体（这得归功于 Office for Mac）；但极少有 Win 用户去安装 Mac 下的中文字体。</p>\n<p>因此，把 Mac 用字体声明在前面几乎不会对 Win 用户产生什么影响（因为他们压根没有！），倒是用来做 fallback 的黑体可能会取代微软雅黑的位置，所以更保险的做法或许是这样：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">font-family</span>: <span class=\"selector-tag\">Helvetica</span>, <span class=\"selector-tag\">Tahoma</span>, <span class=\"selector-tag\">Arial</span>, <span class=\"selector-tag\">STXihei</span>, \"华文细黑\", \"<span class=\"selector-tag\">Microsoft</span> <span class=\"selector-tag\">YaHei</span>\", \"微软雅黑\", <span class=\"selector-tag\">SimSun</span>, \"宋体\", <span class=\"selector-tag\">Heiti</span>, \"黑体\", <span class=\"selector-tag\">sans-serif</span>;</div></pre></td></tr></table></figure>\n<p>但无论如何请不要把 <code>微软雅黑</code> 放在中文字体的最前面，作为史上最丑陋的中文字体之一，<code>微软雅黑</code> 实在不是什么好的选择，请照顾一下被 Mac 宠坏的用户吧，谢谢！（仅代表个人观点）</p>\n<p>BTW，如果你也像我一样不喜欢呆头呆脑的 <code>微软雅黑</code>，那就干脆把它删了吧~</p>\n<p>到此为止，虽然在我们的示例代码里没有包含 Linux 家族的例子，不过相信你也明白该怎么做了吧。</p>\n<h3 id=\"一点补充\"><a href=\"#一点补充\" class=\"headerlink\" title=\"一点补充\"></a>一点补充</h3><p>鉴于一些人对 <code>微软雅黑</code> 的排位产生异议，我不妨把上文的解决方案再延伸一步。事实是这样子的：</p>\n<ul>\n<li>把 <code>微软雅黑</code> 放前面，会导致安装了 <code>微软雅黑</code> 字体的 Mac 用户不得不面对 <code>微软雅黑</code>，而在 Mac 下比 <code>微软雅黑</code> 优雅得多的中文字体比比皆是；</li>\n<li>把 Mac 下的字体放前面，也会对 Windows 用户造成差不多的困惑，毕竟微软雅黑是 Windows 平台下显示效果最好的字体（目前为止）；<br>1 和 2，哪一种出现的概率更大一些？我想这是一个不需要计算就能知道的答案吧？</li>\n</ul>\n<p>但是——的确还有另外两个因素在纠结着：</p>\n<ul>\n<li>不少 Windows 用户因为各种原因关闭了 <code>ClearType</code>，在此情形下微软雅黑将会惨不忍睹！但是 Mac 的字体也不是好的选择，真正的胜出者？猜对了，宋体。</li>\n<li>绝大部分 Mac 下的黑体在 Windows 下模糊不清，而微软雅黑虽然丑但在 Mac 下至少能看。（间接体现了两个平台的字体渲染技术的差距）</li>\n</ul>\n<p>所以在实践中，真正接近“万无一失”的方案需要考虑以下几点：</p>\n<ul>\n<li>利用 UA 判断为不同的平台加载不一样的字体声明；</li>\n<li>除非有特别的原因，否则尽量保持正文用宋体，标题和其他可以放大些的地方用 <code>微软雅黑</code> （针对 Windows）；</li>\n<li>Mac 下的冬青体效果极佳，但是该字体在 Mac OS X 10.6 以前是没有的，所以谨慎考虑你的用户群体，或者使用华文黑体系列做 fallback；</li>\n</ul>\n<p>最后，我不想再和任何人争论字体的优劣，本文的目的是介绍使用方法而不是字体选择。“美”或“丑”向来都是很主观的事情，只因为我是作者，所以我免不了会有倾向性，然而我也相信你自己会有正确的判断，和我较真没有任何实际意义。</p>\n","excerpt":"","more":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>最近一个儿童教育机构的官网项目，碰上了字体处理的问题，本身解决各个平台对中文字体的相对友好的设置是件挺头疼的事儿，一般常见的方法就是设置 <code>font-family: sans-serif;</code> 即完全由各平台自己决定使用什么中文字体。</p>\n<p>但是为了解决需求，去搜索了能够相对友好的中文字体设置方法：<a href=\"https://github.com/zenozeng/fonts.css\">跨平台 CSS 中文字体解决方案 - zenozeng/fonts.css</a></p>\n<p>下面的文字也详细的介绍了 web 中文字体的设置</p>\n<blockquote>\n<p>作者：<a href=\"http://ruby-china.org/nightire\">nightire</a> <a href=\"http://ruby-china.org/topics/14005\">Web 中文字体应用指南</a></p>\n</blockquote>\n<hr>\n<h3 id=\"Web-中文字体应用指南\"><a href=\"#Web-中文字体应用指南\" class=\"headerlink\" title=\"Web 中文字体应用指南\"></a>Web 中文字体应用指南</h3><p>在 Web 上应用字体是一项基本技术，同时也是一门艺术。对于英文字体来说可选择的范围实在是太广泛了，合理的使用它们将会为你的网站增色不少。关于英文字体的使用和搭配技巧，在这里不做赘述，只推荐一套非常好的视频：<a href=\"https://www.codeschool.com/courses/fundamentals-of-design\">Fundamentals of Design by CodeSchool</a></p>\n<p>而真正的挑战在于中文字体，由于中文字体组成的特殊性导致其体积过于庞大，除了操作系统内置的字体之外，我们很难在网站上应用其他的字体。在可选性很差的前提之下，如何正确的使用中文字体呢？</p>\n<p>首先，以下的字体声明都是很糟糕的，切忌使用：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">font-family</span>: \"宋体\";</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">font-family</span>: \"宋体\", <span class=\"selector-tag\">Arial</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">font-family</span>: <span class=\"selector-tag\">Arial</span>, \"宋体\", \"微软雅黑\";</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">font-family</span>: <span class=\"selector-tag\">Helvetica</span>, <span class=\"selector-tag\">Arial</span>, \"华文细黑\", \"微软雅黑\";</div></pre></td></tr></table></figure>\n<p>接下来，我们一步一步来说明如何定义好的字体声明。</p>\n<h3 id=\"中文字体也有英文名称\"><a href=\"#中文字体也有英文名称\" class=\"headerlink\" title=\"中文字体也有英文名称\"></a>中文字体也有英文名称</h3><p>很多开发者忽略了这一点：尽管我们在操作系统中常常看到宋体、微软雅黑、华文细黑这样的字体名称，但实际上这只是字体的显示名称，而不是字体文件的名称。虽然说在大多数情况下直接使用显示名称也有效，但有些用户却工作在一些很极端的情况下，这会导致你的字体声明无效。</p>\n<p>比如说，用户安装了中文版的操作系统（这意味着系统有中文字体），但是却切换到了以英文为主要语言——这种情况在那些希望加强英语锻炼的中文用户当中是很常见的。这时候，操作系统很有可能无法按照显示名称找到正确的字体，所以我们要记住的第一件事情就是： <strong>同时声明中文字体的字体名称（英文）和显示名称（中文）</strong>，就像这样：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">font-family</span>: <span class=\"selector-tag\">SimSun</span>, \"宋体\";</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">font-family</span>: \"<span class=\"selector-tag\">Microsoft</span> <span class=\"selector-tag\">YaHei</span>\", \"微软雅黑\";</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">font-family</span>: <span class=\"selector-tag\">STXihei</span>, \"华文细黑\", \"<span class=\"selector-tag\">Microsoft</span> <span class=\"selector-tag\">YaHei</span>\", \"微软雅黑\";</div></pre></td></tr></table></figure>\n<h3 id=\"永远不要忘记声明英文字体，并且英文字体应该在中文字体之前\"><a href=\"#永远不要忘记声明英文字体，并且英文字体应该在中文字体之前\" class=\"headerlink\" title=\"永远不要忘记声明英文字体，并且英文字体应该在中文字体之前\"></a>永远不要忘记声明英文字体，并且英文字体应该在中文字体之前</h3><p>记住这个事实：绝大部分中文字体里包含英文字母（但是基本上都很丑），而英文字体里不包含中文字符。</p>\n<p>在网页里中/英文混排是很常见的，你绝对不会喜欢用中文字体显示英文的效果，所以一定不要忘了先声明英文字体：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">font-family</span>: <span class=\"selector-tag\">Georgia</span>, <span class=\"selector-tag\">SimSun</span>, \"宋体\";</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">font-family</span>: <span class=\"selector-tag\">Arial</span>, \"<span class=\"selector-tag\">Microsoft</span> <span class=\"selector-tag\">YaHei</span>\", \"微软雅黑\";</div></pre></td></tr></table></figure>\n<p>另外还有一个好习惯，就是在最后补充英文字体族的名称。字体族大体上分为两类：非衬线和衬线，它们之间的区别和使用规则请见本文开始介绍的视频。一般来说，你应该这么做：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">font-family</span>: <span class=\"selector-tag\">Georgia</span>, <span class=\"selector-tag\">SimSun</span>, \"宋体\", <span class=\"selector-tag\">serif</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">font-family</span>: <span class=\"selector-tag\">Arial</span>, \"<span class=\"selector-tag\">Microsoft</span> <span class=\"selector-tag\">YaHei</span>\", \"微软雅黑\", <span class=\"selector-tag\">sans-serif</span>;</div></pre></td></tr></table></figure>\n<p>请注意：以上两句声明中的 宋体 和 微软雅黑 不应该调换（尽管调换了也不会发生错误），这是因为从字体的式样来看，微软雅黑 是非衬线的，而宋体才是衬线的。然而中文并不像英文那样严格区分字体族，所以这一点在实际应用当中并不那么重要。</p>\n<h3 id=\"别忘了照顾不同的操作系统\"><a href=\"#别忘了照顾不同的操作系统\" class=\"headerlink\" title=\"别忘了照顾不同的操作系统\"></a>别忘了照顾不同的操作系统</h3><p>作为一个 Web 开发者，你理应对 Windows, Mac OS, Linux 家族等常用操作系统里的系统字体有足够的了解，特别是中文。在这里，我们假设目标网站要同时给予 windows 用户和 mac 用户最好的字体体验，于是我们可以这样声明：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">font-family</span>: <span class=\"selector-tag\">Helvetica</span>, <span class=\"selector-tag\">Tahoma</span>, <span class=\"selector-tag\">Arial</span>, <span class=\"selector-tag\">STXihei</span>, \"华文细黑\", \"<span class=\"selector-tag\">Microsoft</span> <span class=\"selector-tag\">YaHei</span>\", \"微软雅黑\", <span class=\"selector-tag\">sans-serif</span>;</div></pre></td></tr></table></figure>\n<p>这句声明都做到哪些事情呢？让我们一一说明（括号内代表其对应的目标操作系统）：</p>\n<ul>\n<li>对于英文字符，首先查找 <code>Helvetica</code>(Mac)，然后查找 <code>Tahoma</code>(Win)，都找不到就用 <code>Arial</code>(Mac&amp;Win)；若是以上三者都缺失，则使用当前默认的 <code>sans-serif</code> 字体(操作系统或浏览器指定)；</li>\n<li>对于中文字体，我们已经了解其规则了。<code>华文细黑</code>(Mac)，<code>微软雅黑</code>(Win)是这两个平台的默认中文字体。</li>\n</ul>\n<h3 id=\"注意向下兼容\"><a href=\"#注意向下兼容\" class=\"headerlink\" title=\"注意向下兼容\"></a>注意向下兼容</h3><p>到此为止，我们的字体声明已经很不错了——如果你不必考虑还在使用旧版本操作系统的用户的话。遗憾地是，中文市场还有大量的用户在使用 Windows XP，<code>宋体</code> 才是他们的主要中文字体。为了照顾到这些用户，你可以为 <code>微软雅黑</code> 增加一个 fallback：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">font-family</span>: <span class=\"selector-tag\">Helvetica</span>, <span class=\"selector-tag\">Tahoma</span>, <span class=\"selector-tag\">Arial</span>, <span class=\"selector-tag\">STXihei</span>, \"华文细黑\", <span class=\"selector-tag\">Heiti</span>, \"黑体\", \"<span class=\"selector-tag\">Microsoft</span> <span class=\"selector-tag\">YaHei</span>\", \"微软雅黑\", <span class=\"selector-tag\">SimSun</span>, \"宋体\", <span class=\"selector-tag\">sans-serif</span>;</div></pre></td></tr></table></figure>\n<p>同样地，你看到我们也为 Mac 系统使用了 <code>黑体</code> 作为 fallback。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><h4 id=\"不加双引号可以吗？\"><a href=\"#不加双引号可以吗？\" class=\"headerlink\" title=\"不加双引号可以吗？\"></a>不加双引号可以吗？</h4><p>可以。有些英文字体的名称多于两个单词，因为单词中间有空格所以需要用 <code>&quot;&quot;</code> 包裹起来。中文字体很特别，按照英文的角度来看，像微软雅黑究竟算是一个词还是四个词呢？没关系，好在中文字体的名称里没有空格，所以 <code>&quot;&quot;</code> 不加也没什么大碍。</p>\n<p>不过，谁都不能保证在任何操作系统/浏览器环境下都是如此，若是发生了奇怪的事情，不妨加上双引号试试看。</p>\n<h4 id=\"可以默认显示某种字体吗？比如微软雅黑\"><a href=\"#可以默认显示某种字体吗？比如微软雅黑\" class=\"headerlink\" title=\"可以默认显示某种字体吗？比如微软雅黑\"></a>可以默认显示某种字体吗？比如微软雅黑</h4><p>你可能注意到了，在我们最后的字体声明里，<code>华文细黑</code> 是默认字体（如果你的系统上安装了声明里所有的中文字体的话），为什么我要先声明 Mac 系统的字体呢？</p>\n<p>按理来说，大多数网站的主要目标市场还是 Windows 用户的，所以理论上这个才是合理的声明：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">font-family</span>: <span class=\"selector-tag\">Helvetica</span>, <span class=\"selector-tag\">Tahoma</span>, <span class=\"selector-tag\">Arial</span>, \"<span class=\"selector-tag\">Microsoft</span> <span class=\"selector-tag\">YaHei</span>\", \"微软雅黑\", <span class=\"selector-tag\">SimSun</span>, \"宋体\", <span class=\"selector-tag\">STXihei</span>, \"华文细黑\", <span class=\"selector-tag\">Heiti</span>, \"黑体\", <span class=\"selector-tag\">sans-serif</span>;</div></pre></td></tr></table></figure>\n<p>但实际上却并非如此。在中文字体的用户群体里，很大一部分拥有 Mac 的人都同时安装了 Win 下常用的中文字体（这得归功于 Office for Mac）；但极少有 Win 用户去安装 Mac 下的中文字体。</p>\n<p>因此，把 Mac 用字体声明在前面几乎不会对 Win 用户产生什么影响（因为他们压根没有！），倒是用来做 fallback 的黑体可能会取代微软雅黑的位置，所以更保险的做法或许是这样：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">font-family</span>: <span class=\"selector-tag\">Helvetica</span>, <span class=\"selector-tag\">Tahoma</span>, <span class=\"selector-tag\">Arial</span>, <span class=\"selector-tag\">STXihei</span>, \"华文细黑\", \"<span class=\"selector-tag\">Microsoft</span> <span class=\"selector-tag\">YaHei</span>\", \"微软雅黑\", <span class=\"selector-tag\">SimSun</span>, \"宋体\", <span class=\"selector-tag\">Heiti</span>, \"黑体\", <span class=\"selector-tag\">sans-serif</span>;</div></pre></td></tr></table></figure>\n<p>但无论如何请不要把 <code>微软雅黑</code> 放在中文字体的最前面，作为史上最丑陋的中文字体之一，<code>微软雅黑</code> 实在不是什么好的选择，请照顾一下被 Mac 宠坏的用户吧，谢谢！（仅代表个人观点）</p>\n<p>BTW，如果你也像我一样不喜欢呆头呆脑的 <code>微软雅黑</code>，那就干脆把它删了吧~</p>\n<p>到此为止，虽然在我们的示例代码里没有包含 Linux 家族的例子，不过相信你也明白该怎么做了吧。</p>\n<h3 id=\"一点补充\"><a href=\"#一点补充\" class=\"headerlink\" title=\"一点补充\"></a>一点补充</h3><p>鉴于一些人对 <code>微软雅黑</code> 的排位产生异议，我不妨把上文的解决方案再延伸一步。事实是这样子的：</p>\n<ul>\n<li>把 <code>微软雅黑</code> 放前面，会导致安装了 <code>微软雅黑</code> 字体的 Mac 用户不得不面对 <code>微软雅黑</code>，而在 Mac 下比 <code>微软雅黑</code> 优雅得多的中文字体比比皆是；</li>\n<li>把 Mac 下的字体放前面，也会对 Windows 用户造成差不多的困惑，毕竟微软雅黑是 Windows 平台下显示效果最好的字体（目前为止）；<br>1 和 2，哪一种出现的概率更大一些？我想这是一个不需要计算就能知道的答案吧？</li>\n</ul>\n<p>但是——的确还有另外两个因素在纠结着：</p>\n<ul>\n<li>不少 Windows 用户因为各种原因关闭了 <code>ClearType</code>，在此情形下微软雅黑将会惨不忍睹！但是 Mac 的字体也不是好的选择，真正的胜出者？猜对了，宋体。</li>\n<li>绝大部分 Mac 下的黑体在 Windows 下模糊不清，而微软雅黑虽然丑但在 Mac 下至少能看。（间接体现了两个平台的字体渲染技术的差距）</li>\n</ul>\n<p>所以在实践中，真正接近“万无一失”的方案需要考虑以下几点：</p>\n<ul>\n<li>利用 UA 判断为不同的平台加载不一样的字体声明；</li>\n<li>除非有特别的原因，否则尽量保持正文用宋体，标题和其他可以放大些的地方用 <code>微软雅黑</code> （针对 Windows）；</li>\n<li>Mac 下的冬青体效果极佳，但是该字体在 Mac OS X 10.6 以前是没有的，所以谨慎考虑你的用户群体，或者使用华文黑体系列做 fallback；</li>\n</ul>\n<p>最后，我不想再和任何人争论字体的优劣，本文的目的是介绍使用方法而不是字体选择。“美”或“丑”向来都是很主观的事情，只因为我是作者，所以我免不了会有倾向性，然而我也相信你自己会有正确的判断，和我较真没有任何实际意义。</p>\n"},{"title":"HTML5 audio 跨页面持续播放","date":"2017-01-17T03:48:40.000Z","_content":"\n### 写在前面\n继 [上个H5活动](http://bestcsser.cc/2016/12/26/h5-pimiao-game-project-summary/) 关于音乐跨页面持续播放的问题，没有在上个项目里解决掉，妥协使用每个页面重新播放。\n这次的H5活动同样也需要用到背景音乐。提前去搜索相关的文章，看能不能很好的解决这个问题。\n\n\n### 过程\n关于跨页面持续播放音乐的场景，第一个想到的就是网易云音乐Web版的音乐播放，看了源码具体的DOM结构就是播放器和页面是分开的，页面是使用iFrame来展现，即使跳转页面，\n也只是在iFrame内跳转，这就解决了问题（我说的很肤浅）。\n\n手机端显然是不能够用到iFrame的（一直很抵触使用iFrame）。只能再去查了。\n\n`currentTime` 设置或返回当前播放位置（以秒计）。既然有了 `currentTime` ，问题是不是就是好解决了...\n\n使用 `localStorage` 在跳转页面前把 `currentTime` 存储起来，再打开新的页面中，为音乐设置最新的 `currentTime`，这样以来音乐就能够在新打开的页面接着在上次跳转的时候播放了。\n\n由于该活动是在朋友圈传播，之前有听说微信内置浏览器对 `localStorage` 的支持不够友好，关于这个问题查了很多文章，说的云里雾里，最后还是没结果。那就直接写吧。\n\n\n### 遇到的问题及想到的\n最后代码的实现及在手机端的测试（小米4C，iphone6s/iphone7最新版微信），都能够实现在新打开的页面接着在上次跳转的时候播放。虽然问题是解决了，但在实际中体验还是不够好，\n每次打开新的页面，音乐都要重新加载一次，网络状况不好的情况，就很尴尬，等了许久音乐才继续播放，也可能在用户要进去下一个新的页面了，音乐还是没加载好。网络状况理想的\n情况下，表现还是不错的。\n\n最后再想想这个事情，最简单直接的实现就是 单页面 来开发。就不用为音乐的事情犯愁了，当然音乐文件越小越理想。\n\n这是地址 [Fast-PK](http://coding-living.coding.me/Fast-PK-H5)\n\n\n### 关于audio/video\n- [video标签在不同平台上的事件表现差异分析](http://imweb.io/topic/560a6015c2317a8c3e086207)\n- [HTML5 Audio-使用 Media 事件添加进度栏](http://www.xuanfengge.com/html5-audio-using-a-media-event-to-add-a-progress-bar.html)\n","source":"_posts/html5-audio-across-pages-continues-play.md","raw":"---\ntitle: 'HTML5 audio 跨页面持续播放'\ndate: 2017-01-17 11:48:40\ncategories: 项目总结\ntags: ['audio','localStorage']\n---\n\n### 写在前面\n继 [上个H5活动](http://bestcsser.cc/2016/12/26/h5-pimiao-game-project-summary/) 关于音乐跨页面持续播放的问题，没有在上个项目里解决掉，妥协使用每个页面重新播放。\n这次的H5活动同样也需要用到背景音乐。提前去搜索相关的文章，看能不能很好的解决这个问题。\n\n\n### 过程\n关于跨页面持续播放音乐的场景，第一个想到的就是网易云音乐Web版的音乐播放，看了源码具体的DOM结构就是播放器和页面是分开的，页面是使用iFrame来展现，即使跳转页面，\n也只是在iFrame内跳转，这就解决了问题（我说的很肤浅）。\n\n手机端显然是不能够用到iFrame的（一直很抵触使用iFrame）。只能再去查了。\n\n`currentTime` 设置或返回当前播放位置（以秒计）。既然有了 `currentTime` ，问题是不是就是好解决了...\n\n使用 `localStorage` 在跳转页面前把 `currentTime` 存储起来，再打开新的页面中，为音乐设置最新的 `currentTime`，这样以来音乐就能够在新打开的页面接着在上次跳转的时候播放了。\n\n由于该活动是在朋友圈传播，之前有听说微信内置浏览器对 `localStorage` 的支持不够友好，关于这个问题查了很多文章，说的云里雾里，最后还是没结果。那就直接写吧。\n\n\n### 遇到的问题及想到的\n最后代码的实现及在手机端的测试（小米4C，iphone6s/iphone7最新版微信），都能够实现在新打开的页面接着在上次跳转的时候播放。虽然问题是解决了，但在实际中体验还是不够好，\n每次打开新的页面，音乐都要重新加载一次，网络状况不好的情况，就很尴尬，等了许久音乐才继续播放，也可能在用户要进去下一个新的页面了，音乐还是没加载好。网络状况理想的\n情况下，表现还是不错的。\n\n最后再想想这个事情，最简单直接的实现就是 单页面 来开发。就不用为音乐的事情犯愁了，当然音乐文件越小越理想。\n\n这是地址 [Fast-PK](http://coding-living.coding.me/Fast-PK-H5)\n\n\n### 关于audio/video\n- [video标签在不同平台上的事件表现差异分析](http://imweb.io/topic/560a6015c2317a8c3e086207)\n- [HTML5 Audio-使用 Media 事件添加进度栏](http://www.xuanfengge.com/html5-audio-using-a-media-event-to-add-a-progress-bar.html)\n","slug":"html5-audio-across-pages-continues-play","published":1,"updated":"2017-03-09T09:28:46.066Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj17hdrrp000ahkajx4auixcp","content":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>继 <a href=\"http://bestcsser.cc/2016/12/26/h5-pimiao-game-project-summary/\" target=\"_blank\" rel=\"external\">上个H5活动</a> 关于音乐跨页面持续播放的问题，没有在上个项目里解决掉，妥协使用每个页面重新播放。<br>这次的H5活动同样也需要用到背景音乐。提前去搜索相关的文章，看能不能很好的解决这个问题。</p>\n<h3 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h3><p>关于跨页面持续播放音乐的场景，第一个想到的就是网易云音乐Web版的音乐播放，看了源码具体的DOM结构就是播放器和页面是分开的，页面是使用iFrame来展现，即使跳转页面，<br>也只是在iFrame内跳转，这就解决了问题（我说的很肤浅）。</p>\n<p>手机端显然是不能够用到iFrame的（一直很抵触使用iFrame）。只能再去查了。</p>\n<p><code>currentTime</code> 设置或返回当前播放位置（以秒计）。既然有了 <code>currentTime</code> ，问题是不是就是好解决了…</p>\n<p>使用 <code>localStorage</code> 在跳转页面前把 <code>currentTime</code> 存储起来，再打开新的页面中，为音乐设置最新的 <code>currentTime</code>，这样以来音乐就能够在新打开的页面接着在上次跳转的时候播放了。</p>\n<p>由于该活动是在朋友圈传播，之前有听说微信内置浏览器对 <code>localStorage</code> 的支持不够友好，关于这个问题查了很多文章，说的云里雾里，最后还是没结果。那就直接写吧。</p>\n<h3 id=\"遇到的问题及想到的\"><a href=\"#遇到的问题及想到的\" class=\"headerlink\" title=\"遇到的问题及想到的\"></a>遇到的问题及想到的</h3><p>最后代码的实现及在手机端的测试（小米4C，iphone6s/iphone7最新版微信），都能够实现在新打开的页面接着在上次跳转的时候播放。虽然问题是解决了，但在实际中体验还是不够好，<br>每次打开新的页面，音乐都要重新加载一次，网络状况不好的情况，就很尴尬，等了许久音乐才继续播放，也可能在用户要进去下一个新的页面了，音乐还是没加载好。网络状况理想的<br>情况下，表现还是不错的。</p>\n<p>最后再想想这个事情，最简单直接的实现就是 单页面 来开发。就不用为音乐的事情犯愁了，当然音乐文件越小越理想。</p>\n<p>这是地址 <a href=\"http://coding-living.coding.me/Fast-PK-H5\" target=\"_blank\" rel=\"external\">Fast-PK</a></p>\n<h3 id=\"关于audio-video\"><a href=\"#关于audio-video\" class=\"headerlink\" title=\"关于audio/video\"></a>关于audio/video</h3><ul>\n<li><a href=\"http://imweb.io/topic/560a6015c2317a8c3e086207\" target=\"_blank\" rel=\"external\">video标签在不同平台上的事件表现差异分析</a></li>\n<li><a href=\"http://www.xuanfengge.com/html5-audio-using-a-media-event-to-add-a-progress-bar.html\" target=\"_blank\" rel=\"external\">HTML5 Audio-使用 Media 事件添加进度栏</a></li>\n</ul>\n","excerpt":"","more":"<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p>继 <a href=\"http://bestcsser.cc/2016/12/26/h5-pimiao-game-project-summary/\">上个H5活动</a> 关于音乐跨页面持续播放的问题，没有在上个项目里解决掉，妥协使用每个页面重新播放。<br>这次的H5活动同样也需要用到背景音乐。提前去搜索相关的文章，看能不能很好的解决这个问题。</p>\n<h3 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h3><p>关于跨页面持续播放音乐的场景，第一个想到的就是网易云音乐Web版的音乐播放，看了源码具体的DOM结构就是播放器和页面是分开的，页面是使用iFrame来展现，即使跳转页面，<br>也只是在iFrame内跳转，这就解决了问题（我说的很肤浅）。</p>\n<p>手机端显然是不能够用到iFrame的（一直很抵触使用iFrame）。只能再去查了。</p>\n<p><code>currentTime</code> 设置或返回当前播放位置（以秒计）。既然有了 <code>currentTime</code> ，问题是不是就是好解决了…</p>\n<p>使用 <code>localStorage</code> 在跳转页面前把 <code>currentTime</code> 存储起来，再打开新的页面中，为音乐设置最新的 <code>currentTime</code>，这样以来音乐就能够在新打开的页面接着在上次跳转的时候播放了。</p>\n<p>由于该活动是在朋友圈传播，之前有听说微信内置浏览器对 <code>localStorage</code> 的支持不够友好，关于这个问题查了很多文章，说的云里雾里，最后还是没结果。那就直接写吧。</p>\n<h3 id=\"遇到的问题及想到的\"><a href=\"#遇到的问题及想到的\" class=\"headerlink\" title=\"遇到的问题及想到的\"></a>遇到的问题及想到的</h3><p>最后代码的实现及在手机端的测试（小米4C，iphone6s/iphone7最新版微信），都能够实现在新打开的页面接着在上次跳转的时候播放。虽然问题是解决了，但在实际中体验还是不够好，<br>每次打开新的页面，音乐都要重新加载一次，网络状况不好的情况，就很尴尬，等了许久音乐才继续播放，也可能在用户要进去下一个新的页面了，音乐还是没加载好。网络状况理想的<br>情况下，表现还是不错的。</p>\n<p>最后再想想这个事情，最简单直接的实现就是 单页面 来开发。就不用为音乐的事情犯愁了，当然音乐文件越小越理想。</p>\n<p>这是地址 <a href=\"http://coding-living.coding.me/Fast-PK-H5\">Fast-PK</a></p>\n<h3 id=\"关于audio-video\"><a href=\"#关于audio-video\" class=\"headerlink\" title=\"关于audio/video\"></a>关于audio/video</h3><ul>\n<li><a href=\"http://imweb.io/topic/560a6015c2317a8c3e086207\">video标签在不同平台上的事件表现差异分析</a></li>\n<li><a href=\"http://www.xuanfengge.com/html5-audio-using-a-media-event-to-add-a-progress-bar.html\">HTML5 Audio-使用 Media 事件添加进度栏</a></li>\n</ul>\n"},{"title":"[转载]ES5中数组Array.prototype方法的使用","date":"2017-03-08T08:08:57.000Z","_content":"\n熟悉ES5中数组Array.prototype方法的使用\n\n> 转载：[你还在用for循环大法麽？](https://shimo.im/doc/VXqv2bxTlOUiJJqO/)\n\n```javascript\nArray.prototype.indexOf\nArray.prototype.lastIndexOf\nArray.prototype.every\nArray.prototype.some\nArray.prototype.forEach\nArray.prototype.map\nArray.prototype.filter\nArray.prototype.reduce\nArray.prototype.reduceRight\n```\n\n## indexOf()\n\n`indexOf()` 方法返回在该数组中第一个找到的元素位置，没有则返回 `-1`\n\n**使用 for:**\n```javascript\nvar arr = ['apple','orange','pear'],\n    found = false;\nfor(var i= 0, l = arr.length; i< l; i++){\n    if(arr[i] === 'orange'){\n        found = true;\n    }\n}\nconsole.log(\"found:\",found);\n```\n\n**使用 indexOf:**\n````javascript\nvar arr = ['apple','orange','pear'];  \nconsole.log(\"found:\", arr.indexOf(\"orange\") != -1);\n```\n\n## lastindexOf()\n\n`lastindexOf()` 方法返回在该数组中最后一个找到的元素位置，与 indexOf 相反\n\n## every()\n\n`every()` 可以监测数组中的每一项是否符合条件\n\n**使用 for:**\n\n```javascript\n/* \n* 是否全部大于0\n*/\nvar ary = [12,23,24,42,1];\nvar result = function(){\n  for (var i = 0; i < ary.length; i++) {\n    if(ary[i] < 0){\n       return false;\n    }\n  }\n  return true; //需全部满足\n}\nconsole.log(result()) //全部满足,返回true\n```\n\n**使用 every:**\n```javascript\nvar ary = [12,23,24,42,1];\nvar result = ary.every(function(item, index){\n  return item > 0\n})\nconsole.log(result)\n```\n\n\n## some()\n\n`some()` 可以监测数组中的某一项是否符合条件\n\n**使用 for:**\n```javascript\n/* \n* 是否存在小于0的项\n*/\nvar ary = [12,23,-24,42,1];\nvar result = function(){\n  for (var i = 0; i < ary.length; i++) {\n    if(ary[i] < 0){\n       return true;\n    }\n  }\n  return false; //只需满足一个\n}\nconsole.log(result())  //有一项小于0，返回true\n```\n\n**使用 some:**\n```javascript\nvar ary = [12,23,-24,42,1];\nvar result = ary.some(function(item, index){\n  return item < 0\n})\nconsole.log(result)\n```\n\n\n## forEach()\n\n`forEach()` 为每个元素执行对应的方法，是用来替换for循环的\n\n**使用 for:**\n```javascript\nvar arr = [1,2,3,4,5,6,7,8];\n\nfor(var i= 0, l = arr.length; i< l; i++){\n  console.log(arr[i]);\n}\n```\n\n**使用 forEach:**\n```javascript\nvar arr = [1,2,3,4,5,6,7,8];\n\narr.forEach(function(item,index){\n  console.log(item);\n});\n```\n\n## map()\n\n'map()' 对数组的每个元素进行一定操作（映射）后，会返回一个新的数组，**是处理服务器返回数据时是一个非常实用的函数**\n\n**使用 for:**\n```javascript\nvar oldArr = [{\n   first_name:\"Colin\",last_name:\"Toh\"\n },\n {\n   first_name:\"Addy\",last_name:\"Osmani\"\n },\n {\n   first_name:\"Yehuda\",last_name:\"Katz\"\n }];\n\nfunction getNewArr(){\n  var newArr = [];\n  for(var i= 0, l = oldArr.length; i< l; i++){\n    var item = oldArr[i];\n    item.full_name = [item.first_name,item.last_name].join(\" \");\n    newArr[i] = item;\n  }\n  return newArr;\n}\nconsole.log(getNewArr());\n```\n\n**使用 map:**\n```javascript\nvar oldArr = [{\n   first_name:\"Colin\",last_name:\"Toh\"\n },\n {\n   first_name:\"Addy\",last_name:\"Osmani\"\n },\n {\n   first_name:\"Yehuda\",last_name:\"Katz\"\n }];\n\nfunction getNewArr(){\n  return oldArr.map(function(item,index){\n    item.full_name = [item.first_name,item.last_name].join(\" \");\n    return item;\n  });\n\n}\nconsole.log(getNewArr());\n```\n\n------\n\n## forEach 与 map 的区别\n\n**语法：**\n\n`forEach` 和 `map` 都支持2个参数：一个是回调函数（item,index,list）和 [上下文](http://note.youdao.com/noteshare?id=aa25aa404e4d92b9ed40ef79a46f91da)；\n\n>forEach：用来遍历数组中的每一项；这个方法执行是没有返回值的，对原来数组也没有影响；数组中有几项，那么传递进去的匿名回调函数就需要执行几次；每一次执行匿名函数的时候，还给其传递了三个参数值：数组中的当前项item,当前项的索引index,原始数组list；**理论上这个方法是没有返回值的，仅仅是遍历数组中的每一项，不对原来数组进行修改；但是我们可以自己通过数组的索引来修改原来的数组**；\n\n`forEach` 方法中的 `this` 是 `ary`,匿名回调函数中的 `this` 默认是 `window`；\n\n```javascript\nvar ary = [12,23,24,42,1];\nvar res = ary.forEach(function (item,index,input) {\n  input[index] = item*10;\n})\nconsole.log(res);//-->undefined;\nconsole.log(ary);//-->会对原来的数组产生改变；\n```\n\n>map： 和 forEach 非常相似，都是用来遍历数组中的每一项值的，用来遍历数组中的每一项；\n区别：map的回调函数中支持 return 返回值；return 的是啥，相当于把数组中的这一项变为啥（并不影响原来的数组，只是相当于把原数组克隆一份，把克隆的这一份的数组中的对应项改变了）；\n\n不管是forEach还是map 都支持第二个参数值，第二个参数的意思是把匿名回调函数中的this进行修改。\n\n```javascript\nvar ary = [12,23,24,42,1];\nvar res = ary.map(function (item,index,input) {\n  return item*10;\n})\nconsole.log(res);//-->[120,230,240,420,10];\nconsole.log(ary);//-->[12,23,24,42,1]；\n```\n\n------\n\n\n## filter()\n\n`filter()` 方法创建一个新的匹配过滤条件的数组\n\n**使用 for:**\n\n```javascript\nvar arr = [\n  {\"name\":\"apple\", \"count\": 2},\n  {\"name\":\"orange\", \"count\": 5},\n  {\"name\":\"pear\", \"count\": 3},\n  {\"name\":\"orange\", \"count\": 16},\n];\nvar newArr = [];\nfor(var i= 0, l = arr.length; i< l; i++){\n  if(arr[i].name === \"orange\" ){\n    newArr.push(arr[i]);\n  }\n}\nconsole.log(\"Filter results:\",newArr);\n```\n\n**使用 filter:**\n\n```javascript\nvar arr = [\n  {\"name\":\"apple\", \"count\": 2},\n  {\"name\":\"orange\", \"count\": 5},\n  {\"name\":\"pear\", \"count\": 3},\n  {\"name\":\"orange\", \"count\": 16},\n];\nvar newArr = arr.filter(function(item){\n  return item.name === \"orange\";\n});\nconsole.log(\"Filter results:\",newArr);\n```\n\n\n## reduce()\n\n我好像不理解这东西，原文就不放了......暂空\n\n## isArray()\n\n`isArray()` 是Array对象的一个静态函数，用来判断一个对象是不是数组\n\n```javascript\nvar ary1 = [];\nvar res1 = Array.isArray(ary1);  // Output: true\nconsole.log(res1)\n\nvar ary2 = new Array();\nvar res2 = Array.isArray(ary2);  // Output: true\nconsole.log(res2)\n\nvar ary3 = [1, 2, 3];\nvar res3 = Array.isArray(ary3);  // Output: true\nconsole.log(res3)\n\nvar ary4 = new Date();\nvar res4 = Array.isArray(ary4);  // Output: false\nconsole.log(res4)\n```","source":"_posts/ES5-array-prototype.md","raw":"---\ntitle: '[转载]ES5中数组Array.prototype方法的使用'\ndate: 2017-03-08 16:08:57\ncategories: javaScript日常笔记\ntags: array\n---\n\n熟悉ES5中数组Array.prototype方法的使用\n\n> 转载：[你还在用for循环大法麽？](https://shimo.im/doc/VXqv2bxTlOUiJJqO/)\n\n```javascript\nArray.prototype.indexOf\nArray.prototype.lastIndexOf\nArray.prototype.every\nArray.prototype.some\nArray.prototype.forEach\nArray.prototype.map\nArray.prototype.filter\nArray.prototype.reduce\nArray.prototype.reduceRight\n```\n\n## indexOf()\n\n`indexOf()` 方法返回在该数组中第一个找到的元素位置，没有则返回 `-1`\n\n**使用 for:**\n```javascript\nvar arr = ['apple','orange','pear'],\n    found = false;\nfor(var i= 0, l = arr.length; i< l; i++){\n    if(arr[i] === 'orange'){\n        found = true;\n    }\n}\nconsole.log(\"found:\",found);\n```\n\n**使用 indexOf:**\n````javascript\nvar arr = ['apple','orange','pear'];  \nconsole.log(\"found:\", arr.indexOf(\"orange\") != -1);\n```\n\n## lastindexOf()\n\n`lastindexOf()` 方法返回在该数组中最后一个找到的元素位置，与 indexOf 相反\n\n## every()\n\n`every()` 可以监测数组中的每一项是否符合条件\n\n**使用 for:**\n\n```javascript\n/* \n* 是否全部大于0\n*/\nvar ary = [12,23,24,42,1];\nvar result = function(){\n  for (var i = 0; i < ary.length; i++) {\n    if(ary[i] < 0){\n       return false;\n    }\n  }\n  return true; //需全部满足\n}\nconsole.log(result()) //全部满足,返回true\n```\n\n**使用 every:**\n```javascript\nvar ary = [12,23,24,42,1];\nvar result = ary.every(function(item, index){\n  return item > 0\n})\nconsole.log(result)\n```\n\n\n## some()\n\n`some()` 可以监测数组中的某一项是否符合条件\n\n**使用 for:**\n```javascript\n/* \n* 是否存在小于0的项\n*/\nvar ary = [12,23,-24,42,1];\nvar result = function(){\n  for (var i = 0; i < ary.length; i++) {\n    if(ary[i] < 0){\n       return true;\n    }\n  }\n  return false; //只需满足一个\n}\nconsole.log(result())  //有一项小于0，返回true\n```\n\n**使用 some:**\n```javascript\nvar ary = [12,23,-24,42,1];\nvar result = ary.some(function(item, index){\n  return item < 0\n})\nconsole.log(result)\n```\n\n\n## forEach()\n\n`forEach()` 为每个元素执行对应的方法，是用来替换for循环的\n\n**使用 for:**\n```javascript\nvar arr = [1,2,3,4,5,6,7,8];\n\nfor(var i= 0, l = arr.length; i< l; i++){\n  console.log(arr[i]);\n}\n```\n\n**使用 forEach:**\n```javascript\nvar arr = [1,2,3,4,5,6,7,8];\n\narr.forEach(function(item,index){\n  console.log(item);\n});\n```\n\n## map()\n\n'map()' 对数组的每个元素进行一定操作（映射）后，会返回一个新的数组，**是处理服务器返回数据时是一个非常实用的函数**\n\n**使用 for:**\n```javascript\nvar oldArr = [{\n   first_name:\"Colin\",last_name:\"Toh\"\n },\n {\n   first_name:\"Addy\",last_name:\"Osmani\"\n },\n {\n   first_name:\"Yehuda\",last_name:\"Katz\"\n }];\n\nfunction getNewArr(){\n  var newArr = [];\n  for(var i= 0, l = oldArr.length; i< l; i++){\n    var item = oldArr[i];\n    item.full_name = [item.first_name,item.last_name].join(\" \");\n    newArr[i] = item;\n  }\n  return newArr;\n}\nconsole.log(getNewArr());\n```\n\n**使用 map:**\n```javascript\nvar oldArr = [{\n   first_name:\"Colin\",last_name:\"Toh\"\n },\n {\n   first_name:\"Addy\",last_name:\"Osmani\"\n },\n {\n   first_name:\"Yehuda\",last_name:\"Katz\"\n }];\n\nfunction getNewArr(){\n  return oldArr.map(function(item,index){\n    item.full_name = [item.first_name,item.last_name].join(\" \");\n    return item;\n  });\n\n}\nconsole.log(getNewArr());\n```\n\n------\n\n## forEach 与 map 的区别\n\n**语法：**\n\n`forEach` 和 `map` 都支持2个参数：一个是回调函数（item,index,list）和 [上下文](http://note.youdao.com/noteshare?id=aa25aa404e4d92b9ed40ef79a46f91da)；\n\n>forEach：用来遍历数组中的每一项；这个方法执行是没有返回值的，对原来数组也没有影响；数组中有几项，那么传递进去的匿名回调函数就需要执行几次；每一次执行匿名函数的时候，还给其传递了三个参数值：数组中的当前项item,当前项的索引index,原始数组list；**理论上这个方法是没有返回值的，仅仅是遍历数组中的每一项，不对原来数组进行修改；但是我们可以自己通过数组的索引来修改原来的数组**；\n\n`forEach` 方法中的 `this` 是 `ary`,匿名回调函数中的 `this` 默认是 `window`；\n\n```javascript\nvar ary = [12,23,24,42,1];\nvar res = ary.forEach(function (item,index,input) {\n  input[index] = item*10;\n})\nconsole.log(res);//-->undefined;\nconsole.log(ary);//-->会对原来的数组产生改变；\n```\n\n>map： 和 forEach 非常相似，都是用来遍历数组中的每一项值的，用来遍历数组中的每一项；\n区别：map的回调函数中支持 return 返回值；return 的是啥，相当于把数组中的这一项变为啥（并不影响原来的数组，只是相当于把原数组克隆一份，把克隆的这一份的数组中的对应项改变了）；\n\n不管是forEach还是map 都支持第二个参数值，第二个参数的意思是把匿名回调函数中的this进行修改。\n\n```javascript\nvar ary = [12,23,24,42,1];\nvar res = ary.map(function (item,index,input) {\n  return item*10;\n})\nconsole.log(res);//-->[120,230,240,420,10];\nconsole.log(ary);//-->[12,23,24,42,1]；\n```\n\n------\n\n\n## filter()\n\n`filter()` 方法创建一个新的匹配过滤条件的数组\n\n**使用 for:**\n\n```javascript\nvar arr = [\n  {\"name\":\"apple\", \"count\": 2},\n  {\"name\":\"orange\", \"count\": 5},\n  {\"name\":\"pear\", \"count\": 3},\n  {\"name\":\"orange\", \"count\": 16},\n];\nvar newArr = [];\nfor(var i= 0, l = arr.length; i< l; i++){\n  if(arr[i].name === \"orange\" ){\n    newArr.push(arr[i]);\n  }\n}\nconsole.log(\"Filter results:\",newArr);\n```\n\n**使用 filter:**\n\n```javascript\nvar arr = [\n  {\"name\":\"apple\", \"count\": 2},\n  {\"name\":\"orange\", \"count\": 5},\n  {\"name\":\"pear\", \"count\": 3},\n  {\"name\":\"orange\", \"count\": 16},\n];\nvar newArr = arr.filter(function(item){\n  return item.name === \"orange\";\n});\nconsole.log(\"Filter results:\",newArr);\n```\n\n\n## reduce()\n\n我好像不理解这东西，原文就不放了......暂空\n\n## isArray()\n\n`isArray()` 是Array对象的一个静态函数，用来判断一个对象是不是数组\n\n```javascript\nvar ary1 = [];\nvar res1 = Array.isArray(ary1);  // Output: true\nconsole.log(res1)\n\nvar ary2 = new Array();\nvar res2 = Array.isArray(ary2);  // Output: true\nconsole.log(res2)\n\nvar ary3 = [1, 2, 3];\nvar res3 = Array.isArray(ary3);  // Output: true\nconsole.log(res3)\n\nvar ary4 = new Date();\nvar res4 = Array.isArray(ary4);  // Output: false\nconsole.log(res4)\n```","slug":"ES5-array-prototype","published":1,"updated":"2017-04-14T05:26:33.948Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1heaape0000icaj05sdlraq","content":"<p>熟悉ES5中数组Array.prototype方法的使用</p>\n<blockquote>\n<p>转载：<a href=\"https://shimo.im/doc/VXqv2bxTlOUiJJqO/\" target=\"_blank\" rel=\"external\">你还在用for循环大法麽？</a></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.indexOf</div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.lastIndexOf</div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.every</div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.some</div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.forEach</div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.map</div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.filter</div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.reduce</div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.reduceRight</div></pre></td></tr></table></figure>\n<h2 id=\"indexOf\"><a href=\"#indexOf\" class=\"headerlink\" title=\"indexOf()\"></a>indexOf()</h2><p><code>indexOf()</code> 方法返回在该数组中第一个找到的元素位置，没有则返回 <code>-1</code></p>\n<p><strong>使用 for:</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'apple'</span>,<span class=\"string\">'orange'</span>,<span class=\"string\">'pear'</span>],</div><div class=\"line\">    found = <span class=\"literal\">false</span>;</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i= <span class=\"number\">0</span>, l = arr.length; i&lt; l; i++)&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(arr[i] === <span class=\"string\">'orange'</span>)&#123;</div><div class=\"line\">        found = <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"found:\"</span>,found);</div></pre></td></tr></table></figure></p>\n<p><strong>使用 indexOf:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr = [&apos;apple&apos;,&apos;orange&apos;,&apos;pear&apos;];  </div><div class=\"line\">console.log(&quot;found:&quot;, arr.indexOf(&quot;orange&quot;) != -1);</div></pre></td></tr></table></figure></p>\n<h2 id=\"lastindexOf\"><a href=\"#lastindexOf\" class=\"headerlink\" title=\"lastindexOf()\"></a>lastindexOf()</h2><p><code>lastindexOf()</code> 方法返回在该数组中最后一个找到的元素位置，与 indexOf 相反</p>\n<h2 id=\"every\"><a href=\"#every\" class=\"headerlink\" title=\"every()\"></a>every()</h2><p><code>every()</code> 可以监测数组中的每一项是否符合条件</p>\n<p><strong>使用 for:</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* </span></div><div class=\"line\">* 是否全部大于0</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"keyword\">var</span> ary = [<span class=\"number\">12</span>,<span class=\"number\">23</span>,<span class=\"number\">24</span>,<span class=\"number\">42</span>,<span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; ary.length; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(ary[i] &lt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">//需全部满足</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(result()) <span class=\"comment\">//全部满足,返回true</span></div></pre></td></tr></table></figure>\n<p><strong>使用 every:</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ary = [<span class=\"number\">12</span>,<span class=\"number\">23</span>,<span class=\"number\">24</span>,<span class=\"number\">42</span>,<span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> result = ary.every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, index</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> item &gt; <span class=\"number\">0</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(result)</div></pre></td></tr></table></figure></p>\n<h2 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"some()\"></a>some()</h2><p><code>some()</code> 可以监测数组中的某一项是否符合条件</p>\n<p><strong>使用 for:</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* </span></div><div class=\"line\">* 是否存在小于0的项</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"keyword\">var</span> ary = [<span class=\"number\">12</span>,<span class=\"number\">23</span>,<span class=\"number\">-24</span>,<span class=\"number\">42</span>,<span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; ary.length; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(ary[i] &lt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">//只需满足一个</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(result())  <span class=\"comment\">//有一项小于0，返回true</span></div></pre></td></tr></table></figure></p>\n<p><strong>使用 some:</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ary = [<span class=\"number\">12</span>,<span class=\"number\">23</span>,<span class=\"number\">-24</span>,<span class=\"number\">42</span>,<span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> result = ary.some(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, index</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> item &lt; <span class=\"number\">0</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(result)</div></pre></td></tr></table></figure></p>\n<h2 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach()\"></a>forEach()</h2><p><code>forEach()</code> 为每个元素执行对应的方法，是用来替换for循环的</p>\n<p><strong>使用 for:</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i= <span class=\"number\">0</span>, l = arr.length; i&lt; l; i++)&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(arr[i]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>使用 forEach:</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>];</div><div class=\"line\"></div><div class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,index</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(item);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h2 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map()\"></a>map()</h2><p>‘map()’ 对数组的每个元素进行一定操作（映射）后，会返回一个新的数组，<strong>是处理服务器返回数据时是一个非常实用的函数</strong></p>\n<p><strong>使用 for:</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> oldArr = [&#123;</div><div class=\"line\">   <span class=\"attr\">first_name</span>:<span class=\"string\">\"Colin\"</span>,<span class=\"attr\">last_name</span>:<span class=\"string\">\"Toh\"</span></div><div class=\"line\"> &#125;,</div><div class=\"line\"> &#123;</div><div class=\"line\">   <span class=\"attr\">first_name</span>:<span class=\"string\">\"Addy\"</span>,<span class=\"attr\">last_name</span>:<span class=\"string\">\"Osmani\"</span></div><div class=\"line\"> &#125;,</div><div class=\"line\"> &#123;</div><div class=\"line\">   <span class=\"attr\">first_name</span>:<span class=\"string\">\"Yehuda\"</span>,<span class=\"attr\">last_name</span>:<span class=\"string\">\"Katz\"</span></div><div class=\"line\"> &#125;];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNewArr</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> newArr = [];</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i= <span class=\"number\">0</span>, l = oldArr.length; i&lt; l; i++)&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> item = oldArr[i];</div><div class=\"line\">    item.full_name = [item.first_name,item.last_name].join(<span class=\"string\">\" \"</span>);</div><div class=\"line\">    newArr[i] = item;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> newArr;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(getNewArr());</div></pre></td></tr></table></figure></p>\n<p><strong>使用 map:</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> oldArr = [&#123;</div><div class=\"line\">   <span class=\"attr\">first_name</span>:<span class=\"string\">\"Colin\"</span>,<span class=\"attr\">last_name</span>:<span class=\"string\">\"Toh\"</span></div><div class=\"line\"> &#125;,</div><div class=\"line\"> &#123;</div><div class=\"line\">   <span class=\"attr\">first_name</span>:<span class=\"string\">\"Addy\"</span>,<span class=\"attr\">last_name</span>:<span class=\"string\">\"Osmani\"</span></div><div class=\"line\"> &#125;,</div><div class=\"line\"> &#123;</div><div class=\"line\">   <span class=\"attr\">first_name</span>:<span class=\"string\">\"Yehuda\"</span>,<span class=\"attr\">last_name</span>:<span class=\"string\">\"Katz\"</span></div><div class=\"line\"> &#125;];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNewArr</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> oldArr.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,index</span>)</span>&#123;</div><div class=\"line\">    item.full_name = [item.first_name,item.last_name].join(<span class=\"string\">\" \"</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> item;</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(getNewArr());</div></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"forEach-与-map-的区别\"><a href=\"#forEach-与-map-的区别\" class=\"headerlink\" title=\"forEach 与 map 的区别\"></a>forEach 与 map 的区别</h2><p><strong>语法：</strong></p>\n<p><code>forEach</code> 和 <code>map</code> 都支持2个参数：一个是回调函数（item,index,list）和 <a href=\"http://note.youdao.com/noteshare?id=aa25aa404e4d92b9ed40ef79a46f91da\" target=\"_blank\" rel=\"external\">上下文</a>；</p>\n<blockquote>\n<p>forEach：用来遍历数组中的每一项；这个方法执行是没有返回值的，对原来数组也没有影响；数组中有几项，那么传递进去的匿名回调函数就需要执行几次；每一次执行匿名函数的时候，还给其传递了三个参数值：数组中的当前项item,当前项的索引index,原始数组list；<strong>理论上这个方法是没有返回值的，仅仅是遍历数组中的每一项，不对原来数组进行修改；但是我们可以自己通过数组的索引来修改原来的数组</strong>；</p>\n</blockquote>\n<p><code>forEach</code> 方法中的 <code>this</code> 是 <code>ary</code>,匿名回调函数中的 <code>this</code> 默认是 <code>window</code>；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ary = [<span class=\"number\">12</span>,<span class=\"number\">23</span>,<span class=\"number\">24</span>,<span class=\"number\">42</span>,<span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> res = ary.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item,index,input</span>) </span>&#123;</div><div class=\"line\">  input[index] = item*<span class=\"number\">10</span>;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(res);<span class=\"comment\">//--&gt;undefined;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(ary);<span class=\"comment\">//--&gt;会对原来的数组产生改变；</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>map： 和 forEach 非常相似，都是用来遍历数组中的每一项值的，用来遍历数组中的每一项；<br>区别：map的回调函数中支持 return 返回值；return 的是啥，相当于把数组中的这一项变为啥（并不影响原来的数组，只是相当于把原数组克隆一份，把克隆的这一份的数组中的对应项改变了）；</p>\n</blockquote>\n<p>不管是forEach还是map 都支持第二个参数值，第二个参数的意思是把匿名回调函数中的this进行修改。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ary = [<span class=\"number\">12</span>,<span class=\"number\">23</span>,<span class=\"number\">24</span>,<span class=\"number\">42</span>,<span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> res = ary.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item,index,input</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> item*<span class=\"number\">10</span>;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(res);<span class=\"comment\">//--&gt;[120,230,240,420,10];</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(ary);<span class=\"comment\">//--&gt;[12,23,24,42,1]；</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter()\"></a>filter()</h2><p><code>filter()</code> 方法创建一个新的匹配过滤条件的数组</p>\n<p><strong>使用 for:</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [</div><div class=\"line\">  &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"apple\"</span>, <span class=\"string\">\"count\"</span>: <span class=\"number\">2</span>&#125;,</div><div class=\"line\">  &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"orange\"</span>, <span class=\"string\">\"count\"</span>: <span class=\"number\">5</span>&#125;,</div><div class=\"line\">  &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"pear\"</span>, <span class=\"string\">\"count\"</span>: <span class=\"number\">3</span>&#125;,</div><div class=\"line\">  &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"orange\"</span>, <span class=\"string\">\"count\"</span>: <span class=\"number\">16</span>&#125;,</div><div class=\"line\">];</div><div class=\"line\"><span class=\"keyword\">var</span> newArr = [];</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i= <span class=\"number\">0</span>, l = arr.length; i&lt; l; i++)&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(arr[i].name === <span class=\"string\">\"orange\"</span> )&#123;</div><div class=\"line\">    newArr.push(arr[i]);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Filter results:\"</span>,newArr);</div></pre></td></tr></table></figure>\n<p><strong>使用 filter:</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [</div><div class=\"line\">  &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"apple\"</span>, <span class=\"string\">\"count\"</span>: <span class=\"number\">2</span>&#125;,</div><div class=\"line\">  &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"orange\"</span>, <span class=\"string\">\"count\"</span>: <span class=\"number\">5</span>&#125;,</div><div class=\"line\">  &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"pear\"</span>, <span class=\"string\">\"count\"</span>: <span class=\"number\">3</span>&#125;,</div><div class=\"line\">  &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"orange\"</span>, <span class=\"string\">\"count\"</span>: <span class=\"number\">16</span>&#125;,</div><div class=\"line\">];</div><div class=\"line\"><span class=\"keyword\">var</span> newArr = arr.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> item.name === <span class=\"string\">\"orange\"</span>;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Filter results:\"</span>,newArr);</div></pre></td></tr></table></figure>\n<h2 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce()\"></a>reduce()</h2><p>我好像不理解这东西，原文就不放了……暂空</p>\n<h2 id=\"isArray\"><a href=\"#isArray\" class=\"headerlink\" title=\"isArray()\"></a>isArray()</h2><p><code>isArray()</code> 是Array对象的一个静态函数，用来判断一个对象是不是数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ary1 = [];</div><div class=\"line\"><span class=\"keyword\">var</span> res1 = <span class=\"built_in\">Array</span>.isArray(ary1);  <span class=\"comment\">// Output: true</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(res1)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> ary2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</div><div class=\"line\"><span class=\"keyword\">var</span> res2 = <span class=\"built_in\">Array</span>.isArray(ary2);  <span class=\"comment\">// Output: true</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(res2)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> ary3 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> res3 = <span class=\"built_in\">Array</span>.isArray(ary3);  <span class=\"comment\">// Output: true</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(res3)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> ary4 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\"><span class=\"keyword\">var</span> res4 = <span class=\"built_in\">Array</span>.isArray(ary4);  <span class=\"comment\">// Output: false</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(res4)</div></pre></td></tr></table></figure>","excerpt":"","more":"<p>熟悉ES5中数组Array.prototype方法的使用</p>\n<blockquote>\n<p>转载：<a href=\"https://shimo.im/doc/VXqv2bxTlOUiJJqO/\">你还在用for循环大法麽？</a></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.indexOf</div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.lastIndexOf</div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.every</div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.some</div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.forEach</div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.map</div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.filter</div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.reduce</div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.reduceRight</div></pre></td></tr></table></figure>\n<h2 id=\"indexOf\"><a href=\"#indexOf\" class=\"headerlink\" title=\"indexOf()\"></a>indexOf()</h2><p><code>indexOf()</code> 方法返回在该数组中第一个找到的元素位置，没有则返回 <code>-1</code></p>\n<p><strong>使用 for:</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'apple'</span>,<span class=\"string\">'orange'</span>,<span class=\"string\">'pear'</span>],</div><div class=\"line\">    found = <span class=\"literal\">false</span>;</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i= <span class=\"number\">0</span>, l = arr.length; i&lt; l; i++)&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(arr[i] === <span class=\"string\">'orange'</span>)&#123;</div><div class=\"line\">        found = <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"found:\"</span>,found);</div></pre></td></tr></table></figure></p>\n<p><strong>使用 indexOf:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr = [&apos;apple&apos;,&apos;orange&apos;,&apos;pear&apos;];  </div><div class=\"line\">console.log(&quot;found:&quot;, arr.indexOf(&quot;orange&quot;) != -1);</div></pre></td></tr></table></figure></p>\n<h2 id=\"lastindexOf\"><a href=\"#lastindexOf\" class=\"headerlink\" title=\"lastindexOf()\"></a>lastindexOf()</h2><p><code>lastindexOf()</code> 方法返回在该数组中最后一个找到的元素位置，与 indexOf 相反</p>\n<h2 id=\"every\"><a href=\"#every\" class=\"headerlink\" title=\"every()\"></a>every()</h2><p><code>every()</code> 可以监测数组中的每一项是否符合条件</p>\n<p><strong>使用 for:</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* </div><div class=\"line\">* 是否全部大于0</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"keyword\">var</span> ary = [<span class=\"number\">12</span>,<span class=\"number\">23</span>,<span class=\"number\">24</span>,<span class=\"number\">42</span>,<span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; ary.length; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(ary[i] &lt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">//需全部满足</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(result()) <span class=\"comment\">//全部满足,返回true</span></div></pre></td></tr></table></figure>\n<p><strong>使用 every:</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ary = [<span class=\"number\">12</span>,<span class=\"number\">23</span>,<span class=\"number\">24</span>,<span class=\"number\">42</span>,<span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> result = ary.every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, index</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> item &gt; <span class=\"number\">0</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(result)</div></pre></td></tr></table></figure></p>\n<h2 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"some()\"></a>some()</h2><p><code>some()</code> 可以监测数组中的某一项是否符合条件</p>\n<p><strong>使用 for:</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* </div><div class=\"line\">* 是否存在小于0的项</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"keyword\">var</span> ary = [<span class=\"number\">12</span>,<span class=\"number\">23</span>,<span class=\"number\">-24</span>,<span class=\"number\">42</span>,<span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; ary.length; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(ary[i] &lt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">//只需满足一个</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(result())  <span class=\"comment\">//有一项小于0，返回true</span></div></pre></td></tr></table></figure></p>\n<p><strong>使用 some:</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ary = [<span class=\"number\">12</span>,<span class=\"number\">23</span>,<span class=\"number\">-24</span>,<span class=\"number\">42</span>,<span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> result = ary.some(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, index</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> item &lt; <span class=\"number\">0</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(result)</div></pre></td></tr></table></figure></p>\n<h2 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach()\"></a>forEach()</h2><p><code>forEach()</code> 为每个元素执行对应的方法，是用来替换for循环的</p>\n<p><strong>使用 for:</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i= <span class=\"number\">0</span>, l = arr.length; i&lt; l; i++)&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(arr[i]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>使用 forEach:</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>];</div><div class=\"line\"></div><div class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,index</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(item);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h2 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map()\"></a>map()</h2><p>‘map()’ 对数组的每个元素进行一定操作（映射）后，会返回一个新的数组，<strong>是处理服务器返回数据时是一个非常实用的函数</strong></p>\n<p><strong>使用 for:</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> oldArr = [&#123;</div><div class=\"line\">   <span class=\"attr\">first_name</span>:<span class=\"string\">\"Colin\"</span>,<span class=\"attr\">last_name</span>:<span class=\"string\">\"Toh\"</span></div><div class=\"line\"> &#125;,</div><div class=\"line\"> &#123;</div><div class=\"line\">   <span class=\"attr\">first_name</span>:<span class=\"string\">\"Addy\"</span>,<span class=\"attr\">last_name</span>:<span class=\"string\">\"Osmani\"</span></div><div class=\"line\"> &#125;,</div><div class=\"line\"> &#123;</div><div class=\"line\">   <span class=\"attr\">first_name</span>:<span class=\"string\">\"Yehuda\"</span>,<span class=\"attr\">last_name</span>:<span class=\"string\">\"Katz\"</span></div><div class=\"line\"> &#125;];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNewArr</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> newArr = [];</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i= <span class=\"number\">0</span>, l = oldArr.length; i&lt; l; i++)&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> item = oldArr[i];</div><div class=\"line\">    item.full_name = [item.first_name,item.last_name].join(<span class=\"string\">\" \"</span>);</div><div class=\"line\">    newArr[i] = item;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> newArr;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(getNewArr());</div></pre></td></tr></table></figure></p>\n<p><strong>使用 map:</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> oldArr = [&#123;</div><div class=\"line\">   <span class=\"attr\">first_name</span>:<span class=\"string\">\"Colin\"</span>,<span class=\"attr\">last_name</span>:<span class=\"string\">\"Toh\"</span></div><div class=\"line\"> &#125;,</div><div class=\"line\"> &#123;</div><div class=\"line\">   <span class=\"attr\">first_name</span>:<span class=\"string\">\"Addy\"</span>,<span class=\"attr\">last_name</span>:<span class=\"string\">\"Osmani\"</span></div><div class=\"line\"> &#125;,</div><div class=\"line\"> &#123;</div><div class=\"line\">   <span class=\"attr\">first_name</span>:<span class=\"string\">\"Yehuda\"</span>,<span class=\"attr\">last_name</span>:<span class=\"string\">\"Katz\"</span></div><div class=\"line\"> &#125;];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNewArr</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> oldArr.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,index</span>)</span>&#123;</div><div class=\"line\">    item.full_name = [item.first_name,item.last_name].join(<span class=\"string\">\" \"</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> item;</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(getNewArr());</div></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"forEach-与-map-的区别\"><a href=\"#forEach-与-map-的区别\" class=\"headerlink\" title=\"forEach 与 map 的区别\"></a>forEach 与 map 的区别</h2><p><strong>语法：</strong></p>\n<p><code>forEach</code> 和 <code>map</code> 都支持2个参数：一个是回调函数（item,index,list）和 <a href=\"http://note.youdao.com/noteshare?id=aa25aa404e4d92b9ed40ef79a46f91da\">上下文</a>；</p>\n<blockquote>\n<p>forEach：用来遍历数组中的每一项；这个方法执行是没有返回值的，对原来数组也没有影响；数组中有几项，那么传递进去的匿名回调函数就需要执行几次；每一次执行匿名函数的时候，还给其传递了三个参数值：数组中的当前项item,当前项的索引index,原始数组list；<strong>理论上这个方法是没有返回值的，仅仅是遍历数组中的每一项，不对原来数组进行修改；但是我们可以自己通过数组的索引来修改原来的数组</strong>；</p>\n</blockquote>\n<p><code>forEach</code> 方法中的 <code>this</code> 是 <code>ary</code>,匿名回调函数中的 <code>this</code> 默认是 <code>window</code>；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ary = [<span class=\"number\">12</span>,<span class=\"number\">23</span>,<span class=\"number\">24</span>,<span class=\"number\">42</span>,<span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> res = ary.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item,index,input</span>) </span>&#123;</div><div class=\"line\">  input[index] = item*<span class=\"number\">10</span>;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(res);<span class=\"comment\">//--&gt;undefined;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(ary);<span class=\"comment\">//--&gt;会对原来的数组产生改变；</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>map： 和 forEach 非常相似，都是用来遍历数组中的每一项值的，用来遍历数组中的每一项；<br>区别：map的回调函数中支持 return 返回值；return 的是啥，相当于把数组中的这一项变为啥（并不影响原来的数组，只是相当于把原数组克隆一份，把克隆的这一份的数组中的对应项改变了）；</p>\n</blockquote>\n<p>不管是forEach还是map 都支持第二个参数值，第二个参数的意思是把匿名回调函数中的this进行修改。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ary = [<span class=\"number\">12</span>,<span class=\"number\">23</span>,<span class=\"number\">24</span>,<span class=\"number\">42</span>,<span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> res = ary.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item,index,input</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> item*<span class=\"number\">10</span>;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(res);<span class=\"comment\">//--&gt;[120,230,240,420,10];</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(ary);<span class=\"comment\">//--&gt;[12,23,24,42,1]；</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter()\"></a>filter()</h2><p><code>filter()</code> 方法创建一个新的匹配过滤条件的数组</p>\n<p><strong>使用 for:</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [</div><div class=\"line\">  &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"apple\"</span>, <span class=\"string\">\"count\"</span>: <span class=\"number\">2</span>&#125;,</div><div class=\"line\">  &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"orange\"</span>, <span class=\"string\">\"count\"</span>: <span class=\"number\">5</span>&#125;,</div><div class=\"line\">  &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"pear\"</span>, <span class=\"string\">\"count\"</span>: <span class=\"number\">3</span>&#125;,</div><div class=\"line\">  &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"orange\"</span>, <span class=\"string\">\"count\"</span>: <span class=\"number\">16</span>&#125;,</div><div class=\"line\">];</div><div class=\"line\"><span class=\"keyword\">var</span> newArr = [];</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i= <span class=\"number\">0</span>, l = arr.length; i&lt; l; i++)&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(arr[i].name === <span class=\"string\">\"orange\"</span> )&#123;</div><div class=\"line\">    newArr.push(arr[i]);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Filter results:\"</span>,newArr);</div></pre></td></tr></table></figure>\n<p><strong>使用 filter:</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [</div><div class=\"line\">  &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"apple\"</span>, <span class=\"string\">\"count\"</span>: <span class=\"number\">2</span>&#125;,</div><div class=\"line\">  &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"orange\"</span>, <span class=\"string\">\"count\"</span>: <span class=\"number\">5</span>&#125;,</div><div class=\"line\">  &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"pear\"</span>, <span class=\"string\">\"count\"</span>: <span class=\"number\">3</span>&#125;,</div><div class=\"line\">  &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"orange\"</span>, <span class=\"string\">\"count\"</span>: <span class=\"number\">16</span>&#125;,</div><div class=\"line\">];</div><div class=\"line\"><span class=\"keyword\">var</span> newArr = arr.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> item.name === <span class=\"string\">\"orange\"</span>;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Filter results:\"</span>,newArr);</div></pre></td></tr></table></figure>\n<h2 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce()\"></a>reduce()</h2><p>我好像不理解这东西，原文就不放了……暂空</p>\n<h2 id=\"isArray\"><a href=\"#isArray\" class=\"headerlink\" title=\"isArray()\"></a>isArray()</h2><p><code>isArray()</code> 是Array对象的一个静态函数，用来判断一个对象是不是数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ary1 = [];</div><div class=\"line\"><span class=\"keyword\">var</span> res1 = <span class=\"built_in\">Array</span>.isArray(ary1);  <span class=\"comment\">// Output: true</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(res1)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> ary2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</div><div class=\"line\"><span class=\"keyword\">var</span> res2 = <span class=\"built_in\">Array</span>.isArray(ary2);  <span class=\"comment\">// Output: true</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(res2)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> ary3 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> res3 = <span class=\"built_in\">Array</span>.isArray(ary3);  <span class=\"comment\">// Output: true</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(res3)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> ary4 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\"><span class=\"keyword\">var</span> res4 = <span class=\"built_in\">Array</span>.isArray(ary4);  <span class=\"comment\">// Output: false</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(res4)</div></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj17hdrr30000hkajgrruinny","category_id":"cj17hdrrd0004hkajlfcynmbx","_id":"cj17hdrrs000dhkaj0l1luk8o"},{"post_id":"cj17hdrrk0007hkajfs0wiews","category_id":"cj17hdrrs000ehkaj01x4j81h","_id":"cj17hdrrw000jhkajkcxmlarf"},{"post_id":"cj17hdrrm0008hkajxvsn8mk8","category_id":"cj17hdrrs000ehkaj01x4j81h","_id":"cj17hdrrx000mhkajoqe6p6ck"},{"post_id":"cj17hdrrp000ahkajx4auixcp","category_id":"cj17hdrrs000ehkaj01x4j81h","_id":"cj17hdrry000ohkajis3t102v"},{"post_id":"cj1heaape0000icaj05sdlraq","category_id":"cj17hdrrd0004hkajlfcynmbx","_id":"cj1heaapj0002icajshugu5xv"}],"PostTag":[{"post_id":"cj17hdrrm0008hkajxvsn8mk8","tag_id":"cj17hdrrr000bhkajupb4zaaq","_id":"cj17hdrrw000ihkajg4278b37"},{"post_id":"cj17hdrrp000ahkajx4auixcp","tag_id":"cj17hdrru000ghkaj1asbv7hy","_id":"cj17hdrry000nhkajao8tzj7e"},{"post_id":"cj17hdrrp000ahkajx4auixcp","tag_id":"cj17hdrrw000khkajcosggmc9","_id":"cj17hdrry000phkaj8emvh30j"},{"post_id":"cj1heaape0000icaj05sdlraq","tag_id":"cj17hdrrj0006hkajdrhio2s1","_id":"cj1heaapi0001icajcq0ohser"}],"Tag":[{"name":"array","_id":"cj17hdrrj0006hkajdrhio2s1"},{"name":"font","_id":"cj17hdrrr000bhkajupb4zaaq"},{"name":"audio","_id":"cj17hdrru000ghkaj1asbv7hy"},{"name":"localStorage","_id":"cj17hdrrw000khkajcosggmc9"}]}}